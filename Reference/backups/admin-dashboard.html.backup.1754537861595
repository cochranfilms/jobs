<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard | Cochran Films</title>
    
    <!-- Favicon to prevent 404 error -->
    <link rel="icon" href="https://static.wixstatic.com/media/aeef42_570164eee75f4394a4fc1cf9c62ceae0~mv2.png" type="image/png">
    
    <!-- Schema.org structured data for SEO -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Organization",
      "name": "Cochran Films",
      "url": "https://cochranfilms.com",
      "logo": "https://static.wixstatic.com/media/aeef42_570164eee75f4394a4fc1cf9c62ceae0~mv2.png",
      "description": "Professional film and photography services with automated creator management system",
      "address": {
        "@type": "PostalAddress",
        "addressLocality": "Douglasville",
        "addressRegion": "GA",
        "addressCountry": "US"
      },
      "contactPoint": {
        "@type": "ContactPoint",
        "contactType": "customer service",
        "email": "info@cochranfilms.com"
      },
      "sameAs": [
        "https://collaborate.cochranfilms.com"
      ]
    }
    </script>
    
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "WebApplication",
      "name": "Cochran Films Admin Dashboard",
      "description": "Central management system for creator contracts, job listings, and automated workflows",
      "url": "https://collaborate.cochranfilms.com/admin-dashboard.html",
      "applicationCategory": "BusinessApplication",
      "operatingSystem": "Web Browser",
      "offers": {
        "@type": "Offer",
        "price": "0",
        "priceCurrency": "USD"
      },
      "featureList": [
        "Creator Management",
        "Contract Automation",
        "Job Listings",
        "Payment Processing",
        "Email Notifications",
        "GitHub Integration"
      ]
    }
    </script>
    
    <!-- Content Security Policy - Allow Google APIs, EmailJS, GitHub API, and Firebase -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' https://apis.google.com https://accounts.google.com https://ssl.gstatic.com https://www.gstatic.com https://cdn.jsdelivr.net https://cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdnjs.cloudflare.com; font-src 'self' data: https://fonts.gstatic.com https://cdnjs.cloudflare.com; img-src 'self' data: https:; connect-src 'self' https://apis.google.com https://accounts.google.com https://www.googleapis.com https://api.emailjs.com https://api.github.com https://identitytoolkit.googleapis.com https://securetoken.googleapis.com; frame-src https://accounts.google.com;"
    
    <!-- Fonts -->
    <link rel="preload" href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;500;600;700&family=Inter:wght@300;400;500;600;700&display=swap" as="style">
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;500;600;700&family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Font Awesome for Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    

    
    <!-- Performance Data Script -->

    
    <!-- EmailJS for automated job acceptance emails -->
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/@emailjs/browser@4/dist/email.min.js"></script>
    <script type="text/javascript">
        (function() {
            emailjs.init("p4pF3OWvh-DXtae4c");
        })();
    </script>
    
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-auth-compat.js"></script>
    
    <!-- PDF Generation Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    
    <!-- Secure Bank Storage -->
    <script src="secure-bank-storage.js"></script>
    <script src="admin-bank-viewer.js"></script>
    
    <script>
        // Simple admin dashboard configuration
        let uploadedContracts = [];
        let contractsAnalytics = {};
        let performanceReviews = {};
        let users = {};
        let jobs = [];

        // EmailJS Configuration for Job Acceptance
        const EMAILJS_CONFIG = {
            publicKey: 'p4pF3OWvh-DXtae4c',
            serviceId: 'service_t11yvru',
            jobAcceptanceTemplateId: 'template_job_acceptance' // You need to create this template in EmailJS dashboard
        };

        // Firebase Configuration (secure)
        const firebaseConfig = {
            apiKey: 'AIzaSyCkL31Phi7FxYCeB5zgHeYTb2iY2sTJJdw', // Will be replaced with env var in production
            authDomain: 'cochran-films.firebaseapp.com',
            projectId: 'cochran-films',
            storageBucket: 'cochran-films.appspot.com',
            messagingSenderId: '566448458094',
            appId: '1:566448458094:web:default' // Will be replaced with env var in production
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();

        // Admin role management
        const ADMIN_EMAILS = [
            'info@cochranfilms.com',
            'admin@cochranfilms.com',
            'cody@cochranfilms.com'
        ];

        // Check if user has admin privileges
        function isAdminUser(email) {
            return ADMIN_EMAILS.includes(email.toLowerCase());
        }

        // Create Firebase account for new user
        async function createFirebaseAccount(email, password) {
            try {
                // Create user in Firebase Authentication
                const userCredential = await auth.createUserWithEmailAndPassword(email, password);
                console.log('✅ Firebase account created for:', email);
                
                // Sign out the admin user after creating the account
                await auth.signOut();
                
                return { success: true, uid: userCredential.user.uid };
            } catch (error) {
                console.error('❌ Error creating Firebase account:', error);
                
                // Handle specific errors
                let errorMessage = 'Failed to create account.';
                switch (error.code) {
                    case 'auth/email-already-in-use':
                        errorMessage = 'Email already exists in Firebase.';
                        break;
                    case 'auth/invalid-email':
                        errorMessage = 'Invalid email format.';
                        break;
                    case 'auth/weak-password':
                        errorMessage = 'Password is too weak.';
                        break;
                }
                
                return { success: false, error: errorMessage };
            }
        }
        
        // Delete Firebase account
        async function deleteFirebaseAccount(email) {
            try {
                console.log(`🔄 Deleting Firebase account for: ${email}`);
                
                const response = await fetch('/api/firebase', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ email })
                });
                
                const result = await response.json();
                
                if (response.ok && result.success) {
                    console.log('✅ Firebase account deleted successfully:', result.message);
                    return { success: true, message: result.message };
                } else {
                    console.error('❌ Firebase deletion failed:', result.error);
                    return { success: false, error: result.error || 'Failed to delete Firebase account' };
                }
            } catch (error) {
                console.error('❌ Error deleting Firebase account:', error);
                return { success: false, error: error.message };
            }
        }

        // Create Firebase accounts for existing users
        async function createFirebaseAccountsForExistingUsers() {
            try {
                await loadUsers();
                
                let createdCount = 0;
                let errorCount = 0;
                
                for (const [userName, userData] of Object.entries(users)) {
                    const email = userData.profile?.email;
                    const password = userData.profile?.password;
                    
                    if (email && password) {
                        console.log(`🔄 Creating Firebase account for: ${email}`);
                        
                        const result = await createFirebaseAccount(email, password);
                        
                        if (result.success) {
                            createdCount++;
                            showNotification(`✅ Created Firebase account for ${email}`, 'success');
                        } else {
                            errorCount++;
                            showNotification(`❌ Failed to create account for ${email}: ${result.error}`, 'error');
                        }
                        
                        // Small delay to avoid rate limiting
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }
                }
                
                showNotification(`🎉 Firebase account creation complete! Created: ${createdCount}, Errors: ${errorCount}`, 'success');
                
            } catch (error) {
                console.error('❌ Error creating Firebase accounts:', error);
                showNotification('❌ Error creating Firebase accounts. Please try again.', 'error');
            }
        }

        // Global GitHub configuration
        let GITHUB_CONFIG = {
            token: null,
            owner: 'cochranfilms',
            repo: 'cochran-job-listings',
            repoOwner: 'cochranfilms',
            repoName: 'cochran-job-listings',
            branch: 'main'
        };
        
        // Load GitHub configuration from external file
        async function loadGitHubConfig() {
            try {
                // First try to load the public config
                const response = await fetch('config/github-config-public.json');
                if (response.ok) {
                    const config = await response.json();
                    GITHUB_CONFIG = {
                        token: null, // Token needs to be set via admin dashboard
                        owner: config.repoOwner || 'cochranfilms',
                        repo: config.repoName || 'cochran-job-listings',
                        repoOwner: config.repoOwner || 'cochranfilms',
                        repoName: config.repoName || 'cochran-job-listings',
                        branch: config.branch || 'main'
                    };
                    console.log('✅ GitHub configuration loaded successfully');
                    return true;
                } else {
                    console.warn('⚠️ Could not load GitHub config file, using fallback');
                    return false;
                }
            } catch (error) {
                console.warn('⚠️ Error loading GitHub config:', error);
                return false;
            }
        }
        
        // GitHub token management is now handled securely by the server
        // No client-side token handling needed - all API calls go through secure server endpoints

        // Initialize EmailJS and GitHub config
        document.addEventListener('DOMContentLoaded', async function() {
            if (typeof emailjs !== 'undefined') {
                emailjs.init(EMAILJS_CONFIG.publicKey);
                console.log('✅ EmailJS initialized for job acceptance emails');
            } else {
                console.warn('⚠️ EmailJS library not loaded');
            }
            
            // Load GitHub configuration
            await loadGitHubConfig();
            
            // Clear any old local contract data from localStorage
            localStorage.removeItem('uploadedContracts');
            localStorage.removeItem('signedContracts');
            console.log('🧹 Cleared old local contract data from localStorage');
        });

        // Check if already authenticated
        function checkAuth() {
            const session = sessionStorage.getItem('adminDashboardAuthenticated');
            if (session === 'true') {
                isAuthenticated = true;
                showAdminInterface();
            } else {
                showLoginScreen();
            }
        }

        // Show login screen
        function showLoginScreen() {
            document.getElementById('loginScreen').style.display = 'flex';
            document.getElementById('adminInterface').style.display = 'none';
        }

        // Show admin interface
        async function showAdminInterface() {
            document.getElementById('loginScreen').style.display = 'none';
            document.getElementById('adminInterface').style.display = 'block';
            
            await loadJobs();
            await loadUsers();
            await loadUploadedContracts();
            await loadPerformanceReviews();
            
                    // Real-time monitoring removed - not needed for admin purposes
        }

        // Handle login with Firebase
        async function handleLogin(event) {
            event.preventDefault();
            
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            
            // Show loading state
            const submitBtn = event.target.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            submitBtn.textContent = 'Signing in...';
            submitBtn.disabled = true;
            
            try {
                
                // Firebase authentication
                const userCredential = await auth.signInWithEmailAndPassword(username, password);
                
                // Check if user has admin privileges
                if (isAdminUser(userCredential.user.email)) {
                    sessionStorage.setItem('adminDashboardAuthenticated', 'true');
                    sessionStorage.setItem('adminUser', JSON.stringify({
                        email: userCredential.user.email,
                        uid: userCredential.user.uid
                    }));
                    isAuthenticated = true;
                    showAdminInterface();
                    
                    // Show success notification
                    showNotification('Successfully signed in!', 'success');
                } else {
                    // For non-admin users, you can redirect to user portal
                    showNotification('Access denied. Admin privileges required.', 'error');
                    document.getElementById('errorMessage').style.display = 'block';
                }
                
            } catch (error) {
                console.error('Login error:', error);
                
                // Handle specific Firebase errors
                let errorMessage = 'Login failed. Please try again.';
                switch (error.code) {
                    case 'auth/user-not-found':
                        errorMessage = 'User not found. Please check your email.';
                        break;
                    case 'auth/wrong-password':
                        errorMessage = 'Incorrect password. Please try again.';
                        break;
                    case 'auth/invalid-email':
                        errorMessage = 'Invalid email format.';
                        break;
                    case 'auth/too-many-requests':
                        errorMessage = 'Too many failed attempts. Please try again later.';
                        break;
                }
                
                showNotification(errorMessage, 'error');
                document.getElementById('errorMessage').style.display = 'block';
            } finally {
                // Reset button state
                const submitBtn = event.target.querySelector('button[type="submit"]');
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
            }
        }

        // Initialize login form handler
        document.addEventListener('DOMContentLoaded', function() {
            const loginForm = document.getElementById('loginForm');
            if (loginForm) {
                loginForm.addEventListener('submit', handleLogin);
            }
            
            // Initialize bank viewer immediately
            try {
                window.adminBankViewer = new AdminBankViewer();
                console.log('✅ AdminBankViewer initialized on page load');
            } catch (error) {
                console.error('❌ Error initializing AdminBankViewer on page load:', error);
                window.adminBankViewer = null;
            }
            
            // Listen for payment method updates from user portal
            window.addEventListener('message', function(event) {
                if (event.data.type === 'paymentMethodUpdated') {
                    console.log('🔄 Payment method updated by user:', event.data.email, event.data.paymentMethod);
                    // Refresh user data to show updated payment methods
                    loadUsers();
                }
            });
            
            // Real-time monitoring cleanup removed - not needed for admin purposes
        });

        // Logout with Firebase
        async function logout() {
            try {
                // Real-time monitoring cleanup removed - not needed for admin purposes
                
                // Sign out from Firebase
                await auth.signOut();
                
                // Clear session storage
                sessionStorage.removeItem('adminDashboardAuthenticated');
                sessionStorage.removeItem('adminUser');
                isAuthenticated = false;
                
                // Show logout notification
                showNotification('Successfully signed out!', 'info');
                
                // Show login screen
                showLoginScreen();
                
            } catch (error) {
                console.error('Logout error:', error);
                showNotification('Error signing out. Please try again.', 'error');
            }
        }

        // Tab switching
        function switchTab(tabName, event = null) {
            const tabs = document.querySelectorAll('.tab-content');
            const btns = document.querySelectorAll('.tab-btn');
            
            // Remove active class from all tabs and buttons
            tabs.forEach(tab => tab.classList.remove('active'));
            btns.forEach(btn => btn.classList.remove('active'));
            
            if (tabName === 'firebase') {
                // For Firebase tab, make sure the firebase-tab is active and hide others
                const firebaseTab = document.getElementById('firebase-tab');
                if (firebaseTab) {
                    firebaseTab.classList.add('active');
                    // Hide all other tab content
                    document.getElementById('jobs-tab').style.display = 'none';
                    document.getElementById('contracts-tab').style.display = 'none';
                    firebaseTab.style.display = 'block';
                }
                showFirebaseManagement();
            } else {
                // For other tabs, activate the specific tab and show it
                const targetTab = document.getElementById(tabName + '-tab');
                if (targetTab) {
                    targetTab.classList.add('active');
                    targetTab.style.display = 'block';
                    // Hide firebase tab
                    const firebaseTab = document.getElementById('firebase-tab');
                    if (firebaseTab) {
                        firebaseTab.style.display = 'none';
                    }
                }
            }
            
            // Add active class to the clicked button if event is provided
            if (event && event.target) {
                event.target.classList.add('active');
            } else {
                // Find the button for this tab and activate it
                const tabButton = document.querySelector(`[onclick*="${tabName}"]`);
                if (tabButton) {
                    tabButton.classList.add('active');
                }
            }
        }

        // ==================== CONTRACTS UPLOAD FUNCTIONALITY ====================

        // Manual upload functionality removed - contracts are now automatically uploaded via contract signing

        // Manual upload functionality removed - contracts are now automatically uploaded via contract signing

        // Manual upload functions removed - contracts are now automatically uploaded via contract signing

        // Load uploaded contracts from centralized users.json
        async function loadUploadedContracts() {
            console.log('🔄 Loading uploaded contracts from centralized users.json...');
            
            try {
                const response = await fetch('users.json');
                if (response.ok) {
                    const usersData = await response.json();
                    uploadedContracts = [];
                    
                    // Extract contract data from centralized users data
                    for (const [userName, userData] of Object.entries(usersData.users)) {
                        if (userData.contract && userData.contract.contractId) {
                            // Convert user contract data to uploaded contracts format
                            const contractData = {
                                contractId: userData.contract.contractId,
                                freelancerName: userData.contract.freelancerName || userName,
                                freelancerEmail: userData.contract.freelancerEmail || userData.profile?.email,
                                role: userData.contract.role || userData.profile?.role,
                                rate: userData.contract.rate || userData.profile?.rate,
                                location: userData.contract.location || userData.profile?.location,
                                fileName: userData.contract.fileName,
                                fileSize: userData.contract.fileSize,
                                uploadDate: userData.contract.uploadDate,
                                status: userData.contract.status,
                                githubUrl: userData.contract.githubUrl,
                                notes: userData.contract.notes,
                                contractDate: userData.contract.contractDate,
                                signedDate: userData.contract.signedDate
                            };
                            uploadedContracts.push(contractData);
                            console.log(`✅ Found contract for: ${userName} (${contractData.fileName})`);
                        }
                    }
                    
                    console.log('✅ Loaded', uploadedContracts.length, 'uploaded contracts from centralized users.json');
                } else {
                    console.warn('⚠️ Could not load users.json, showing empty state');
                    uploadedContracts = [];
                }
            } catch (error) {
                console.error('❌ Error loading uploaded contracts from centralized data:', error);
                uploadedContracts = [];
            }
            
            displayUploadedContracts();
            updateContractAnalytics();
            
            console.log('✅ Loaded', uploadedContracts.length, 'uploaded contracts');
        }

        // Display uploaded contracts
        function displayUploadedContracts() {
            const container = document.getElementById('uploadedContractsList');
            const countElement = document.getElementById('contractCount');
            
            // Check if container exists
            if (!container) {
                console.warn('⚠️ uploadedContractsList container not found');
                return;
            }
            
            if (uploadedContracts.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; color: rgba(255,255,255,0.6); padding: 2rem;">
                        <h3 style="color: rgba(255,255,255,0.8); margin-bottom: 1rem;">📋 No Contracts Uploaded Yet</h3>
                        <p>Upload signed contract PDFs using the form above</p>
                    </div>
                `;
                if (countElement) countElement.textContent = '';
                return;
            }
            
            if (countElement) countElement.textContent = `(${uploadedContracts.length} contract${uploadedContracts.length !== 1 ? 's' : ''})`;
            
            const contractsHTML = uploadedContracts.map((contract, index) => `
                <div class="item-card">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                        <div style="display: flex; align-items: center; gap: 1rem;">
                            <input type="checkbox" name="contract-select" value="${index}" style="transform: scale(1.2);">
                            <h3>${contract.freelancerName}</h3>
                        </div>
                        <div style="text-align: right; font-size: 0.8rem; color: rgba(255,255,255,0.6);">
                            <div>📁 ${contract.fileName}</div>
                            <div>📤 ${new Date(contract.uploadDate).toLocaleDateString()}</div>
                        </div>
                    </div>
                    
                    <div class="item-meta">
                        <span>📧 ${contract.freelancerEmail}</span>
                        <span>🎯 ${contract.role}</span>
                        <span>💰 ${contract.rate}</span>
                        <span>📍 ${contract.location}</span>
                        ${contract.contractDate ? `<span>📅 ${contract.contractDate}</span>` : ''}
                    </div>
                    
                    <div style="background: rgba(255,178,0,0.1); padding: 1rem; border-radius: 8px; margin: 1rem 0; border: 1px solid rgba(255,178,0,0.3);">
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; font-size: 0.9rem;">
                            <div><strong>Contract ID:</strong><br>${contract.contractId}</div>
                            <div><strong>File Size:</strong><br>${(contract.fileSize / 1024).toFixed(1)} KB</div>
                        </div>
                        ${contract.notes ? `<div style="margin-top: 0.5rem;"><strong>Notes:</strong><br>${contract.notes}</div>` : ''}
                    </div>
                    
                    <div class="actions">
                        <button class="btn btn-small" onclick="downloadUploadedContract(${index})">
                            <i class="fas fa-download"></i> Download PDF
                        </button>
                        <button class="btn btn-small" onclick="viewUploadedContractDetails(${index})">
                            <i class="fas fa-eye"></i> View Details
                        </button>
                        <button class="btn btn-small btn-danger" onclick="deleteUploadedContract(${index})">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            `).join('');
            
            container.innerHTML = contractsHTML;
        }

        // Bulk delete selected contracts
        async function bulkDeleteContracts() {
            const selectedCheckboxes = document.querySelectorAll('input[name="contract-select"]:checked');
            
            if (selectedCheckboxes.length === 0) {
                showNotification('❌ Please select at least one contract to delete.', 'warning');
                return;
            }
            
            const selectedContracts = Array.from(selectedCheckboxes).map(checkbox => {
                const index = parseInt(checkbox.value);
                return { index, contract: uploadedContracts[index] };
            });
            
            if (confirm(`Are you sure you want to delete ${selectedContracts.length} contract(s)?\n\nThis will delete both the contract data AND the PDF files from GitHub.\n\nThis action cannot be undone.`)) {
                try {
                    let successCount = 0;
                    let errorCount = 0;
                    let pdfDeletedCount = 0;
                    let localFileDeletedCount = 0;
                    
                    // Sort by index in descending order to maintain correct indices during deletion
                    selectedContracts.sort((a, b) => b.index - a.index);
                    
                    for (const { index, contract } of selectedContracts) {
                        try {
                            // 1. Remove from local array
                            uploadedContracts.splice(index, 1);
                            
                            // 2. Try to delete PDF file from GitHub
                            if (contract.freelancerName) {
                                try {
                                    // Create safe filename from freelancer name (same as download function)
                                    const safeFileName = contract.freelancerName.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, ' ').trim() + '.pdf';
                                    console.log(`🗑️ Attempting to delete PDF file: ${safeFileName}`);
                                    
                                    // First, get the file's SHA
                                    const getResponse = await fetch('/api/github/file/contracts/' + safeFileName);
                                    let sha = null;
                                    
                                    if (getResponse.ok) {
                                        const fileData = await getResponse.json();
                                        sha = fileData.sha;
                                        console.log('📄 Got PDF file SHA:', sha.substring(0, 7));
                                    } else if (getResponse.status === 404) {
                                        console.log('📄 PDF file not found on GitHub, attempting local cleanup');
                                        // Try to delete from local contracts folder if it exists
                                        try {
                                            const localDeleteResponse = await fetch('/api/contracts/delete-local', {
                                                method: 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json'
                                                },
                                                body: JSON.stringify({
                                                    fileName: safeFileName
                                                })
                                            });
                                            
                                            if (localDeleteResponse.ok) {
                                                console.log('✅ Local PDF file deleted:', safeFileName);
                                                localFileDeletedCount++;
                                            }
                                        } catch (localError) {
                                            console.warn('⚠️ Could not delete local PDF file:', localError);
                                        }
                                    } else {
                                        console.warn('⚠️ Could not get PDF file SHA, attempting local cleanup');
                                        // Try local deletion as fallback
                                        try {
                                            const localDeleteResponse = await fetch('/api/contracts/delete-local', {
                                                method: 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json'
                                                },
                                                body: JSON.stringify({
                                                    fileName: safeFileName
                                                })
                                            });
                                            
                                            if (localDeleteResponse.ok) {
                                                console.log('✅ Local PDF file deleted:', safeFileName);
                                                localFileDeletedCount++;
                                            }
                                        } catch (localError) {
                                            console.warn('⚠️ Could not delete local PDF file:', localError);
                                        }
                                    }
                                    
                                    // If we have the SHA, proceed with GitHub deletion
                                    if (sha) {
                                        const deleteResponse = await fetch('/api/github/file/contracts/' + safeFileName, {
                                            method: 'DELETE',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify({
                                                message: `Delete contract PDF: ${safeFileName} - ${contract.freelancerName}`,
                                                sha: sha
                                            })
                                        });
                                        
                                        if (deleteResponse.ok) {
                                            console.log('✅ PDF file deleted from GitHub:', contract.fileName);
                                            pdfDeletedCount++;
                                        } else {
                                            const errorData = await deleteResponse.json().catch(() => ({}));
                                            console.warn('⚠️ Could not delete PDF file from GitHub:', contract.fileName, errorData);
                                            
                                            // Try local deletion as fallback
                                            try {
                                                const localDeleteResponse = await fetch('/api/contracts/delete-local', {
                                                    method: 'POST',
                                                    headers: {
                                                        'Content-Type': 'application/json'
                                                    },
                                                    body: JSON.stringify({
                                                        fileName: contract.fileName
                                                    })
                                                });
                                                
                                                if (localDeleteResponse.ok) {
                                                    console.log('✅ Local PDF file deleted as fallback:', contract.fileName);
                                                    localFileDeletedCount++;
                                                }
                                            } catch (localError) {
                                                console.warn('⚠️ Could not delete local PDF file as fallback:', localError);
                                            }
                                        }
                                    }
                                } catch (pdfError) {
                                    console.warn('⚠️ Error deleting PDF file:', pdfError);
                                    
                                    // Try local deletion as final fallback
                                    try {
                                        const localDeleteResponse = await fetch('/api/contracts/delete-local', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify({
                                                fileName: contract.fileName
                                            })
                                        });
                                        
                                        if (localDeleteResponse.ok) {
                                            console.log('✅ Local PDF file deleted as final fallback:', contract.fileName);
                                            localFileDeletedCount++;
                                        }
                                    } catch (localError) {
                                        console.warn('⚠️ Could not delete local PDF file as final fallback:', localError);
                                    }
                                }
                            }
                            
                            successCount++;
                        } catch (error) {
                            console.error(`❌ Error deleting contract ${contract.contractId}:`, error);
                            errorCount++;
                        }
                    }
                    
                    // 3. Update uploaded-contracts.json on GitHub
                    const gitHubUpdateSuccess = await updateUploadedContractsOnGitHub();
                    
                    // 4. Update display
                    displayUploadedContracts();
                    updateContractAnalytics();
                    
                    // 5. Show appropriate success message
                    if (errorCount === 0 && gitHubUpdateSuccess) {
                        if (pdfDeletedCount === selectedContracts.length) {
                            showNotification(`✅ Successfully deleted ${successCount} contract(s)! Removed from GitHub and all PDF files deleted.`, 'success');
                        } else if (localFileDeletedCount > 0) {
                            showNotification(`✅ Successfully deleted ${successCount} contract(s) from data. ${pdfDeletedCount} PDF files deleted from GitHub, ${localFileDeletedCount} local files cleaned up.`, 'success');
                        } else {
                            showNotification(`✅ Successfully deleted ${successCount} contract(s) from data. ${pdfDeletedCount}/${selectedContracts.length} PDF files deleted from GitHub.`, 'success');
                        }
                    } else if (errorCount === 0) {
                        showNotification(`⚠️ Deleted ${successCount} contract(s) locally but GitHub update failed. Check console for details.`, 'warning');
                    } else {
                        showNotification(`⚠️ Deleted ${successCount} contract(s), but ${errorCount} failed.\n\nCheck the console for details.`, 'warning');
                    }
                    
                } catch (error) {
                    console.error('❌ Error in bulk delete:', error);
                    showNotification(`❌ Error during bulk delete: ${error.message}`, 'error');
                }
            }
        }

        // Download uploaded contract
        async function downloadUploadedContract(index) {
            const contract = uploadedContracts[index];
            if (!contract || !contract.fileName) {
                showNotification('❌ Contract file not found.', 'error');
                return;
            }
            
            try {
                console.log('📤 Attempting to download contract:', contract.fileName);
                
                // Try to download from the API endpoint first
                const apiUrl = `/api/contracts?filename=${encodeURIComponent(contract.fileName)}`;
                console.log('📤 API URL:', apiUrl);
                
                const response = await fetch(apiUrl);
                if (response.ok) {
                    // Create blob from response
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    
                    // Create download link
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = contract.fileName;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    
                    // Clean up
                    window.URL.revokeObjectURL(url);
                    
                    console.log('📄 Downloaded contract via API:', contract.fileName);
                    
                    // Add notification to sophisticated notification system
                    await addNotification(
                        'Contract Downloaded Successfully',
                        `Contract "${contract.fileName}" was downloaded via API endpoint.`,
                        'contract_downloaded',
                        {
                            contractId: contract.contractId,
                            fileName: contract.fileName,
                            freelancerName: contract.freelancerName,
                            actionRequired: false,
                            priority: 'normal'
                        }
                    );
                    return;
                }
                
                // Fallback to GitHub URL if available
                if (contract.githubUrl) {
                    console.log('📤 Attempting to download from GitHub URL:', contract.githubUrl);
                    const link = document.createElement('a');
                    link.href = contract.githubUrl;
                    link.download = contract.fileName;
                    link.target = '_blank';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    console.log('📄 Downloaded contract from GitHub:', contract.fileName);
                    
                    // Add notification to sophisticated notification system
                    await addNotification(
                        'Contract Downloaded Successfully',
                        `Contract "${contract.fileName}" was downloaded from GitHub.`,
                        'contract_downloaded',
                        {
                            contractId: contract.contractId,
                            fileName: contract.fileName,
                            freelancerName: contract.freelancerName,
                            actionRequired: false,
                            priority: 'normal'
                        }
                    );
                    return;
                }
                
                // Fallback to local file data if available
                if (contract.fileData) {
                    console.log('📤 Downloading from local data');
                    const link = document.createElement('a');
                    link.href = contract.fileData;
                    link.download = contract.fileName;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    console.log('📄 Downloaded contract from local data:', contract.fileName);
                    
                    // Add notification to sophisticated notification system
                    await addNotification(
                        'Contract Downloaded Successfully',
                        `Contract "${contract.fileName}" was downloaded from local data.`,
                        'contract_downloaded',
                        {
                            contractId: contract.contractId,
                            fileName: contract.fileName,
                            freelancerName: contract.freelancerName,
                            actionRequired: false,
                            priority: 'normal'
                        }
                    );
                    return;
                }
                
                showNotification('❌ Contract file not available. Please contact admin.', 'error');
                
            } catch (error) {
                console.error('❌ Error downloading contract:', error);
                showNotification('❌ Error downloading contract. Please try again or contact admin.', 'error');
            }
        }

        // View uploaded contract details
        function viewUploadedContractDetails(index) {
            const contract = uploadedContracts[index];
            
            // Create a proper modal instead of using notification
            const modal = document.createElement('div');
            modal.id = 'contractDetailsModal';
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0,0,0,0.8);
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: center;
            `;
            
            modal.innerHTML = `
                <div style="
                    background: #1a1a1a;
                    padding: 2rem;
                    border-radius: 12px;
                    max-width: 600px;
                    max-height: 80vh;
                    overflow-y: auto;
                    position: relative;
                    border: 1px solid #FFB200;
                ">
                    <button onclick="this.closest('#contractDetailsModal').remove()" 
                            style="
                                position: absolute;
                                top: 1rem;
                                right: 1rem;
                                background: #ef4444;
                                color: white;
                                border: none;
                                padding: 0.5rem;
                                border-radius: 50%;
                                cursor: pointer;
                                width: 30px;
                                height: 30px;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                font-size: 18px;
                                font-weight: bold;
                            ">×</button>
                    
                    <h3 style="color: #FFB200; margin-bottom: 1.5rem; text-align: center;">
🎬 COCHRAN FILMS - CONTRACT DETAILS
                    </h3>
                    
                    <div style="background: rgba(255,178,0,0.1); padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border: 1px solid rgba(255,178,0,0.3);">
                        <h4 style="color: #FFB200; margin-bottom: 0.5rem;">📋 Basic Information</h4>
                        <div style="color: rgba(255,255,255,0.9); font-size: 0.9rem; line-height: 1.6;">
                            <div><strong>Contract ID:</strong> ${contract.contractId}</div>
                            <div><strong>Freelancer:</strong> ${contract.freelancerName}</div>
                            <div><strong>Email:</strong> ${contract.freelancerEmail}</div>
                            <div><strong>Role:</strong> ${contract.role}</div>
                            <div><strong>Rate:</strong> ${contract.rate}</div>
                            <div><strong>Location:</strong> ${contract.location}</div>
                            <div><strong>Contract Date:</strong> ${contract.contractDate || 'Not specified'}</div>
                        </div>
                    </div>
                    
                    <div style="background: rgba(255,178,0,0.1); padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border: 1px solid rgba(255,178,0,0.3);">
                        <h4 style="color: #FFB200; margin-bottom: 0.5rem;">📁 File Information</h4>
                        <div style="color: rgba(255,255,255,0.9); font-size: 0.9rem; line-height: 1.6;">
                            <div><strong>File Name:</strong> ${contract.fileName}</div>
                            <div><strong>File Size:</strong> ${(contract.fileSize / 1024).toFixed(1)} KB</div>
                            <div><strong>Upload Date:</strong> ${new Date(contract.uploadDate).toLocaleString()}</div>
                            <div><strong>Status:</strong> ${contract.status}</div>
                        </div>
                    </div>
                    
                    ${contract.notes ? `
                    <div style="background: rgba(255,178,0,0.1); padding: 1rem; border-radius: 8px; border: 1px solid rgba(255,178,0,0.3);">
                        <h4 style="color: #FFB200; margin-bottom: 0.5rem;">📝 Notes</h4>
                        <div style="color: rgba(255,255,255,0.9); font-size: 0.9rem; line-height: 1.6;">
                            ${contract.notes}
                        </div>
                    </div>
                    ` : ''}
                </div>
            `;
            
            document.body.appendChild(modal);
        }

        // Update uploaded-contracts.json on GitHub
        async function updateUploadedContractsOnGitHub() {
            try {
                console.log('🔄 Updating uploaded-contracts.json on GitHub...');
                
                const uploadedContractsData = {
                    exportDate: new Date().toISOString(),
                    totalContracts: uploadedContracts.length,
                    contracts: [],
                    uploadedContracts: uploadedContracts,
                    lastUpdated: new Date().toISOString()
                };
                
                // First, get the current file SHA
                const getResponse = await fetch('/api/github/file/uploaded-contracts.json');
                let sha = null;
                
                if (getResponse.ok) {
                    const fileData = await getResponse.json();
                    sha = fileData.sha;
                    console.log('📄 Got current file SHA:', sha.substring(0, 7));
                } else if (getResponse.status === 404) {
                    console.log('📄 File does not exist, will create new file');
                } else {
                    console.warn('⚠️ Could not get current file SHA, proceeding without it');
                }
                
                const updateBody = {
                    content: JSON.stringify(uploadedContractsData, null, 2),
                    message: `Update uploaded-contracts.json - Admin dashboard update - ${new Date().toLocaleString()}`
                };
                
                // Include SHA if we have it (for updates)
                if (sha) {
                    updateBody.sha = sha;
                }
                
                const response = await fetch('/api/github/file/uploaded-contracts.json', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updateBody)
                });
                
                if (response.ok) {
                    console.log('✅ uploaded-contracts.json updated on GitHub successfully');
                    return true;
                } else {
                    const errorData = await response.json().catch(() => ({}));
                    console.error('❌ Failed to update uploaded-contracts.json on GitHub:', response.status, errorData);
                    return false;
                }
                
            } catch (error) {
                console.error('❌ Error updating uploaded-contracts.json on GitHub:', error);
                return false;
            }
        }

        // Delete uploaded contract
        async function deleteUploadedContract(index) {
            const contract = uploadedContracts[index];
            if (confirm(`Are you sure you want to delete the contract for ${contract.freelancerName}?\n\nContract ID: ${contract.contractId}\n\nThis will delete both the contract data AND the PDF file from GitHub.\n\nThis action cannot be undone.`)) {
                try {
                    // 1. Remove from local array
                    uploadedContracts.splice(index, 1);
                    
                    // 2. Update uploaded-contracts.json on GitHub
                    const gitHubUpdateSuccess = await updateUploadedContractsOnGitHub();
                    
                    // 3. Delete PDF file from GitHub (if freelancer name exists)
                    let pdfDeleted = false;
                    if (contract.freelancerName) {
                        try {
                            // Create safe filename from freelancer name (same as download function)
                            const safeFileName = contract.freelancerName.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, ' ').trim() + '.pdf';
                            
                            // First, get the file's SHA
                            const getResponse = await fetch('/api/github/file/contracts/' + safeFileName);
                            let sha = null;
                            
                            if (getResponse.ok) {
                                const fileData = await getResponse.json();
                                sha = fileData.sha;
                                console.log('📄 Got PDF file SHA:', sha.substring(0, 7));
                            } else if (getResponse.status === 404) {
                                console.log('📄 PDF file not found on GitHub (expected if file was never uploaded), skipping deletion');
                            } else {
                                console.warn('⚠️ Could not get PDF file SHA, skipping deletion');
                            }
                            
                            // If we have the SHA, proceed with deletion
                            if (sha) {
                                const deleteResponse = await fetch('/api/github/file/contracts/' + safeFileName, {
                                    method: 'DELETE',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        message: `Delete contract PDF: ${safeFileName} - ${contract.freelancerName}`,
                                        sha: sha
                                    })
                                });
                                
                                if (deleteResponse.ok) {
                                    console.log('✅ PDF file deleted from GitHub:', safeFileName);
                                    pdfDeleted = true;
                                } else {
                                    const errorData = await deleteResponse.json().catch(() => ({}));
                                    console.warn('⚠️ Could not delete PDF file from GitHub:', safeFileName, errorData);
                                }
                            }
                        } catch (pdfError) {
                            console.warn('⚠️ Error deleting PDF file:', pdfError);
                        }
                    }
                    
                    // 4. Update display
                    displayUploadedContracts();
                    updateContractAnalytics();
                    
                    // 5. Show appropriate success message
                    if (gitHubUpdateSuccess && pdfDeleted) {
                        showNotification(`✅ Contract for ${contract.freelancerName} deleted successfully! Removed from GitHub and PDF file deleted.`, 'success');
                    } else if (gitHubUpdateSuccess) {
                        showNotification(`✅ Contract for ${contract.freelancerName} deleted from data. PDF file may still exist on GitHub.`, 'success');
                    } else {
                        showNotification(`⚠️ Contract deleted locally but GitHub update failed. Check console for details.`, 'warning');
                    }
                    
                } catch (error) {
                    console.error('❌ Error deleting contract:', error);
                    showNotification(`❌ Error deleting contract: ${error.message}`, 'error');
                }
            }
        }

        // Export contract list
        function exportContractList() {
            if (uploadedContracts.length === 0) {
                showNotification('No contracts to export.', 'warning');
                return;
            }
            
            const exportData = {
                exportDate: new Date().toISOString(),
                totalContracts: uploadedContracts.length,
                contracts: uploadedContracts.map(contract => ({
                    ...contract,
                    fileData: undefined // Remove file data from export
                }))
            };
            
            const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `cochran-films-contracts-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
            
            console.log('📦 Contract list exported');
        }

        // Export uploaded contracts for user portal access
        function exportUploadedContractsForPortal() {
            if (uploadedContracts.length === 0) {
                showNotification('No uploaded contracts to export.', 'warning');
                return;
            }
            
            const exportData = {
                lastUpdated: new Date().toISOString(),
                totalContracts: uploadedContracts.length,
                uploadedContracts: uploadedContracts
            };
            
            const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `uploaded-contracts.json`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
            
            console.log('📦 Uploaded contracts exported for user portal');
            showNotification('✅ Uploaded contracts exported as uploaded-contracts.json\n\nUpload this file to your server so users can access their signed contracts!', 'success');
        }

        // Update contract analytics
        function updateContractAnalytics() {
            const analytics = {
                total: uploadedContracts.length,
                thisMonth: uploadedContracts.filter(c => {
                    const uploadDate = new Date(c.uploadDate);
                    const now = new Date();
                    return uploadDate.getMonth() === now.getMonth() && uploadDate.getFullYear() === now.getFullYear();
                }).length,
                roles: {},
                totalFileSize: uploadedContracts.reduce((sum, c) => sum + (c.fileSize || 0), 0)
            };
            
            // Count roles
            uploadedContracts.forEach(contract => {
                const role = contract.role || 'Unknown';
                analytics.roles[role] = (analytics.roles[role] || 0) + 1;
            });
            
            const container = document.getElementById('contractAnalytics');
            if (!container) {
                console.warn('⚠️ contractAnalytics container not found');
                return;
            }
            container.innerHTML = `
                <div style="background: rgba(255,178,0,0.1); padding: 1.5rem; border-radius: 12px; border: 1px solid rgba(255,178,0,0.3);">
                    <h4 style="color: #FFB200; margin-bottom: 0.5rem;">📊 Total Contracts</h4>
                    <div style="font-size: 2rem; font-weight: bold; color: #FFB200;">${analytics.total}</div>
                </div>
                
                <div style="background: rgba(34,197,94,0.1); padding: 1.5rem; border-radius: 12px; border: 1px solid rgba(34,197,94,0.3);">
                    <h4 style="color: #22c55e; margin-bottom: 0.5rem;">📅 This Month</h4>
                    <div style="font-size: 2rem; font-weight: bold; color: #22c55e;">${analytics.thisMonth}</div>
                </div>
                
                <div style="background: rgba(59,130,246,0.1); padding: 1.5rem; border-radius: 12px; border: 1px solid rgba(59,130,246,0.3);">
                    <h4 style="color: #3b82f6; margin-bottom: 0.5rem;">💾 Total Size</h4>
                    <div style="font-size: 1.5rem; font-weight: bold; color: #3b82f6;">${(analytics.totalFileSize / 1024 / 1024).toFixed(1)} MB</div>
                </div>
                
                <div style="background: rgba(168,85,247,0.1); padding: 1.5rem; border-radius: 12px; border: 1px solid rgba(168,85,247,0.3);">
                    <h4 style="color: #a855f7; margin-bottom: 0.5rem;">🎯 Top Role</h4>
                    <div style="font-size: 1.2rem; font-weight: bold; color: #a855f7;">
                        ${Object.keys(analytics.roles).length > 0 ? 
                            Object.entries(analytics.roles).sort((a, b) => b[1] - a[1])[0][0] : 
                            'No roles yet'
                        }
                    </div>
                </div>
            `;
        }

        // Update user contract status when contract is uploaded
        async function updateUserContractStatus(email, contractId, contractDate) {
            try {
                // Find and update the user in the users object
                const userName = Object.keys(users).find(name => 
                    users[name].profile?.email?.toLowerCase() === email.toLowerCase()
                );
                
                if (userName) {
                    users[userName].contract.contractStatus = 'uploaded';
                    users[userName].contract.contractId = contractId;
                    users[userName].contract.contractUploadedDate = contractDate;
                    users[userName].contract.contractSignedDate = contractDate; // Assume signed same day for now
                    
                    // Save updated users object
                    localStorage.setItem('users', JSON.stringify(users));
                    
                    console.log('✅ Updated user contract status:', users[userName]);
                    
                    // Refresh user list display
                    displayUsers();
                    
                    // Automatically update GitHub
                    await updateUsersOnGitHub();
                    
                    showNotification('✅ User contract status updated and users.json updated on GitHub!', 'success');
                } else {
                    console.warn('⚠️ User not found in local array for email:', email);
                    showNotification(`⚠️ Note: User ${email} not found in local database.\n\nConsider adding them to the user list first, then re-uploading the contract.`, 'warning');
                }
            } catch (error) {
                console.error('❌ Error updating user contract status:', error);
                showNotification(`❌ Error updating user contract status: ${error.message}`, 'error');
            }
        }

        // Rebuild uploaded contracts from local files
        async function rebuildUploadedContracts() {
            if (!confirm('This will scan the contracts directory and rebuild the uploaded-contracts.json file from local PDF files.\n\nThis is useful when the JSON file has been cleared but PDF files still exist.\n\nContinue?')) {
                return;
            }
            
            try {
                console.log('🔄 Rebuilding uploaded contracts from local files...');
                
                // Call the rebuild API
                const response = await fetch('/api/rebuild-contracts', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    const result = await response.json();
                    console.log('✅ Rebuild completed:', result);
                    
                    // Reload the contracts data
                    await loadUploadedContracts();
                    
                    showNotification(`✅ Rebuild completed! Found ${result.contractsFound} contracts and added ${result.contractsAdded} to the database.`, 'success');
                } else {
                    const error = await response.json();
                    console.error('❌ Rebuild failed:', error);
                    showNotification(`❌ Rebuild failed: ${error.error}`, 'error');
                }
            } catch (error) {
                console.error('❌ Error rebuilding contracts:', error);
                showNotification(`❌ Error rebuilding contracts: ${error.message}`, 'error');
            }
        }

        // ==================== JOBS MANAGEMENT FUNCTIONALITY ====================
        
        let editingJobIndex = -1;

        // Load jobs from jobs-data.json and localStorage
        async function loadJobs() {
            console.log('🔄 Loading jobs...');
            
            // First try to load from jobs API
            try {
                const response = await fetch('/api/jobs-data');
                if (response.ok) {
                    const data = await response.json();
                    jobs = data.jobs || [];
                    console.log('📖 Loaded', jobs.length, 'jobs from API');
                } else {
                    // Fallback to localStorage
                    jobs = JSON.parse(localStorage.getItem('jobs') || '[]');
                    console.log('📝 Loaded', jobs.length, 'jobs from localStorage');
                }
            } catch (error) {
                // Fallback to localStorage
                jobs = JSON.parse(localStorage.getItem('jobs') || '[]');
                console.log('📝 Loaded', jobs.length, 'jobs from localStorage (fallback)');
            }
            
            displayJobs();
            
            // Populate job form dropdowns
            await populateJobFormDropdowns();
            
            console.log('✅ Total jobs loaded:', jobs.length);
        }

        // Display jobs
        function displayJobs() {
            const container = document.getElementById('jobsList');
            
            if (jobs.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; color: rgba(255,255,255,0.6); padding: 2rem;">
                        <h3 style="color: rgba(255,255,255,0.8); margin-bottom: 1rem;">📋 No Jobs Created Yet</h3>
                        <p>Create your first job listing using the form above</p>
                    </div>
                `;
                return;
            }
            
            const jobsHTML = jobs.map((job, index) => `
                <div class="item-card">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                        <h3>${job.title}</h3>
                        <span style="background: ${job.status === 'Active' ? '#22c55e' : '#6b7280'}; color: white; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.8rem;">${job.status}</span>
                    </div>
                    
                    <div class="item-meta">
                        <span>📅 ${job.date || 'No date set'}</span>
                        <span>📍 ${job.location || 'No location'}</span>
                        <span>💰 ${job.rate || 'No rate listed'}</span>
                    </div>
                    
                    <div class="item-description">
                        ${job.description || 'No description provided'}
                    </div>
                    
                    <div class="actions">
                        <button class="btn btn-small" onclick="editJob(${index})">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="btn btn-small btn-danger" onclick="deleteJob(${index})">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            `).join('');
            
            container.innerHTML = jobsHTML;
        }

        // Job form submission
        document.addEventListener('DOMContentLoaded', function() {
            const jobForm = document.getElementById('jobForm');
            if (jobForm) {
                jobForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    saveJob();
                });
            }
        });

        // Save job
        async function saveJob() {
            const formData = new FormData(document.getElementById('jobForm'));
            const jobData = {
                title: formData.get('title'),
                date: formData.get('date'),
                location: formData.get('location'),
                pay: formData.get('pay'),
                description: formData.get('description'),
                status: formData.get('status')
            };

            if (!jobData.title.trim()) {
                showNotification('Job title is required', 'error');
                return;
            }

            if (editingJobIndex >= 0) {
                jobs[editingJobIndex] = jobData;
                editingJobIndex = -1;
            } else {
                jobs.push(jobData);
            }

            // Update localStorage with current jobs
            localStorage.setItem('jobs', JSON.stringify(jobs));
            
            // Automatically update GitHub with merged data
            await updateJobsOnGitHub();
            
            displayJobs();
            clearJobForm();
                            console.log('Job saved successfully and updated on GitHub!');
        }

        // Edit job
        function editJob(index) {
            const job = jobs[index];
            document.getElementById('jobTitle').value = job.title;
            document.getElementById('jobDate').value = job.date;
            document.getElementById('jobLocation').value = job.location;
                            // jobPay field removed - using only rate field
            document.getElementById('jobDescription').value = job.description;
            document.getElementById('jobStatus').value = job.status;
            editingJobIndex = index;
        }

        // Delete job
        async function deleteJob(index) {
            const job = jobs[index];
            if (confirm(`Are you sure you want to delete "${job.title}"?`)) {
                jobs.splice(index, 1);
                localStorage.setItem('jobs', JSON.stringify(jobs));
                
                // Update GitHub
                await updateJobsOnGitHub();
                
                displayJobs();
                console.log('Job deleted successfully and updated on GitHub!');
            }
        }

        // Clear job form
        function clearJobForm() {
            document.getElementById('jobForm').reset();
            document.getElementById('jobLocation').value = 'Atlanta Area';
            editingJobIndex = -1;
        }

        // Update jobs on GitHub
        async function updateJobsOnGitHub() {
            try {
                console.log('🔄 Updating jobs-data.json on GitHub...');
                
                const jobsData = {
                    jobs: jobs,
                    lastUpdated: new Date().toISOString().split('T')[0],
                    totalJobs: jobs.length
                };
                
                // First, get the current file SHA
                const getResponse = await fetch('/api/github/file/jobs-data.json');
                let sha = null;
                
                if (getResponse.ok) {
                    const fileData = await getResponse.json();
                    sha = fileData.sha;
                    console.log('📄 Got current file SHA:', sha.substring(0, 7));
                } else if (getResponse.status === 404) {
                    console.log('📄 File does not exist, will create new file');
                } else {
                    console.warn('⚠️ Could not get current file SHA, proceeding without it');
                }
                
                const updateBody = {
                    content: JSON.stringify(jobsData, null, 2),
                    message: `Update jobs-data.json - Admin dashboard update - ${new Date().toLocaleString()}`
                };
                
                // Include SHA if we have it (for updates)
                if (sha) {
                    updateBody.sha = sha;
                }
                
                const response = await fetch('/api/github/file/jobs-data.json', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updateBody)
                });
                
                if (response.ok) {
                    console.log('✅ jobs-data.json updated on GitHub successfully');
                    return true;
                } else {
                    const errorData = await response.json().catch(() => ({}));
                    console.error('❌ Failed to update jobs-data.json on GitHub:', response.status, errorData);
                    return false;
                }
                
            } catch (error) {
                console.error('❌ Error updating jobs on GitHub:', error);
                showNotification('⚠️ Jobs saved locally but GitHub update failed. Please try again.', 'warning');
                return false;
            }
        }

        // Populate job form dropdowns with values from dropdown-options.json
        async function populateJobFormDropdowns() {
            try {
                console.log('🔄 Loading dropdown options for job form...');
                
                // Load dropdown options from API
                const response = await fetch('/api/dropdown-options');
                if (response.ok) {
                    const dropdownOptions = await response.json();
                    
                    // Populate location dropdown
                    const locationSelect = document.getElementById('jobLocation');
                    if (locationSelect) {
                        const currentLocationValue = locationSelect.value; // Preserve current value
                        locationSelect.innerHTML = '<option value="">Select a location...</option>';
                        dropdownOptions.locations.forEach(location => {
                            const option = document.createElement('option');
                            option.value = location;
                            option.textContent = location;
                            locationSelect.appendChild(option);
                        });
                        // Restore current value if it exists in the new options
                        if (currentLocationValue && dropdownOptions.locations.includes(currentLocationValue)) {
                            locationSelect.value = currentLocationValue;
                        }
                    }
                    
                    // Populate pay rate dropdown
                    const paySelect = document.getElementById('jobPay');
                    if (paySelect) {
                        const currentPayValue = paySelect.value; // Preserve current value
                        paySelect.innerHTML = '<option value="">Select a rate...</option>';
                        dropdownOptions.rates.forEach(rate => {
                            const option = document.createElement('option');
                            option.value = rate;
                            option.textContent = rate;
                            paySelect.appendChild(option);
                        });
                        // Restore current value if it exists in the new options
                        if (currentPayValue && dropdownOptions.rates.includes(currentPayValue)) {
                            paySelect.value = currentPayValue;
                        }
                    }
                    
                    console.log('✅ Job form dropdowns populated with', dropdownOptions.locations.length, 'locations and', dropdownOptions.rates.length, 'rates');
                } else {
                    console.warn('⚠️ Could not load dropdown options, using defaults');
                    // Use default values if API fails
                    const defaultLocations = ['Atlanta, GA', 'Douglasville, GA', 'Sandy Springs, GA'];
                    const defaultRates = ['$50/hour', '$75/hour', '$100/hour', '$150/hour', '$200/hour', '$400', '$300 + Tip'];
                    
                    const locationSelect = document.getElementById('jobLocation');
                    if (locationSelect) {
                        const currentLocationValue = locationSelect.value; // Preserve current value
                        locationSelect.innerHTML = '<option value="">Select a location...</option>';
                        defaultLocations.forEach(location => {
                            const option = document.createElement('option');
                            option.value = location;
                            option.textContent = location;
                            locationSelect.appendChild(option);
                        });
                        // Restore current value if it exists in the new options
                        if (currentLocationValue && defaultLocations.includes(currentLocationValue)) {
                            locationSelect.value = currentLocationValue;
                        }
                    }
                    
                    const paySelect = document.getElementById('jobPay');
                    if (paySelect) {
                        const currentPayValue = paySelect.value; // Preserve current value
                        paySelect.innerHTML = '<option value="">Select a rate...</option>';
                        defaultRates.forEach(rate => {
                            const option = document.createElement('option');
                            option.value = rate;
                            option.textContent = rate;
                            paySelect.appendChild(option);
                        });
                        // Restore current value if it exists in the new options
                        if (currentPayValue && defaultRates.includes(currentPayValue)) {
                            paySelect.value = currentPayValue;
                        }
                    }
                }
            } catch (error) {
                console.error('❌ Error populating job form dropdowns:', error);
            }
        }



        // ==================== FREELANCER MANAGEMENT FUNCTIONALITY ====================
        
        let editingFreelancerIndex = -1;

        // Load users from users.json and localStorage
        async function loadUsers() {
            console.log('🔄 Loading users...');
            
            // First, try to load from users API
            try {
                const response = await fetch('/api/users');
                if (response.ok) {
                    const jsonData = await response.json();
                    users = jsonData.users || {};
                    
                    console.log('📖 Loaded', Object.keys(users).length, 'users from API');
                    
                    // Update localStorage to sync with GitHub data
                    localStorage.setItem('users', JSON.stringify(users));
                    
                } else {
                    console.warn('⚠️ Could not load users.json, trying localStorage');
                    users = JSON.parse(localStorage.getItem('users') || '{}');
                    console.log('📝 Loaded', Object.keys(users).length, 'users from localStorage');
                }
            } catch (error) {
                console.warn('⚠️ Error loading users.json:', error);
                users = JSON.parse(localStorage.getItem('users') || '{}');
                console.log('📝 Loaded', Object.keys(users).length, 'users from localStorage (fallback)');
            }
            
            displayUsers();
            console.log('✅ Total users loaded:', Object.keys(users).length);
            
            // Load and populate dropdown options
            await loadDropdownOptions();
            
            // Populate user dropdowns
            populateUserDropdowns();
            
            // Show payment method summary
            displayPaymentMethodSummary();
            
            // Check for performance review alerts
            checkPerformanceReviewAlerts();
            
            // Update existing users with missing job data
            await updateExistingUsersWithJobData();
            
            // Show status in the interface
            const statusElement = document.getElementById('freelancerStatus');
            if (statusElement) {
                statusElement.textContent = `Loaded ${Object.keys(users).length} users from ${Object.keys(users).length > 0 ? 'users.json' : 'localStorage'}`;
            }
        }
        


        // Populate user dropdowns
        function populateUserDropdowns() {
            // Populate contract upload user dropdown
            const uploadUserSelect = document.getElementById('uploadFreelancerName');
            if (uploadUserSelect) {
                uploadUserSelect.innerHTML = '<option value="">Select a user...</option>';
                Object.keys(users).forEach(userName => {
                            const option = document.createElement('option');
                    option.value = userName;
                    option.textContent = userName;
                    uploadUserSelect.appendChild(option);
                });
            }
            
            // Populate job assignment user dropdown
            const jobAssignmentSelect = document.getElementById('jobAssignmentFreelancer');
            if (jobAssignmentSelect) {
                jobAssignmentSelect.innerHTML = '<option value="">Choose a user...</option>';
                Object.keys(users).forEach(userName => {
                            const option = document.createElement('option');
                    option.value = userName;
                    option.textContent = userName;
                    jobAssignmentSelect.appendChild(option);
                });
            }
            
            console.log('👥 Populated user dropdowns with', Object.keys(users).length, 'options');
        }

        // Load dropdown options from API or use defaults
        async function loadDropdownOptions() {
            try {
                console.log('🔄 Loading dropdown options...');
                
                // Add timeout to prevent hanging
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout
                
                const response = await fetch('/api/dropdown-options', {
                    signal: controller.signal
                });
                
                clearTimeout(timeoutId);
                
                if (response.ok) {
                    window.dropdownOptions = await response.json();
                    console.log('📋 Loaded dropdown options from API:', window.dropdownOptions);
                } else {
                    console.warn(`⚠️ API returned status ${response.status}, using defaults`);
                    // Initialize with default options if API fails
                    window.dropdownOptions = {
                        roles: ['Backdrop Photographer', 'Editor', 'Videographer', 'Photographer', 'Full Stack Designer', 'Video Editor', 'Corporate Videographer'],
                        locations: ['6695 Church Street, Douglasville, GA 30134', 'Sandy Springs, GA', 'Douglasville, GA', 'Atlanta, GA', 'Atlanta Area'],
                        rates: ['$400.00 USD (Flat)', '$450.00 USD (Flat)', '$500.00 USD (Flat)', '$750.00 USD (Flat)', '$900.00 USD (Flat)', '$150/day', '$200/day'],
                        projectTypes: ['Photography', 'Video', 'Editor Project', 'Corporate Video', 'Event Coverage', 'Product Photography', 'Real Estate', 'Wedding', 'Commercial'],
                        paymentMethods: ['Cash', 'Check', 'Zelle', 'PayPal', 'Invoice Request'],
                        projectStatuses: ['upcoming', 'in-progress', 'completed', 'cancelled'],
                        paymentStatuses: ['pending', 'processing', 'paid', 'overdue']
                    };
                    console.log('📋 Initialized default dropdown options (API failed):', window.dropdownOptions);
                }
            } catch (error) {
                if (error.name === 'AbortError') {
                    console.warn('⚠️ Dropdown options request timed out, using defaults');
                } else {
                    console.error('❌ Error loading dropdown options from API:', error);
                }
                
                // Initialize with default options
                window.dropdownOptions = {
                    roles: ['Backdrop Photographer', 'Editor', 'Videographer', 'Douglasville, GA', 'Atlanta, GA', 'Atlanta Area'],
                    locations: ['6695 Church Street, Douglasville, GA 30134', 'Sandy Springs, GA', 'Douglasville, GA', 'Atlanta, GA', 'Atlanta Area'],
                    rates: ['$400.00 USD (Flat)', '$450.00 USD (Flat)', '$500.00 USD (Flat)', '$750.00 USD (Flat)', '$900.00 USD (Flat)', '$150/day', '$200/day'],
                    projectTypes: ['Photography', 'Video', 'Editor Project', 'Corporate Video', 'Event Coverage', 'Product Photography', 'Real Estate', 'Wedding', 'Commercial'],
                    paymentMethods: ['Cash', 'Check', 'Zelle', 'PayPal', 'Invoice Request'],
                    projectStatuses: ['upcoming', 'in-progress', 'completed', 'cancelled'],
                    paymentStatuses: ['pending', 'processing', 'paid', 'overdue']
                };
                console.log('📋 Initialized default dropdown options (error):', window.dropdownOptions);
            }
            
            // Populate the management interface
            populateDropdownManagementInterface();
            
            // Populate job assignment dropdowns
            populateJobAssignmentDropdowns();
        }
        
        // Populate dropdown options from JSON data (legacy function)
        function populateDropdownOptions() {
            // Get unique roles from freelancers.json
            const roles = new Set();
            freelancers.forEach(freelancer => {
                if (freelancer.role) roles.add(freelancer.role);
            });
            
            // Get unique locations from freelancers.json
            const locations = new Set();
            freelancers.forEach(freelancer => {
                if (freelancer.location) locations.add(freelancer.location);
            });
            
            // Get unique rates from freelancers.json
            const rates = new Set();
            freelancers.forEach(freelancer => {
                if (freelancer.rate) rates.add(freelancer.rate);
            });
            
            // Get job titles from jobs-data.json
            const jobTitles = jobs.map(job => job.title);
            
            // Get project types from jobs-data.json (extract from descriptions)
            const projectTypes = new Set();
            jobs.forEach(job => {
                if (job.description) {
                    // Extract project type from job description or title
                    const type = job.title.includes('Photographer') ? 'Photography' :
                               job.title.includes('Editor') ? 'Editor Project' :
                               job.title.includes('Videographer') ? 'Video' :
                               'General';
                    projectTypes.add(type);
                }
            });
            
            // Merge with existing options
            if (window.dropdownOptions) {
                window.dropdownOptions.roles = [...new Set([...window.dropdownOptions.roles, ...Array.from(roles)])];
                window.dropdownOptions.locations = [...new Set([...window.dropdownOptions.locations, ...Array.from(locations)])];
                window.dropdownOptions.rates = [...new Set([...window.dropdownOptions.rates, ...Array.from(rates)])];
                window.dropdownOptions.projectTypes = [...new Set([...window.dropdownOptions.projectTypes, ...Array.from(projectTypes)])];
            } else {
                window.dropdownOptions = {
                    roles: Array.from(roles),
                    locations: Array.from(locations),
                    rates: Array.from(rates),
                    jobTitles: jobTitles,
                    projectTypes: Array.from(projectTypes),
                    paymentMethods: ['Cash', 'Check', 'Zelle', 'PayPal', 'Invoice Request'],
                    projectStatuses: ['upcoming', 'in-progress', 'completed', 'cancelled'],
                    paymentStatuses: ['pending', 'processing', 'paid', 'overdue']
                };
            }
            
            console.log('📋 Populated dropdown options:', window.dropdownOptions);
        }

        // Add dropdown option
        function addDropdownOption(category, inputId) {
            const input = document.getElementById(inputId);
            const value = input.value.trim();
            
            if (!value) {
                showNotification('Please enter a value to add.', 'error');
                return;
            }
            
            if (!window.dropdownOptions[category]) {
                window.dropdownOptions[category] = [];
            }
            
            if (window.dropdownOptions[category].includes(value)) {
                showNotification('This option already exists.', 'warning');
                return;
            }
            
            window.dropdownOptions[category].push(value);
            input.value = '';
            
            // Update the management interface
            populateDropdownManagementInterface();
            
            // Update job assignment dropdowns
            populateJobAssignmentDropdowns();
            
            console.log(`✅ Added ${value} to ${category}`);
        }
        
        // Remove dropdown option
        function removeDropdownOption(category, value) {
            if (window.dropdownOptions[category]) {
                window.dropdownOptions[category] = window.dropdownOptions[category].filter(item => item !== value);
                populateDropdownManagementInterface();
                populateJobAssignmentDropdowns();
                console.log(`✅ Removed ${value} from ${category}`);
            }
        }
        
        // Populate dropdown management interface
        function populateDropdownManagementInterface() {
            const categories = ['roles', 'locations', 'rates', 'projectTypes'];
            
            categories.forEach(category => {
                const container = document.getElementById(`${category}List`);
                if (container && window.dropdownOptions[category]) {
                    container.innerHTML = window.dropdownOptions[category].map(item => `
                        <div style="display: flex; justify-content: space-between; align-items: center; background: rgba(255,255,255,0.1); padding: 0.5rem; border-radius: 4px; margin-bottom: 0.25rem;">
                            <span style="color: rgba(255,255,255,0.9); font-size: 0.9rem;">${item}</span>
                            <button onclick="removeDropdownOption('${category}', '${item}')" style="background: #ef4444; color: white; border: none; padding: 0.25rem 0.5rem; border-radius: 4px; font-size: 0.8rem; cursor: pointer;">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    `).join('');
                }
            });
        }
        
        // Populate all dropdowns from dropdown options
        function populateJobAssignmentDropdowns() {
            if (!window.dropdownOptions) return;
            
            // Populate role dropdowns
            const roleSelects = ['jobRole', 'freelancerRole'];
            roleSelects.forEach(selectId => {
                const roleSelect = document.getElementById(selectId);
                if (roleSelect) {
                    const currentValue = roleSelect.value; // Preserve current value
                    roleSelect.innerHTML = '<option value="">Select a role...</option>';
                    window.dropdownOptions.roles.forEach(role => {
                        const option = document.createElement('option');
                        option.value = role;
                        option.textContent = role;
                        roleSelect.appendChild(option);
                    });
                    // Restore current value if it exists in the new options
                    if (currentValue && window.dropdownOptions.roles.includes(currentValue)) {
                        roleSelect.value = currentValue;
                    }
                }
            });
            
            // Populate location dropdowns
            const locationSelects = ['assignmentJobLocation', 'freelancerLocation', 'jobLocation'];
            locationSelects.forEach(selectId => {
                const locationSelect = document.getElementById(selectId);
                    if (locationSelect) {
                        const currentValue = locationSelect.value; // Preserve current value
                        locationSelect.innerHTML = '<option value="">Select a location...</option>';
                    window.dropdownOptions.locations.forEach(location => {
                            const option = document.createElement('option');
                            option.value = location;
                            option.textContent = location;
                            locationSelect.appendChild(option);
                        });
                        // Restore current value if it exists in the new options
                        if (currentValue && window.dropdownOptions.locations.includes(currentValue)) {
                            locationSelect.value = currentValue;
                        }
                    }
            });
            
            // Populate rate dropdowns
            const rateSelects = ['assignmentJobRate', 'freelancerRate'];
            rateSelects.forEach(selectId => {
                const rateSelect = document.getElementById(selectId);
                if (rateSelect) {
                    const currentValue = rateSelect.value; // Preserve current value
                    rateSelect.innerHTML = '<option value="">Select a rate...</option>';
                    window.dropdownOptions.rates.forEach(rate => {
                            const option = document.createElement('option');
                            option.value = rate;
                            option.textContent = rate;
                        rateSelect.appendChild(option);
                    });
                    // Restore current value if it exists in the new options
                    if (currentValue && window.dropdownOptions.rates.includes(currentValue)) {
                        rateSelect.value = currentValue;
                    }
                }
            });
            
            // Populate project type dropdown
            const projectTypeSelect = document.getElementById('assignmentJobProjectType');
            if (projectTypeSelect) {
                const currentValue = projectTypeSelect.value; // Preserve current value
                projectTypeSelect.innerHTML = '<option value="">Select a project type...</option>';
                window.dropdownOptions.projectTypes.forEach(type => {
                    const option = document.createElement('option');
                    option.value = type;
                    option.textContent = type;
                    projectTypeSelect.appendChild(option);
                });
                // Restore current value if it exists in the new options
                if (currentValue && window.dropdownOptions.projectTypes.includes(currentValue)) {
                    projectTypeSelect.value = currentValue;
                }
            }
        }
        
        // Save dropdown options to GitHub API
        async function saveDropdownOptions() {
            if (!window.dropdownOptions) {
                showNotification('❌ No dropdown options to save.', 'error');
                return;
            }
            
            try {
                console.log('🔄 Saving dropdown options to GitHub via server...');
                
                // Get current SHA for the file
                const shaResponse = await fetch('/api/github/info');
                if (!shaResponse.ok) {
                    throw new Error('Failed to get GitHub info');
                }
                
                const shaData = await shaResponse.json();
                const currentSha = shaData.sha;
                
                console.log('🔍 Retrieved current SHA:', currentSha);
                
                // Update the file on GitHub
                const updateResponse = await fetch('/api/github/file/dropdown-options.json', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: 'Update dropdown options via admin dashboard',
                        content: btoa(JSON.stringify(window.dropdownOptions, null, 2)),
                        sha: currentSha
                    })
                });
                
                if (updateResponse.ok) {
                    console.log('✅ Successfully saved dropdown options to GitHub');
                    console.log('✅ Dropdown options saved successfully to GitHub!');
                } else {
                    const errorData = await updateResponse.json();
                    throw new Error(`GitHub API error: ${errorData.error || 'Unknown error'}`);
                }
            } catch (error) {
                console.error('❌ Error saving dropdown options:', error);
                showNotification(`❌ Failed to save dropdown options: ${error.message}`, 'error');
            }
        }
        
        // Display payment method summary
        function displayPaymentMethodSummary() {
            const paymentMethods = {};
            let totalUsers = 0;
            let usersWithPaymentMethod = 0;
            
            Object.values(users).forEach(userData => {
                totalUsers++;
                if (userData.paymentMethod) {
                    usersWithPaymentMethod++;
                    paymentMethods[userData.paymentMethod] = (paymentMethods[userData.paymentMethod] || 0) + 1;
                }
            });
            
            // Create summary HTML
            const summaryHTML = `
                <div style="background: rgba(255,178,0,0.1); padding: 1.5rem; border-radius: 12px; margin: 1rem 0; border: 1px solid rgba(255,178,0,0.3);">
                    <h3 style="color: #FFB200; margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem;">
                        <i class="fas fa-credit-card"></i> Payment Method Summary
                    </h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-bottom: 1rem;">
                        <div style="background: rgba(0,0,0,0.3); padding: 1rem; border-radius: 8px;">
                            <div style="font-size: 2rem; font-weight: bold; color: #FFB200;">${usersWithPaymentMethod}</div>
                            <div style="font-size: 0.9rem; color: rgba(255,255,255,0.8);">Users with Payment Method</div>
                        </div>
                        <div style="background: rgba(0,0,0,0.3); padding: 1rem; border-radius: 8px;">
                            <div style="font-size: 2rem; font-weight: bold; color: #ff6b6b;">${totalUsers - usersWithPaymentMethod}</div>
                            <div style="font-size: 0.9rem; color: rgba(255,255,255,0.8);">Users Pending Selection</div>
                        </div>
                    </div>
                    ${Object.keys(paymentMethods).length > 0 ? `
                        <div style="margin-top: 1rem;">
                            <h4 style="color: #FFB200; margin-bottom: 0.5rem;">Payment Method Breakdown:</h4>
                            <div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">
                                ${Object.entries(paymentMethods).map(([method, count]) => `
                                    <span style="background: rgba(255,178,0,0.3); color: #FFB200; padding: 0.3rem 0.8rem; border-radius: 6px; font-weight: bold; font-size: 0.9rem;">
                                        ${method.toUpperCase()}: ${count}
                                    </span>
                                `).join('')}
                            </div>
                        </div>
                    ` : ''}
                </div>
            `;
            
            // Insert summary at the top of the freelancers list
            const container = document.getElementById('contractsList');
            if (container && container.children.length > 0) {
                container.insertAdjacentHTML('afterbegin', summaryHTML);
            }
        }

        // Check for performance review alerts
        function checkPerformanceReviewAlerts() {
            const pendingReviews = Object.values(users).filter(userData => shouldShowPerformanceReview(userData));
            
            if (pendingReviews.length > 0) {
                const alertContainer = document.createElement('div');
                alertContainer.id = 'performanceReviewAlert';
                alertContainer.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: linear-gradient(135deg, #f59e0b, #d97706);
                    color: white;
                    padding: 1rem 1.5rem;
                    border-radius: 12px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                    z-index: 1000;
                    max-width: 300px;
                    border: 1px solid rgba(255,255,255,0.2);
                `;
                
                alertContainer.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 0.5rem;">
                        <h4 style="margin: 0; color: white;"><i class="fas fa-star"></i> Performance Reviews Due</h4>
                        <button onclick="this.parentElement.parentElement.remove()" 
                                style="background: none; border: none; color: white; font-size: 1.2rem; cursor: pointer;">×</button>
                    </div>
                    <p style="margin: 0; font-size: 0.9rem; opacity: 0.9;">
                        ${pendingReviews.length} user${pendingReviews.length > 1 ? 's' : ''} need${pendingReviews.length > 1 ? '' : 's'} performance review.
                    </p>
                    <div style="margin-top: 0.5rem;">
                        <button onclick="showPerformanceReviewList()" 
                                style="background: rgba(255,255,255,0.2); color: white; border: none; padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; font-size: 0.8rem;">
                            View All
                        </button>
                    </div>
                `;
                
                document.body.appendChild(alertContainer);
                
                // Auto-remove after 10 seconds
                setTimeout(() => {
                    const alert = document.getElementById('performanceReviewAlert');
                    if (alert) alert.remove();
                }, 10000);
            }
        }

        // Show performance review list
        function showPerformanceReviewList() {
            const pendingReviews = Object.values(users).filter(userData => shouldShowPerformanceReview(userData));
            
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.8);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 1000;
            `;
            
            modal.innerHTML = `
                <div style="background: #1a1a1a; padding: 2rem; border-radius: 16px; max-width: 600px; width: 90%; max-height: 80vh; overflow-y: auto; border: 1px solid rgba(255,178,0,0.3);">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
                        <h2 style="color: #FFB200; margin: 0;"><i class="fas fa-star"></i> Performance Reviews Due</h2>
                        <button onclick="closeModal(this)" 
                                style="background: none; border: none; color: #FFB200; font-size: 1.5rem; cursor: pointer;">×</button>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <p style="color: rgba(255,255,255,0.8); margin-bottom: 1rem;">
                            The following users have completed paid projects and need performance reviews:
                        </p>
                        ${pendingReviews.map(userData => `
                            <div style="background: rgba(255,178,0,0.1); padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border: 1px solid rgba(255,178,0,0.3);">
                                <div style="display: flex; justify-content: space-between; align-items: center;">
                                    <div>
                                        <h4 style="color: #FFB200; margin: 0 0 0.5rem 0;">${Object.keys(users).find(key => users[key] === userData)}</h4>
                                        <p style="color: rgba(255,255,255,0.8); margin: 0; font-size: 0.9rem;">${userData.profile?.email || 'No email'}</p>
                                    </div>
                                    <button onclick="showPerformanceReviewModal('${Object.keys(users).find(key => users[key] === userData)}'); closeModal(this);" 
                                            style="background: #FFB200; color: #000; border: none; padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; font-weight: 600;">
                                        Review Now
                                    </button>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                    
                    <div style="text-align: center; margin-top: 1.5rem; padding-top: 1.5rem; border-top: 1px solid rgba(255,178,0,0.2);">
                        <p style="color: rgba(255,255,255,0.7); font-size: 0.9rem;">
                            <i class="fas fa-info-circle"></i> Performance reviews help improve collaboration and future opportunities.
                        </p>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
        }

        // Get performance review status badge
        function getPerformanceReviewStatus(userData) {
            // Try multiple ways to get the email
            const userEmail = userData.profile?.email || userData.email || userData.profile?.userEmail;
            const userName = userData.profile?.name || userData.name || 'Unknown User';
            console.log('🔍 Checking performance review for user:', userName, 'Email:', userEmail);
            console.log('🔍 Available performance reviews:', Object.keys(performanceReviews));
            
            const existingReview = performanceReviews[userEmail];
            
            if (existingReview) {
                return `<span style="background: #22c55e; color: white; padding: 0.3rem 0.8rem; border-radius: 6px; font-weight: bold; font-size: 0.9rem;">COMPLETED</span>`;
            } else {
                return `<span style="background: rgba(255,255,255,0.2); color: rgba(255,255,255,0.7); padding: 0.3rem 0.8rem; border-radius: 6px; font-weight: bold; font-size: 0.9rem;">NO REVIEW</span>`;
            }
        }

        // Get performance review summary
        function getPerformanceReviewSummary(userData) {
            // Try multiple ways to get the email
            const userEmail = userData.profile?.email || userData.email || userData.profile?.userEmail;
            const existingReview = performanceReviews[userEmail];
            
            if (existingReview) {
                const reviewDate = existingReview.reviewDate ? new Date(existingReview.reviewDate).toLocaleDateString() : 'N/A';
                const overallRating = existingReview.overallRating || 'N/A';
                const comments = existingReview.comments ? existingReview.comments.substring(0, 100) + (existingReview.comments.length > 100 ? '...' : '') : 'No comments';
                
                return `
                    <div style="margin-bottom: 0.5rem;">
                        <strong>Date:</strong> ${reviewDate} | <strong>Rating:</strong> ${overallRating}/5
                    </div>
                    <div style="font-style: italic; color: rgba(255,255,255,0.7);">
                        "${comments}"
                    </div>
                `;
            } else {
                // Check if they have completed paid projects
                const hasCompletedProjects = userData.jobs && 
                    Object.values(userData.jobs || {}).some(job => 
                        job.projectStatus === 'completed' && job.paymentStatus === 'paid'
                    );
                
                if (hasCompletedProjects) {
                    return `<span style="color: #f59e0b; font-weight: bold;">⚠️ Performance review needed - completed paid projects</span>`;
                } else {
                    return `<span style="color: rgba(255,255,255,0.6);">No completed paid projects yet</span>`;
                }
            }
        }

        // Get performance review button
        function getPerformanceReviewButton(userData) {
            // Try multiple ways to get the email - handle both data structures
            const userEmail = userData.profile?.email || userData.email || userData.profile?.userEmail;
            const existingReview = performanceReviews[userEmail];
            
            // Debug logging
            console.log('🔍 Performance review button - User data:', userData);
            console.log('🔍 Performance review button - User email:', userEmail);
            console.log('🔍 Performance review button - Available reviews:', Object.keys(performanceReviews));
            
            // Get the user name properly
            const userName = userData.profile?.name || 'Unknown';
            
            if (existingReview) {
                return `
                    <div style="margin-top: 0.5rem;">
                        <button onclick="showPerformanceReviewModal('${userEmail}')" 
                                style="background: #FFB200; color: #000; border: none; padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; font-weight: 600; font-size: 0.8rem;">
                            <i class="fas fa-edit"></i> Edit Review
                        </button>
                        <button onclick="viewPerformanceReviewDetails('${userEmail}')" 
                                style="background: rgba(255,255,255,0.1); color: white; border: 1px solid rgba(255,255,255,0.3); padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; font-size: 0.8rem; margin-left: 0.5rem;">
                            <i class="fas fa-eye"></i> View Details
                        </button>
                    </div>
                `;
            } else {
                // Check if they have completed paid projects
                const hasCompletedProjects = userData.jobs && 
                    Object.values(userData.jobs || {}).some(job => 
                        job.projectStatus === 'completed' && job.paymentStatus === 'paid'
                    );
                
                if (hasCompletedProjects) {
                    return `
                        <div style="margin-top: 0.5rem;">
                            <button onclick="showPerformanceReviewModal('${userEmail}')" 
                                    style="background: #f59e0b; color: white; border: none; padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; font-weight: 600; font-size: 0.8rem;">
                                <i class="fas fa-star"></i> Create Review
                            </button>
                        </div>
                    `;
                } else {
                    return `
                        <div style="margin-top: 0.5rem;">
                            <span style="color: rgba(255,255,255,0.5); font-size: 0.8rem; font-style: italic;">
                                Review available after project completion and payment
                            </span>
                        </div>
                    `;
                }
            }
        }

        // View performance review details (works with both username and email)
        function viewPerformanceReviewDetails(userNameOrEmail) {
            let userData = users[userNameOrEmail];
            let userEmail = userNameOrEmail;
            let userName = userNameOrEmail;
            
            // If not found by username, try to find by email
            if (!userData) {
                // Search for user by email
                for (const [name, data] of Object.entries(users)) {
                    if (data.profile?.email === userNameOrEmail) {
                        userData = data;
                        userName = name;
                        break;
                    }
                }
            } else {
                // If found by username, get the email
                userEmail = userData.profile?.email || userNameOrEmail;
            }
            
            // If still no user data, try to get review directly by email
            const existingReview = userData ? performanceReviews[userData.profile?.email] : performanceReviews[userNameOrEmail];
            
            if (!existingReview) {
                showNotification('No performance review found', 'warning');
                return;
            }

            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.8);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 1000;
            `;
            
            const reviewDate = existingReview.reviewDate ? new Date(existingReview.reviewDate).toLocaleDateString() : 'N/A';
            const overallRating = existingReview.overallRating || 'N/A';
            
            modal.innerHTML = `
                <div style="background: #1a1a1a; padding: 2rem; border-radius: 16px; max-width: 600px; width: 90%; max-height: 80vh; overflow-y: auto; border: 1px solid rgba(255,178,0,0.3);">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
                        <h2 style="color: #FFB200; margin: 0;"><i class="fas fa-star"></i> Performance Review Details</h2>
                        <button onclick="this.closest('div[style*=\"position: fixed\"]').remove()" 
                                style="background: none; border: none; color: #FFB200; font-size: 1.5rem; cursor: pointer;">×</button>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="background: rgba(255,178,0,0.1); padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border: 1px solid rgba(255,178,0,0.3);">
                            <h4 style="color: #FFB200; margin-bottom: 0.5rem;">Review Information</h4>
                            <div style="color: rgba(255,255,255,0.9);">
                                <div><strong>Freelancer:</strong> ${userName}</div>
                                <div><strong>Email:</strong> ${userData.profile?.email || 'N/A'}</div>
                                <div><strong>Review Date:</strong> ${reviewDate}</div>
                                <div><strong>Overall Rating:</strong> ${overallRating}/5</div>
                                <div><strong>Status:</strong> ${existingReview.status || 'completed'}</div>
                                <div><strong>Reviewed By:</strong> ${existingReview.reviewedBy || 'admin'}</div>
                            </div>
                        </div>
                        
                        ${existingReview.comments ? `
                        <div style="background: rgba(0,0,0,0.3); padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">
                            <h4 style="color: #FFB200; margin-bottom: 0.5rem;">Comments</h4>
                            <p style="color: rgba(255,255,255,0.9); line-height: 1.6;">${existingReview.comments}</p>
                        </div>
                        ` : ''}
                        
                        ${existingReview.adminNotes ? `
                        <div style="background: rgba(255,0,0,0.1); padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border: 1px solid rgba(255,0,0,0.3);">
                            <h4 style="color: #ff6b6b; margin-bottom: 0.5rem;">Admin Notes (Internal)</h4>
                            <p style="color: rgba(255,255,255,0.9); line-height: 1.6;">${existingReview.adminNotes}</p>
                        </div>
                        ` : ''}
                        
                        ${existingReview.categories ? `
                        <div style="background: rgba(0,0,0,0.3); padding: 1rem; border-radius: 8px;">
                            <h4 style="color: #FFB200; margin-bottom: 0.5rem;">Category Ratings</h4>
                            ${Object.entries(existingReview.categories).map(([category, rating]) => `
                                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                                    <span style="color: rgba(255,255,255,0.9);">${category}:</span>
                                    <span style="color: #FFB200; font-weight: bold;">${rating}/5</span>
                                </div>
                            `).join('')}
                        </div>
                        ` : ''}
                    </div>
                    
                    <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                        <button onclick="showPerformanceReviewModal('${userName}'); this.closest('div[style*=\"position: fixed\"]').remove();" 
                                style="background: #FFB200; color: #000; border: none; padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer; font-weight: 600;">
                            <i class="fas fa-edit"></i> Edit Review
                        </button>
                        <button onclick="this.closest('div[style*=\"position: fixed\"]').remove()" 
                                style="background: rgba(255,255,255,0.1); color: white; border: 1px solid rgba(255,255,255,0.3); padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer;">
                            Close
                        </button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
        }
        
        // ==================== PDF GENERATION FUNCTIONS ====================
        
        // Generate professional PDF contract content - from contract.html
        function generateContractPDF(contractData) {
            try {
                console.log('📄 Starting PDF generation for contract:', contractData.contractId);
                
                const { jsPDF } = window.jspdf;
                if (!jsPDF) {
                    throw new Error('jsPDF library not loaded');
                }
                
                const doc = new jsPDF();
                
                // ==================== HEADER ====================
                
                // Professional header with gold background
                doc.setFillColor(255, 178, 0);
                doc.rect(0, 0, 210, 25, 'F');
                
                // Company name and title in header
                doc.setFontSize(20);
                doc.setTextColor(0, 0, 0);
                doc.setFont('helvetica', 'bold');
                doc.text('COCHRAN FILMS', 105, 12, { align: 'center' });
                
                doc.setFontSize(14);
                doc.setFont('helvetica', 'normal');
                doc.text('FREELANCE CONTRACT AGREEMENT', 105, 20, { align: 'center' });
                
                // ==================== CONTRACT METADATA ====================
                
                doc.setFontSize(9);
                doc.setTextColor(100, 100, 100);
                doc.setFont('helvetica', 'normal');
                doc.text(`Contract ID: ${contractData.contractId}`, 20, 35);
                doc.text(`Effective Date: ${contractData.effectiveDate}`, 20, 40);
                
                // ==================== CONTRACTOR INFORMATION ====================
                
                // Professional section header with background
                doc.setFillColor(255, 178, 0);
                doc.rect(20, 50, 170, 8, 'F');
                doc.setFontSize(10);
                doc.setTextColor(0, 0, 0);
                doc.setFont('helvetica', 'bold');
                doc.text('CONTRACTOR INFORMATION', 105, 56, { align: 'center' });
                
                // Two separate info boxes for better organization
                // Left box - Contractor Info
                doc.setFillColor(248, 249, 250);
                doc.rect(20, 65, 80, 25, 'F');
                doc.setDrawColor(255, 178, 0);
                doc.setLineWidth(0.5);
                doc.rect(20, 65, 80, 25, 'S');
                
                doc.setFontSize(8);
                doc.setTextColor(0, 0, 0);
                doc.setFont('helvetica', 'bold');
                doc.text('CONTRACTOR INFO', 25, 72);
                
                doc.setFontSize(7);
                doc.setFont('helvetica', 'normal');
                doc.text(`Name: ${contractData.freelancerName || 'Not specified'}`, 25, 78);
                doc.text(`Role: ${contractData.role || 'Not specified'}`, 25, 82);
                doc.text(`Location: ${contractData.location || 'Not specified'}`, 25, 86);
                
                // Right box - Project Details
                doc.setFillColor(248, 249, 250);
                doc.rect(110, 65, 80, 25, 'F');
                doc.setDrawColor(255, 178, 0);
                doc.setLineWidth(0.5);
                doc.rect(110, 65, 80, 25, 'S');
                
                doc.setFontSize(8);
                doc.setTextColor(0, 0, 0);
                doc.setFont('helvetica', 'bold');
                doc.text('PROJECT DETAILS', 115, 72);
                
                doc.setFontSize(7);
                doc.setFont('helvetica', 'normal');
                doc.text(`Email: ${contractData.freelancerEmail || 'Not specified'}`, 115, 78);
                doc.text(`Start: ${contractData.projectStart || 'Not specified'}`, 115, 82);
                doc.text(`Rate: ${contractData.rate || 'Not specified'}`, 115, 86);
                
                // ==================== CONTRACT TERMS ====================
                
                // Professional section header with background
                doc.setFillColor(255, 178, 0);
                doc.rect(20, 100, 170, 8, 'F');
                doc.setFontSize(10);
                doc.setTextColor(0, 0, 0);
                doc.setFont('helvetica', 'bold');
                doc.text('CONTRACT TERMS & CONDITIONS', 105, 106, { align: 'center' });
                
                doc.setFontSize(8);
                doc.setTextColor(0, 0, 0);
                doc.setFont('helvetica', 'normal');
                
                // Professional compact terms list
                const compactTerms = [
                    'INDEPENDENT CONTRACTOR: Not an employee of\nCochran Films.',
                    'SERVICES: Provide professional services as specified.',
                    'COMPENSATION: Payment within 24 hours of completion.',
                    'STANDARDS: All work must meet Cochran Films quality.',
                    'ATTIRE: Professional attire (all black) required.',
                    'PUNCTUALITY: Arrive 15 minutes before start time.',
                    'DOCUMENTATION: Bring valid ID and signed contract.',
                    'EQUIPMENT: Use provided Cochran Films equipment.',
                    'CONDUCT: Maintain professional demeanor at all times.',
                    'SAFETY: Follow all safety protocols provided.',
                    'CONFIDENTIALITY: Respect project confidentiality.',
                    'BTS CONTENT: May freely take and share behind-the-scenes.',
                    'TAX OBLIGATIONS: Contractor responsible for personal taxes.',
                    'TRANSPORTATION: Contractor responsible for own transport.'
                ];
                
                // Proper spacing to prevent text overlap
                let currentYPos = 120;
                const lineHeight = 10;
                
                // Process each term with TWO-COLUMN layout to save vertical space
                compactTerms.forEach((term, index) => {
                    // Split into two columns: left column (0-6) and right column (7-13)
                    const isLeftColumn = index < 7;
                    const columnIndex = isLeftColumn ? index : index - 7;
                    const xPos = isLeftColumn ? 20 : 110; // Left column at x=20, right column at x=110
                    const fixedYPos = 120 + (columnIndex * 8);
                    
                    // Render each term with two-column layout and text wrapping
                    doc.setFont('helvetica', 'normal');
                    doc.setFontSize(8);
                    
                    // Handle multi-line terms (like term #1)
                    if (term.includes('\n')) {
                        const lines = term.split('\n');
                        lines.forEach((line, lineIndex) => {
                            doc.text(line, xPos, fixedYPos + (lineIndex * 4));
                        });
                    } else {
                        doc.text(term, xPos, fixedYPos);
                    }
                });
                
                // Calculate signature position AFTER all terms are rendered (two-column layout)
                const maxColumnHeight = Math.ceil(compactTerms.length / 2) * 8; // Height of tallest column
                const lastTermY = 120 + maxColumnHeight;
                const signatureY = lastTermY + 20; // Add 20px spacing after last term
                
                // ==================== SIGNATURES ====================
                
                // Signature header with professional styling
                doc.setFillColor(255, 178, 0);
                doc.rect(20, signatureY - 5, 170, 8, 'F');
                doc.setFontSize(10);
                doc.setTextColor(0, 0, 0);
                doc.setFont('helvetica', 'bold');
                doc.text('CONTRACT SIGNATURES', 105, signatureY + 2, { align: 'center' });
                
                // Company signature (pre-signed) - Professional styling
                doc.setFontSize(8);
                doc.setTextColor(0, 0, 0);
                doc.setFont('helvetica', 'bold');
                doc.text('COCHRAN FILMS (COMPANY)', 20, signatureY + 15);
                
                // Company signature box with professional border
                doc.setFillColor(248, 249, 250);
                doc.rect(20, signatureY + 20, 75, 25, 'F');
                doc.setDrawColor(255, 178, 0);
                doc.setLineWidth(0.5);
                doc.rect(20, signatureY + 20, 75, 25, 'S');
                
                doc.setFontSize(6);
                doc.setTextColor(0, 0, 0);
                doc.setFont('helvetica', 'normal');
                
                doc.text('Authorized Signature:', 25, signatureY + 26);
                
                // CURSIVE SIGNATURE FOR CODY COCHRAN
                doc.setFontSize(12);
                doc.setTextColor(0, 0, 0);
                doc.setFont('helvetica', 'italic'); // Use italic for cursive effect
                doc.text('Cody Cochran', 25, signatureY + 32);
                
                // Add signature line for authenticity
                doc.setDrawColor(0, 0, 0);
                doc.setLineWidth(0.3);
                doc.line(25, signatureY + 34, 85, signatureY + 34);
                
                doc.setFontSize(6);
                doc.setFont('helvetica', 'normal');
                doc.text('Title: Founder & CEO', 25, signatureY + 38);
                doc.text('Date: ' + contractData.effectiveDate, 25, signatureY + 42);
                
                // Contractor signature - Professional styling
                doc.setFontSize(8);
                doc.setTextColor(0, 0, 0);
                doc.setFont('helvetica', 'bold');
                doc.text('CONTRACTOR SIGNATURE', 105, signatureY + 15);
                
                // Contractor signature box with professional border
                doc.setFillColor(248, 249, 250);
                doc.rect(105, signatureY + 20, 75, 25, 'F');
                doc.setDrawColor(255, 178, 0);
                doc.setLineWidth(0.5);
                doc.rect(105, signatureY + 20, 75, 25, 'S');
                
                doc.setFontSize(6);
                doc.setTextColor(0, 0, 0);
                doc.setFont('helvetica', 'normal');
                
                doc.text('Contractor:', 115, signatureY + 26);
                
                // CURSIVE SIGNATURE FOR CONTRACTOR
                doc.setFontSize(12);
                doc.setTextColor(0, 0, 0);
                doc.setFont('helvetica', 'italic'); // Use italic for cursive effect
                doc.text(contractData.freelancerName || 'Contractor Name', 115, signatureY + 32);
                
                // Add signature line for authenticity
                doc.setDrawColor(0, 0, 0);
                doc.setLineWidth(0.3);
                doc.line(115, signatureY + 34, 175, signatureY + 34);
                
                doc.setFontSize(6);
                doc.setFont('helvetica', 'normal');
                doc.text('Signature: ' + (contractData.signature || 'Digital Signature'), 115, signatureY + 38);
                doc.text('Date: ' + (contractData.signatureDate || contractData.effectiveDate), 115, signatureY + 42);
                
                // ==================== PROFESSIONAL LEGAL FOOTER ====================
                
                // Footer - positioned with proper spacing to fit in container
                const footerY = 260; // MOVED DOWN from 240 to 260 to avoid overlapping signature boxes
                
                doc.setFillColor(248, 249, 250);
                doc.rect(20, footerY - 5, 170, 20, 'F'); // Increased height to 20mm
                doc.setDrawColor(255, 178, 0);
                doc.setLineWidth(0.3);
                doc.rect(20, footerY - 5, 170, 20, 'S');
                
                doc.setFontSize(6);
                doc.setTextColor(100, 100, 100);
                doc.setFont('helvetica', 'normal');
                doc.text('This contract was digitally signed and is legally binding under Georgia law.', 105, footerY + 3, { align: 'center' });
                doc.text('Generated by Cochran Films Contract Portal • ' + new Date().toLocaleDateString(), 105, footerY + 8, { align: 'center' });
                doc.text('Contract ID: ' + contractData.contractId, 105, footerY + 13, { align: 'center' });
                
                return doc;
            } catch (error) {
                console.error('❌ Error generating PDF:', error);
                throw error;
            }
        }

        
        // Download user contract - Generate PDF on-the-fly like contract.html
        async function downloadUserContract(userName) {
            // Ensure function is globally accessible
            window.downloadUserContract = downloadUserContract;
            
            console.log('🔍 downloadUserContract function called with:', userName);
            
            // Force refresh users data from centralized source
            try {
                console.log('🔄 Refreshing users data from centralized source...');
                const response = await fetch('users.json');
                if (response.ok) {
                    const freshData = await response.json();
                    users = freshData.users;
                    console.log('✅ Users data refreshed from centralized source');
                } else {
                    console.warn('⚠️ Could not refresh users data');
                }
            } catch (error) {
                console.warn('⚠️ Error refreshing users data:', error);
            }
            
            const userData = users[userName];
            if (!userData) {
                console.log('❌ User not found:', userName);
                showNotification('User not found', 'error');
                return;
            }

            console.log('📄 Attempting to generate contract for:', userName);
            console.log('📄 User data:', userData);
            
            // Check if user has contract data in centralized system
            if (!userData.contract) {
                console.log('❌ No contract data found for user:', userName);
                showNotification('No contract data found for user', 'error');
                return;
            }
            
            const userContract = userData.contract;
            console.log('📄 Contract data from centralized system:', userContract);
            
            // Check if contract is signed
            if (userContract.contractStatus !== 'signed') {
                console.log('❌ Contract not signed yet for user:', userName);
                showNotification('Contract not signed yet for user', 'error');
                return;
            }
            
            // Create contract data for PDF generation (same format as contract.html)
            const contractData = {
                contractId: userContract.contractId || userName,
                freelancerName: userName,
                freelancerEmail: userData.profile?.email || 'Not specified',
                role: userData.profile?.role || 'Contractor',
                location: userData.profile?.location || 'Atlanta Area',
                projectStart: userData.profile?.projectStart || 'TBD',
                rate: userData.profile?.rate || 'Not specified',
                effectiveDate: userData.profile?.approvedDate || new Date().toISOString().split('T')[0],
                signatureDate: userContract.contractSignedDate || new Date().toISOString().split('T')[0],
                signature: userContract.contractStatus === 'signed' ? 'Digital Signature' : 'Not Signed'
            };
            
            try {
                console.log('📄 Generating PDF with contract data:', contractData);
                
                // Generate PDF using the same function as contract.html
                const doc = generateContractPDF(contractData);
                
                // Save PDF to user's device using user name
                const safeFileName = userName.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, ' ').trim() + '.pdf';
                doc.save(safeFileName);
                
                console.log('✅ PDF generated and downloaded successfully:', safeFileName);
                showNotification('✅ Contract downloaded successfully!', 'success');
                
            } catch (error) {
                console.error('❌ Error generating PDF:', error);
                showNotification('❌ Error generating contract PDF. Please try again.', 'error');
            }
        }
        
        // Make function globally accessible
        window.downloadUserContract = downloadUserContract;
        


        // Check if performance review should be shown for a user
        function shouldShowPerformanceReview(userData) {
            // Check if user has completed projects with paid status
            if (userData.jobs && Object.keys(userData.jobs).length > 0) {
                const completedJobs = Object.values(userData.jobs).filter(job => 
                    job.projectStatus === 'completed' && job.paymentStatus === 'paid'
                );
                
                // Show if there are completed paid jobs and no performance review exists
                if (completedJobs.length > 0) {
                    const existingReview = performanceReviews[userData.profile?.email];
                    return !existingReview || existingReview.status === 'pending';
                }
            }
            return false;
        }

        // Display users
        async function displayUsers() {
            // Ensure performance reviews are loaded before displaying users
            if (Object.keys(performanceReviews).length === 0) {
                console.log('🔄 Loading performance reviews before displaying users...');
                await loadPerformanceReviews();
            }
            
            const container = document.getElementById('contractsList');
            
            if (Object.keys(users).length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; color: rgba(255,255,255,0.6); padding: 2rem;">
                        <h3 style="color: rgba(255,255,255,0.8); margin-bottom: 1rem;">👥 No Users Added Yet</h3>
                        <p>Add users using the form above to manage contracts</p>
                    </div>
                `;
                return;
            }
            
            const usersHTML = Object.entries(users).map(([userName, userData]) => `
                <div class="item-card">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                        <h3>${userName}</h3>
                        <div style="display: flex; gap: 0.5rem; align-items: center;">
                            <span style="background: ${userData.contract?.contractStatus === 'uploaded' ? '#22c55e' : userData.contract?.contractStatus === 'signed' ? '#f59e0b' : '#6b7280'}; color: white; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.8rem;">
                                ${userData.contract?.contractStatus === 'uploaded' ? 'Contract Complete' : userData.contract?.contractStatus === 'signed' ? 'Contract Signed' : 'Pending Approval'}
                            </span>
                            <span style="background: ${userData.profile?.password ? '#22c55e' : '#f59e0b'}; color: white; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.8rem;">
                                ${userData.profile?.password ? '🔐 Password Set' : '⏳ Pending Password'}
                            </span>
                            <button onclick="showProjectStatusManager('${userName}')" style="background: #3b82f6; color: white; border: none; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.8rem; cursor: pointer;">
                                📊 Project Status
                            </button>
                            <button onclick="showJobAssignmentModal('${userName}')" style="background: #22c55e; color: white; border: none; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.8rem; cursor: pointer;">
                                🎯 Assign Jobs
                            </button>
                            <button onclick="console.log('🔍 Button clicked for user:', '${userName}'); downloadUserContract('${userName}')" style="background: #8b5cf6; color: white; border: none; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.8rem; cursor: pointer;">
                                📄 Download Contract
                            </button>
                            
                            <button onclick="showUserBankDetails('${userName}')" style="background: #f59e0b; color: white; border: none; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.8rem; cursor: pointer;">
                                🏦 Bank Details
                            </button>

                            ${shouldShowPerformanceReview(userData) ? `
                            <button onclick="showPerformanceReviewModal('${userName}')" style="background: #f59e0b; color: white; border: none; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.8rem; cursor: pointer;">
                                ⭐ Performance Review
                            </button>
                            ` : ''}
                            ${!userData.profile?.approvedDate ? `
                                <button onclick="approveUser('${userName}')" style="background: linear-gradient(135deg, #22c55e, #16a34a); color: white; border: none; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.8rem; cursor: pointer;">
                                    ✅ Approve
                                </button>
                            ` : ''}
                        </div>
                    </div>
                    
                    <div class="item-meta">
                        <span>📧 ${userData.profile?.email || 'No email'}</span>
                        <span>🎯 ${userData.profile?.role || 'No role'}</span>
                        <span>💰 ${userData.profile?.rate || 'No rate'}</span>
                        <span>📍 ${userData.profile?.location || 'No location'}</span>
                    </div>
                    
                    <!-- Payment Method Section -->
                    <div style="background: rgba(255,178,0,0.1); padding: 1rem; border-radius: 8px; margin: 1rem 0; border: 1px solid rgba(255,178,0,0.3);">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                            <strong style="color: #FFB200;">💳 Payment Method</strong>
                            ${userData.paymentMethod ? 
                                `<span style="background: rgba(255,178,0,0.3); color: #FFB200; padding: 0.3rem 0.8rem; border-radius: 6px; font-weight: bold; font-size: 0.9rem;">${userData.paymentMethod.toUpperCase()}</span>` : 
                                `<span style="background: rgba(255,0,0,0.2); color: #ff6b6b; padding: 0.3rem 0.8rem; border-radius: 6px; font-weight: bold; font-size: 0.9rem;">NOT SET</span>`
                            }
                        </div>
                        <div style="font-size: 0.85rem; color: rgba(255,255,255,0.8);">
                            ${userData.paymentMethod ? 
                                `User has selected <strong>${userData.paymentMethod.toUpperCase()}</strong> as their preferred payment method.` : 
                                `User has not yet selected a payment method. They can do this in their portal.`
                            }
                        </div>
                    </div>
                    
                    <div style="background: rgba(255,178,0,0.1); padding: 1rem; border-radius: 8px; margin: 1rem 0; border: 1px solid rgba(255,178,0,0.3);">
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; font-size: 0.9rem;">
                            <div><strong>Project Start:</strong><br>${userData.profile?.projectStart || 'Not set'}</div>
                            <div><strong>Approved Date:</strong><br>${userData.profile?.approvedDate || 'Not approved yet'}</div>
                        </div>
                        ${userData.jobs && Object.keys(userData.jobs).length > 0 ? `
                            <div style="margin-top: 1rem; padding-top: 1rem; border-top: 1px solid rgba(255,178,0,0.3);">
                                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                                    <strong style="color: #22c55e;">🎯 Assigned Jobs (${Object.keys(userData.jobs).length})</strong>
                                    ${userData.primaryJob ? `<span style="background: #22c55e; color: white; padding: 0.2rem 0.5rem; border-radius: 4px; font-size: 0.8rem;">Primary Job</span>` : ''}
                                </div>
                                <div style="font-size: 0.85rem; color: rgba(255,255,255,0.8);">
                                    ${Object.values(userData.jobs).slice(0, 2).map(job => `
                                        <div style="margin-bottom: 0.25rem;">• ${job.role || 'No role'} - ${job.projectStatus || 'No status'} (${job.id})</div>
                                    `).join('')}
                                    ${Object.keys(userData.jobs).length > 2 ? `<div style="font-style: italic; color: rgba(255,255,255,0.6);">... and ${Object.keys(userData.jobs).length - 2} more</div>` : ''}
                                </div>
                            </div>
                        ` : ''}
                    </div>
                    
                    <!-- Performance Review Section -->
                    <div style="background: rgba(255,178,0,0.1); padding: 1rem; border-radius: 8px; margin: 1rem 0; border: 1px solid rgba(255,178,0,0.3);">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                            <strong style="color: #FFB200;">⭐ Performance Review</strong>
                            ${getPerformanceReviewStatus(userData)}
                        </div>
                        <div style="font-size: 0.85rem; color: rgba(255,255,255,0.8);">
                            ${getPerformanceReviewSummary(userData)}
                        </div>
                        ${getPerformanceReviewButton(userData)}
                    </div>
                    
                    <div class="actions">
                        <button class="btn btn-small" onclick="editUser('${userName}')">
                            <i class="fas fa-edit"></i> Edit User
                        </button>
                        <button class="btn btn-small btn-danger" onclick="deleteUser('${userName}')">
                            <i class="fas fa-trash"></i> Delete User
                        </button>
                    </div>
                </div>
            `).join('');
            
            container.innerHTML = usersHTML;
        }

        // Firebase Management Functions
        function showFirebaseManagement() {
            const container = document.getElementById('firebase-tab');
            if (!container) {
                console.error('❌ Firebase tab container not found');
                showNotification('Error: Firebase tab not found', 'error');
                return;
            }
            
            container.innerHTML = `
                <div class="form-section">
                    <h2><i class="fas fa-fire"></i> Firebase Authentication Management</h2>
                    <div class="firebase-management">
                        <div class="info-card">
                            <h3><i class="fas fa-info-circle"></i> Current Authentication Setup</h3>
                            <p><strong>Admin Dashboard:</strong> Uses Firebase Authentication with role-based access</p>
                            <p><strong>User Portal:</strong> Now uses Firebase Authentication (updated)</p>
                            <p><strong>Security:</strong> Only admin emails can access admin dashboard</p>
                        </div>
                        
                        <div class="action-card">
                            <h3><i class="fas fa-users"></i> Create Firebase Accounts</h3>
                            <p>Create Firebase authentication accounts for all existing users in the system.</p>
                            <button onclick="createFirebaseAccountsForExistingUsers()" class="action-btn">
                                <i class="fas fa-plus"></i> Create Firebase Accounts
                            </button>
                        </div>
                        
                        <div class="info-card">
                            <h3><i class="fas fa-shield-alt"></i> Security Notes</h3>
                            <ul>
                                <li>Admin emails: ${ADMIN_EMAILS.join(', ')}</li>
                                <li>Users can only access their own portal</li>
                                <li>Admins can access both admin dashboard and user portal</li>
                                <li>Firebase handles password security and authentication</li>
                            </ul>
                        </div>
                    </div>
                </div>
            `;
        }

        // User management functions
        function editUser(userName) {
            const userData = users[userName];
            if (!userData) {
                showNotification('User not found', 'error');
                return;
            }
            
            // Populate the form with existing user data
            document.getElementById('freelancerName').value = userName;
            document.getElementById('freelancerEmail').value = userData.profile?.email || '';
            document.getElementById('freelancerRole').value = userData.profile?.role || '';
            document.getElementById('freelancerLocation').value = userData.profile?.location || '';
            document.getElementById('projectStart').value = userData.profile?.projectStart || '';
            document.getElementById('freelancerRate').value = userData.profile?.rate || '';
            document.getElementById('approvedDate').value = userData.profile?.approvedDate || '';
            
            // Update the form title to indicate editing
            const formTitle = document.querySelector('#contractForm h2');
            if (formTitle) {
                formTitle.textContent = `Edit Creator: ${userName}`;
            }
            
            // Update submit button text
            const submitButton = document.querySelector('#contractForm button[type="submit"]');
            if (submitButton) {
                submitButton.textContent = 'Update Creator';
            }
            
            // Scroll to the form
            document.getElementById('contractForm').scrollIntoView({ behavior: 'smooth' });
            
            showNotification(`Editing user: ${userName}. Only the fields you change will be updated.`, 'info');
        }

        async function deleteUser(userName) {
            if (confirm(`Are you sure you want to delete user "${userName}"? This will also delete any associated contract PDF files. This action cannot be undone.`)) {
                try {
                    const userData = users[userName];
                    const userEmail = userData?.profile?.email;
                    const contractId = userData?.contract?.contractId;
                    const contractFileName = userData?.contract?.fileName;
                    
                    let firebaseDeleted = false;
                    let firebaseMessage = '';
                    let pdfDeleted = false;
                    let pdfMessage = '';
                    
                    // 1. Delete associated PDF file if contract exists
                    if (userName) {
                        try {
                            // Create safe filename from user name (same as download function)
                            const safeFileName = userName.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, ' ').trim() + '.pdf';
                            console.log(`🗑️ Attempting to delete PDF file: ${safeFileName}`);
                            
                            // Try to delete PDF file from GitHub using user name
                            const deletePdfResponse = await fetch('/api/delete-pdf', {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    fileName: safeFileName,
                                    contractId: contractId,
                                    userEmail: userEmail,
                                    userName: userName
                                })
                            });
                            
                            if (deletePdfResponse.ok) {
                                const deleteResult = await deletePdfResponse.json();
                                if (deleteResult.success) {
                                    console.log('✅ PDF file deleted successfully:', safeFileName);
                                    pdfDeleted = true;
                                    pdfMessage = `PDF file (${safeFileName}) deleted.`;
                                } else {
                                    console.warn('⚠️ PDF deletion failed:', deleteResult.error);
                                    pdfMessage = `PDF file may still exist: ${deleteResult.error}`;
                                }
                            } else {
                                console.warn('⚠️ PDF deletion request failed:', deletePdfResponse.status);
                                pdfMessage = 'PDF file may still exist on server.';
                            }
                        } catch (pdfError) {
                            console.warn('⚠️ Could not delete PDF file:', pdfError);
                            pdfMessage = 'PDF file may still exist.';
                        }
                    }
                    
                    // 2. Delete from Firebase (if email exists)
                    if (userEmail) {
                        try {
                            const firebaseResult = await deleteFirebaseAccount(userEmail);
                            if (firebaseResult.success) {
                                console.log('✅ Firebase account deleted for:', userEmail);
                                firebaseDeleted = true;
                                firebaseMessage = 'Removed from Firebase and GitHub.';
                            } else {
                                console.warn('⚠️ Firebase account deletion limited:', firebaseResult.error);
                                firebaseMessage = firebaseResult.message || 'Firebase account may still exist.';
                            }
                        } catch (firebaseError) {
                            console.warn('⚠️ Could not delete Firebase account:', firebaseError);
                            firebaseMessage = 'Firebase account may still exist.';
                        }
                    }
                    
                    // 3. Delete from local users object
                    delete users[userName];
                    localStorage.setItem('users', JSON.stringify(users));
                    
                    // 4. Update GitHub repository
                    await updateUsersOnGitHub();
                    
                    // 5. Refresh display
                    await displayUsers();
                    
                    // 6. Show comprehensive success message
                    let successMessage = `✅ User "${userName}" deleted successfully!`;
                    if (firebaseDeleted) successMessage += ` ${firebaseMessage}`;
                    if (pdfDeleted) successMessage += ` ${pdfMessage}`;
                    
                    showNotification(successMessage, 'success');
                    
                } catch (error) {
                    console.error('❌ Error deleting user:', error);
                    showNotification(`❌ Error deleting user: ${error.message}`, 'error');
                    await displayUsers(); // Still update the display
                }
            }
        }

        // User management functions
        function editUser(userName) {
            const userData = users[userName];
            if (!userData) {
                showNotification('User not found', 'error');
                return;
            }
            
            // Populate the form with existing user data
            document.getElementById('freelancerName').value = userName;
            document.getElementById('freelancerEmail').value = userData.profile?.email || '';
            document.getElementById('freelancerRole').value = userData.profile?.role || '';
            document.getElementById('freelancerLocation').value = userData.profile?.location || '';
            document.getElementById('projectStart').value = userData.profile?.projectStart || '';
            document.getElementById('freelancerRate').value = userData.profile?.rate || '';
            document.getElementById('approvedDate').value = userData.profile?.approvedDate || '';
            
            // Set editing mode
            editingFreelancerIndex = 0; // Any positive number indicates editing mode
            
            // Update form button text
            const submitButton = document.querySelector('#contractForm button[type="submit"]');
            if (submitButton) {
                submitButton.innerHTML = '<i class="fas fa-save"></i> Update User';
            }
            
            // Scroll to form
            document.getElementById('contractForm').scrollIntoView({ behavior: 'smooth' });
            
            showNotification(`Editing user: ${userName}`, 'info');
        }



        // Contract form submission
        document.addEventListener('DOMContentLoaded', function() {
            const contractForm = document.getElementById('contractForm');
            if (contractForm) {
                contractForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    saveFreelancer();
                });
            }
        });

        // Save user (formerly freelancer)
        async function saveFreelancer() {
            const userName = document.getElementById('freelancerName').value;
            const userEmail = document.getElementById('freelancerEmail').value;
            const userRole = document.getElementById('freelancerRole').value;
            const userLocation = document.getElementById('freelancerLocation').value;
            
            // Check if user already exists
            const existingUser = users[userName];
            const isEditing = existingUser !== undefined;
            
            if (isEditing) {
                // EDITING EXISTING USER - Only update changed fields
                console.log('🔄 Editing existing user:', userName);
                
                // Preserve existing data and only update changed fields
                const updatedUserData = {
                    profile: {
                        ...existingUser.profile, // Keep existing profile data
                        email: userEmail,
                        role: userRole,
                        location: userLocation,
                        projectStart: document.getElementById('projectStart').value,
                        rate: document.getElementById('freelancerRate').value,
                        approvedDate: document.getElementById('approvedDate').value
                    },
                    contract: {
                        ...existingUser.contract // Keep existing contract data
                    },
                    jobs: {
                        ...existingUser.jobs // Keep existing jobs
                    },
                    primaryJob: existingUser.primaryJob, // Keep existing primary job
                    paymentMethod: existingUser.paymentMethod // Keep existing payment method
                };
                
                // Update the user data
                users[userName] = updatedUserData;
                
                console.log('✅ User data updated (preserving existing data):', userName);
                
                // Update localStorage and GitHub
                localStorage.setItem('users', JSON.stringify(users));
                await updateUsersOnGitHub();
                
                // Refresh display
                await displayUsers();
                
                // Add notification
                await addNotification(
                    'User Updated Successfully',
                    `User "${userName}" has been updated while preserving existing contract, payment, and job data.`,
                    'user_updated',
                    {
                        userName: userName,
                        userEmail: userEmail,
                        actionRequired: false,
                        priority: 'normal'
                    }
                );
                
                // Clear form
                clearFreelancerForm();
                
            } else {
                // CREATING NEW USER
                console.log('🔄 Creating new user:', userName);
                
                // Generate a temporary password for Firebase account creation
                const tempPassword = generateTempPassword();
                
                // Assign job data based on role and location
                const assignedJobs = await assignJobsToUser(userRole, userLocation);
                
                const userData = {
                    profile: {
                        email: userEmail,
                        password: tempPassword, // Temporary password for Firebase account
                        role: userRole,
                        location: userLocation,
                        projectStart: document.getElementById('projectStart').value,
                        rate: document.getElementById('freelancerRate').value,
                        approvedDate: document.getElementById('approvedDate').value
                    },
                    contract: {
                        contractUrl: "contract.html",
                        contractStatus: 'pending',
                        contractSignedDate: null,
                        contractUploadedDate: null,
                        contractId: null
                    },
                    jobs: assignedJobs.jobs,
                    primaryJob: assignedJobs.primaryJob,
                    paymentMethod: null
                };
                
                try {
                    // Create Firebase account for new users
                    console.log('🔄 Creating new Firebase account for:', userEmail);
                    const firebaseResult = await createFirebaseAccount(userEmail, tempPassword);
                    
                    if (firebaseResult.success) {
                        console.log('✅ User data created for:', userEmail);
                        
                        // Add new user to local users object
                        users[userName] = userData;
                        
                        // Update localStorage
                        localStorage.setItem('users', JSON.stringify(users));
                        
                        // Update GitHub repository
                        await updateUsersOnGitHub();
                        
                        // Send job acceptance email for new users
                        await sendJobAcceptanceEmail(userName, userData);
                        
                        // Refresh display
                        await displayUsers();
                        
                        // Add notification
                        await addNotification(
                            'User Created Successfully',
                            `User "${userName}" has been created with Firebase account and job acceptance email sent.`,
                            'user_created',
                            {
                                userName: userName,
                                userEmail: userData.profile.email,
                                actionRequired: false,
                                priority: 'normal'
                            }
                        );
                        
                        // Clear form
                        clearFreelancerForm();
                        
                    } else {
                        // Add error notification
                        await addNotification(
                            'User Creation Failed',
                            `Failed to create Firebase account for user "${userName}": ${firebaseResult.error}`,
                            'error',
                            {
                                userName: userName,
                                error: firebaseResult.error,
                                actionRequired: true,
                                priority: 'high'
                            }
                        );
                    }
                    
                } catch (error) {
                    console.error('❌ Error creating user:', error);
                    // Add error notification
                    await addNotification(
                        'User Creation Error',
                        `Error creating user "${userName}": ${error.message}`,
                        'error',
                        {
                            userName: userName,
                            error: error.message,
                            actionRequired: true,
                            priority: 'high'
                        }
                    );
                }
            }
        }
        
        // Assign jobs to user based on role and location
        async function assignJobsToUser(role, location) {
            try {
                // Load jobs data
                const jobsResponse = await fetch('jobs-data.json');
                const jobsData = await jobsResponse.json();
                
                const assignedJobs = {};
                let primaryJob = null;
                
                // Match jobs based on role and location
                jobsData.jobs.forEach(job => {
                    // Check if job matches user's role and location
                    if (job.title.toLowerCase().includes(role.toLowerCase()) || 
                        role.toLowerCase().includes(job.title.toLowerCase())) {
                        
                        // Create job ID
                        const jobId = `job-${job.title.toLowerCase().replace(/\s+/g, '-')}-${Date.now()}`;
                        
                        assignedJobs[jobId] = {
                            id: jobId,
                            title: job.title,
                            date: job.date,
                            location: job.location,
                            rate: job.rate,
                            description: job.description,
                            status: job.status,
                            projectStatus: job.status || 'upcoming',
                            paymentStatus: 'pending',
                            assignedDate: new Date().toISOString().split('T')[0],
                            projectStart: document.getElementById('projectStart').value || 'TBD'
                        };
                        
                        // Set as primary job if it's the first match
                        if (!primaryJob) {
                            primaryJob = jobId;
                        }
                    }
                });
                
                // If no specific job matches, create a default job based on role
                if (Object.keys(assignedJobs).length === 0) {
                    const defaultJobId = `job-${role.toLowerCase().replace(/\s+/g, '-')}-default`;
                    
                    assignedJobs[defaultJobId] = {
                        id: defaultJobId,
                        title: `${role} Position`,
                        date: new Date().toISOString().split('T')[0],
                        location: location,
                        rate: document.getElementById('freelancerRate').value || '$200',
                        description: `Professional ${role} position in ${location}. Details to be provided.`,
                        status: 'upcoming',
                        projectStatus: 'upcoming',
                        paymentStatus: 'pending',
                        assignedDate: new Date().toISOString().split('T')[0],
                        projectStart: document.getElementById('projectStart').value || 'TBD'
                    };
                    
                    primaryJob = defaultJobId;
                }
                
                console.log('✅ Assigned jobs to user:', assignedJobs);
                console.log('✅ Primary job:', primaryJob);
                
                return {
                    jobs: assignedJobs,
                    primaryJob: primaryJob
                };
                
            } catch (error) {
                console.error('❌ Error assigning jobs to user:', error);
                
                // Fallback: create a default job
                const defaultJobId = `job-${role.toLowerCase().replace(/\s+/g, '-')}-fallback`;
                const defaultJob = {
                    id: defaultJobId,
                    title: `${role} Position`,
                    date: new Date().toISOString().split('T')[0],
                    location: location,
                    rate: document.getElementById('freelancerRate').value || '$200',
                    description: `Professional ${role} position in ${location}. Details to be provided.`,
                    status: 'upcoming',
                    projectStatus: 'upcoming',
                    paymentStatus: 'pending',
                    assignedDate: new Date().toISOString().split('T')[0],
                    projectStart: document.getElementById('projectStart').value || 'TBD'
                };
                
                return {
                    jobs: { [defaultJobId]: defaultJob },
                    primaryJob: defaultJobId
                };
            }
        }
        
        // Generate temporary password for Firebase account
        function generateTempPassword() {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            let password = '';
            for (let i = 0; i < 12; i++) {
                password += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return password;
        }
        
        // Clear freelancer form fields
        function clearFreelancerForm() {
            document.getElementById('freelancerName').value = '';
            document.getElementById('freelancerEmail').value = '';
            document.getElementById('freelancerRole').value = '';
            document.getElementById('freelancerLocation').value = '';
            document.getElementById('projectStart').value = '';
            document.getElementById('freelancerRate').value = '';
            document.getElementById('approvedDate').value = '';
            
            // Reset any dropdowns or selects
            const selects = document.querySelectorAll('#creator-management select');
            selects.forEach(select => {
                if (select.value !== '') {
                    select.value = '';
                }
            });
            
            // Reset form title and button text
            const formTitle = document.querySelector('#contractForm h2');
            if (formTitle) {
                formTitle.textContent = 'Add/Edit Creator';
            }
            
            const submitButton = document.querySelector('#contractForm button[type="submit"]');
            if (submitButton) {
                submitButton.textContent = 'Save Freelancer';
            }
            
            console.log('✅ Freelancer form cleared');
        }
        
        // Update existing users with missing job data
        async function updateExistingUsersWithJobData() {
            try {
                console.log('🔄 Updating existing users with missing job data...');
                
                let updatedCount = 0;
                
                for (const [userName, userData] of Object.entries(users)) {
                    // Check if user has empty jobs object or null primaryJob
                    if (!userData.jobs || Object.keys(userData.jobs).length === 0 || !userData.primaryJob) {
                        console.log(`🔄 Updating job data for user: ${userName}`);
                        
                        const role = userData.profile?.role || 'Producer';
                        const location = userData.profile?.location || 'Atlanta, GA';
                        
                        // Assign job data
                        const assignedJobs = await assignJobsToUser(role, location);
                        
                        // Update user data
                        users[userName].jobs = assignedJobs.jobs;
                        users[userName].primaryJob = assignedJobs.primaryJob;
                        
                        updatedCount++;
                        console.log(`✅ Updated job data for ${userName}`);
                    }
                }
                
                if (updatedCount > 0) {
                    // Update localStorage
                    localStorage.setItem('users', JSON.stringify(users));
                    
                    // Update GitHub repository
                    await updateUsersOnGitHub();
                    
                    showNotification(`✅ Updated job data for ${updatedCount} existing users`, 'success');
                } else {
                    console.log('✅ All users already have job data');
                }
                
            } catch (error) {
                console.error('❌ Error updating existing users with job data:', error);
                showNotification('❌ Error updating existing users with job data', 'error');
            }
        }
        
        // Update users.json on GitHub
        async function updateUsersOnGitHub() {
            try {
                console.log('🔄 Updating users.json on GitHub...');
                
                // Count performance reviews in users
                let totalReviews = 0;
                for (const user of Object.values(users)) {
                    if (user.performance) {
                        totalReviews++;
                    }
                }
                
                const usersData = {
                    users: users,
                    statusOptions: {
                        projectStatus: ["upcoming", "in-progress", "completed", "cancelled"],
                        paymentStatus: ["pending", "processing", "paid", "overdue"]
                    },
                    lastUpdated: new Date().toISOString().split('T')[0],
                    totalUsers: Object.keys(users).length,
                    system: {
                        totalReviews: totalReviews,
                        lastUpdated: new Date().toISOString().split('T')[0]
                    }
                };
                
                // First, get the current file SHA
                const getResponse = await fetch('/api/github/file/users.json');
                let sha = null;
                
                if (getResponse.ok) {
                    const fileData = await getResponse.json();
                    sha = fileData.sha;
                    console.log('📄 Got current file SHA:', sha.substring(0, 7));
                } else if (getResponse.status === 404) {
                    console.log('📄 File does not exist, will create new file');
                } else {
                    console.warn('⚠️ Could not get current file SHA, proceeding without it');
                }
                
                const updateBody = {
                    content: JSON.stringify(usersData, null, 2),
                    message: `Update users.json - Admin dashboard update - ${new Date().toLocaleString()}`
                };
                
                // Include SHA if we have it (for updates)
                if (sha) {
                    updateBody.sha = sha;
                }
                
                const response = await fetch('/api/github/file/users.json', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updateBody)
                });
                
                if (response.ok) {
                    console.log('✅ users.json updated on GitHub successfully');
                    return true;
                } else {
                    const errorData = await response.json().catch(() => ({}));
                    console.error('❌ Failed to update users.json on GitHub:', response.status, errorData);
                    return false;
                }
                
            } catch (error) {
                console.error('❌ Error updating users.json on GitHub:', error);
                return false;
            }
        }
        

        
        // Validate user data
        function validateUserData(userName, userData) {
            if (!userName.trim() || !userData.profile.email.trim() || !userData.profile.role.trim()) {
                showNotification('Name, email, and role are required', 'error');
                return false;
            }
            return true;
        }


        
        // Send job acceptance email
        async function sendJobAcceptanceEmail(userName, userData) {
            try {
                // Prepare email parameters (no contract ID until user actually signs)
                const emailParams = {
                    to_email: userData.profile.email,
                    freelancer_name: userName || 'User',
                    role: userData.profile.role || 'Contractor',
                    location: userData.profile.location || 'Atlanta Area',
                    rate: userData.profile.rate || 'Rate to be determined',
                    project_start: userData.profile.projectStart || 'TBD',
                    contract_id: 'Will be generated when you sign the contract'
                };

                console.log('📧 Sending job acceptance email to:', userData.profile.email);

                // Send email using EmailJS
                if (typeof emailjs !== 'undefined') {
                    try {
                        const response = await emailjs.send(
                            EMAILJS_CONFIG.serviceId, 
                            EMAILJS_CONFIG.jobAcceptanceTemplateId, 
                            emailParams
                        );
                        
                        console.log('✅ Job acceptance email sent successfully:', response);
                        
                        // Show success message
                        setTimeout(() => {
                            showNotification(`🎉 User approved and email sent!\n\n📧 Email sent to: ${userData.profile.email}\n\n✅ The user will receive the job acceptance email with contract signing instructions.`, 'success');
                        }, 1000);
                        
                    } catch (emailError) {
                        console.error('❌ EmailJS error:', emailError);
                        showNotification(`✅ User saved successfully!\n\n⚠️ Email failed to send: ${emailError.message}\n\nPlease check EmailJS template configuration.`, 'warning');
                    }
                    
                } else {
                    console.warn('⚠️ EmailJS not available, skipping email send');
                    showNotification('✅ User saved successfully!\n\n⚠️ EmailJS not configured - please set up EmailJS to send automatic job acceptance emails.', 'warning');
                }
                
            } catch (error) {
                console.error('❌ Error sending job acceptance email:', error);
                showNotification('✅ User saved successfully!\n\n⚠️ Email sending failed. Please check EmailJS configuration.', 'warning');
            }
        }

        // Approve existing user (for users already in the system)
        async function approveUser(userName) {
            const userData = users[userName];
            if (!userData) {
                showNotification('User not found', 'error');
                return;
            }
            
            if (confirm(`Are you sure you want to approve ${userName}?\n\nThis will send them a job acceptance email with contract signing instructions.`)) {
                // Update approval date if not set
                if (!userData.profile.approvedDate) {
                    userData.profile.approvedDate = new Date().toISOString().split('T')[0];
                }
                
                // Send job acceptance email
                sendJobAcceptanceEmail(userName, userData);
                
                // Save updated user data
                localStorage.setItem('users', JSON.stringify(users));
                await updateUsersOnGitHub();
                displayUsers();
                
                showNotification(`✅ ${userName} approved successfully!`, 'success');
            }
        }

        // Approve existing freelancer (for freelancers already in the system) - LEGACY
        function approveFreelancer(index) {
            const freelancer = freelancers[index];
            
            if (confirm(`Are you sure you want to approve ${freelancer.name}?\n\nThis will send them a job acceptance email with contract signing instructions.`)) {
                // Update approval date if not set
                if (!freelancer.approvedDate) {
                    freelancer.approvedDate = new Date().toISOString().split('T')[0];
                }
                
                // Send job acceptance email
                sendJobAcceptanceEmail(freelancer);
                
                // Save updated freelancer data
                localStorage.setItem('freelancers', JSON.stringify(freelancers));
                displayFreelancers();
            }
        }

        // Edit freelancer
        function editFreelancer(index) {
            const freelancer = freelancers[index];
            document.getElementById('freelancerName').value = freelancer.name;
            document.getElementById('freelancerEmail').value = freelancer.email;
            document.getElementById('freelancerPassword').value = freelancer.password || 'Password will be set during contract signing';
            document.getElementById('freelancerRole').value = freelancer.role;
            document.getElementById('freelancerLocation').value = freelancer.location;
            document.getElementById('projectStart').value = freelancer.projectStart;
            document.getElementById('freelancerRate').value = freelancer.rate;
            document.getElementById('approvedDate').value = freelancer.approvedDate;
            editingFreelancerIndex = index;
        }

        // Delete freelancer
        async function deleteFreelancer(index) {
            const freelancer = freelancers[index];
            if (confirm(`Are you sure you want to delete "${freelancer.name}"?`)) {
                try {
                    // Remove freelancer from freelancers array
                    freelancers.splice(index, 1);
                    localStorage.setItem('freelancers', JSON.stringify(freelancers));
                    
                    // Update freelancers.json on GitHub
                    await updateFreelancersOnGitHub();
                    
                    displayFreelancers();
                    showNotification('Freelancer deleted successfully and freelancers.json updated on GitHub!', 'success');
                } catch (error) {
                    console.error('❌ Error deleting freelancer:', error);
                    showNotification(`Error deleting freelancer: ${error.message}. The freelancer was removed locally but the GitHub update failed.`, 'error');
                    displayFreelancers(); // Still update the display
                }
            }
        }

        // Manual refresh function
        async function refreshFreelancers() {
            console.log('🔄 Manually refreshing freelancers...');
            
            // Clear any cached data
            localStorage.removeItem('freelancers');
            
            // Clear browser cache for freelancers.json
            if ('caches' in window) {
                try {
                    const cacheNames = await caches.keys();
                    for (const cacheName of cacheNames) {
                        const cache = await caches.open(cacheName);
                        await cache.delete('freelancers.json');
                    }
                    console.log('🗑️ Cleared browser cache for freelancers.json');
                } catch (error) {
                    console.warn('⚠️ Could not clear cache:', error);
                }
            }
            
            await loadUsers();
        }

        // Clear contract form
        function clearContractForm() {
            document.getElementById('contractForm').reset();
            document.getElementById('freelancerLocation').value = 'Atlanta Area';
            document.getElementById('projectStart').value = 'TBD';
            document.getElementById('contractUrl').value = 'contract.html';
            document.getElementById('freelancerPassword').value = '';
            editingFreelancerIndex = -1;
        }





        // ==================== JOB ASSIGNMENT FUNCTIONALITY ====================

        // Populate freelancer dropdown for job assignment
        function populateJobAssignmentDropdown() {
            const select = document.getElementById('jobAssignmentFreelancer');
            if (!select) return;
            
            select.innerHTML = '<option value="">Choose a freelancer...</option>';
            freelancers.forEach((freelancer, index) => {
                const option = document.createElement('option');
                option.value = index;
                option.textContent = freelancer.name;
                select.appendChild(option);
            });
        }

        // Handle freelancer selection for job assignment
        function handleFreelancerSelection() {
            const select = document.getElementById('jobAssignmentFreelancer');
            const jobInfo = document.getElementById('freelancerJobInfo');
            const currentJobsList = document.getElementById('currentJobsList');
            
            if (!select || !jobInfo || !currentJobsList) return;
            
            const selectedIndex = select.value;
            if (selectedIndex === '') {
                jobInfo.style.display = 'none';
                return;
            }
            
            const freelancer = freelancers[selectedIndex];
            jobInfo.style.display = 'block';
            
            if (freelancer.jobs && freelancer.jobs.length > 0) {
                const jobsHTML = freelancer.jobs.map((job, jobIndex) => `
                    <div style="background: rgba(0,0,0,0.3); padding: 0.75rem; border-radius: 6px; margin-bottom: 0.5rem; border: 1px solid rgba(255,178,0,0.2);">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                            <strong style="color: #FFB200;">${job.id}</strong>
                            ${job.id === freelancer.primaryJob ? '<span style="background: #22c55e; color: white; padding: 0.2rem 0.5rem; border-radius: 4px; font-size: 0.8rem;">Primary</span>' : ''}
                        </div>
                        <div style="font-size: 0.9rem; color: rgba(255,255,255,0.8);">
                            <div>🎯 ${job.role || 'No role'}</div>
                            <div>📍 ${job.location || 'No location'}</div>
                            <div>💰 ${job.rate || 'No rate'}</div>
                            <div>📅 ${job.projectStart || 'No date'}</div>
                            <div>📊 ${job.status || 'No status'}</div>
                        </div>
                        <button onclick="removeJobFromFreelancer(${selectedIndex}, ${jobIndex})" style="background: #ef4444; color: white; border: none; padding: 0.25rem 0.5rem; border-radius: 4px; font-size: 0.8rem; margin-top: 0.5rem;">Remove</button>
                    </div>
                `).join('');
                currentJobsList.innerHTML = jobsHTML;
            } else {
                currentJobsList.innerHTML = '<p style="color: rgba(255,255,255,0.6); font-style: italic;">No jobs assigned yet</p>';
            }
        }

        // Add job to freelancer
        function addJobToFreelancer() {
            const freelancerIndex = document.getElementById('jobAssignmentFreelancer').value;
            if (freelancerIndex === '') {
                showNotification('Please select a freelancer first.', 'warning');
                return;
            }
            
            // Format the project start date for better display
            const projectStartInput = document.getElementById('assignmentJobProjectStart').value;
            let formattedProjectStart = projectStartInput;
            if (projectStartInput) {
                try {
                    const date = new Date(projectStartInput);
                    formattedProjectStart = date.toLocaleString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                    });
                } catch (e) {
                    // If date parsing fails, use the original value
                    formattedProjectStart = projectStartInput;
                }
            }
            
            const jobData = {
                id: document.getElementById('jobId').value,
                role: document.getElementById('jobRole').value,
                location: document.getElementById('assignmentJobLocation').value,
                projectStart: formattedProjectStart,
                rate: document.getElementById('assignmentJobRate').value,
                status: document.getElementById('assignmentJobStatus').value,
                projectType: document.getElementById('assignmentJobProjectType').value,
                description: document.getElementById('assignmentJobDescription').value
            };
            
            if (!jobData.id.trim()) {
                showNotification('Job ID is required.', 'error');
                return;
            }
            
            const freelancer = freelancers[freelancerIndex];
            if (!freelancer.jobs) {
                freelancer.jobs = [];
            }
            
            // Check if job ID already exists
            const existingJobIndex = freelancer.jobs.findIndex(job => job.id === jobData.id);
            if (existingJobIndex >= 0) {
                if (confirm('A job with this ID already exists. Do you want to replace it?')) {
                    freelancer.jobs[existingJobIndex] = jobData;
                } else {
                    return;
                }
            } else {
                freelancer.jobs.push(jobData);
            }
            
            // Set as primary job if checkbox is checked
            if (document.getElementById('primaryJobCheckbox').checked) {
                freelancer.primaryJob = jobData.id;
            }
            
            // Save to localStorage
            localStorage.setItem('freelancers', JSON.stringify(freelancers));
            
            // Refresh displays
            displayFreelancers();
            handleFreelancerSelection();
            
            // Clear form
            document.getElementById('jobAssignmentForm').reset();
            
            showNotification(`✅ Job "${jobData.id}" added to ${freelancer.name}!`, 'success');
        }

        // Remove job from freelancer
        function removeJobFromFreelancer(freelancerIndex, jobIndex) {
            const freelancer = freelancers[freelancerIndex];
            const job = freelancer.jobs[jobIndex];
            
            if (confirm(`Are you sure you want to remove job "${job.id}" from ${freelancer.name}?`)) {
                freelancer.jobs.splice(jobIndex, 1);
                
                // If this was the primary job, clear it
                if (freelancer.primaryJob === job.id) {
                    freelancer.primaryJob = null;
                }
                
                // Save to localStorage
                localStorage.setItem('freelancers', JSON.stringify(freelancers));
                
                // Refresh displays
                displayFreelancers();
                handleFreelancerSelection();
                
                showNotification(`✅ Job "${job.id}" removed from ${freelancer.name}!`, 'success');
            }
        }

        // Initialize job assignment functionality
        document.addEventListener('DOMContentLoaded', function() {
            const jobAssignmentForm = document.getElementById('jobAssignmentForm');
            const freelancerSelect = document.getElementById('jobAssignmentFreelancer');
            
            if (jobAssignmentForm) {
                jobAssignmentForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    addJobToFreelancer();
                });
            }
            
            if (freelancerSelect) {
                freelancerSelect.addEventListener('change', handleFreelancerSelection);
            }
        });



        // ==================== QUICK IMPORT FROM EMAIL ====================

        // Parse email data and auto-fill form
        function parseEmailData() {
            const emailText = document.getElementById('quickImportData').value;
            if (!emailText.trim()) {
                showNotification('Please paste the contract data from your email first.', 'warning');
                return;
            }

            // Try to extract contract information using regex patterns
            const extractData = (text) => {
                const patterns = {
                    freelancer_name: /(?:Freelancer|Name):\s*([^\n\r]+)/i,
                    freelancer_email: /(?:Email):\s*([^\n\r\s]+)/i,
                    role: /(?:Role):\s*([^\n\r]+)/i,
                    location: /(?:Location):\s*([^\n\r]+)/i,
                    rate: /(?:Rate):\s*([^\n\r]+)/i,
                    contract_id: /(?:Contract ID):\s*([^\n\r]+)/i,
                    signed_date: /(?:Signed):\s*([^\n\r]+)/i
                };

                const extracted = {};
                for (const [key, pattern] of Object.entries(patterns)) {
                    const match = text.match(pattern);
                    if (match) {
                        extracted[key] = match[1].trim();
                    }
                }
                return extracted;
            };

            const data = extractData(emailText);
            
            // Auto-fill the upload form fields
            if (data.freelancer_name) {
                document.getElementById('uploadFreelancerName').value = data.freelancer_name;
            }
            if (data.freelancer_email) {
                document.getElementById('uploadFreelancerEmail').value = data.freelancer_email;
            }
            if (data.role) {
                document.getElementById('uploadRole').value = data.role;
            }
            if (data.location) {
                document.getElementById('uploadLocation').value = data.location;
            }
            if (data.rate) {
                document.getElementById('uploadRate').value = data.rate;
            }
            if (data.signed_date) {
                // Try to parse and format the date
                try {
                    const date = new Date(data.signed_date);
                    if (!isNaN(date.getTime())) {
                        document.getElementById('uploadDate').value = date.toISOString().split('T')[0];
                    }
                } catch (e) {
                    // If date parsing fails, just use today's date
                    document.getElementById('uploadDate').value = new Date().toISOString().split('T')[0];
                }
            }
            
            // Add contract ID to notes if available
            if (data.contract_id) {
                const notesField = document.getElementById('uploadNotes');
                notesField.value = `Contract ID: ${data.contract_id}\n${notesField.value}`.trim();
            }

            // Clear the import text area
            document.getElementById('quickImportData').value = '';
            
            // Show success message
            const filledFields = Object.values(data).filter(v => v).length;
            if (filledFields > 0) {
                showNotification(`✅ Auto-filled ${filledFields} fields! Now upload your PDF file.`, 'success');
                
                // Scroll to the form
                document.getElementById('contractDetailsForm').style.display = 'block';
                document.getElementById('contractDetailsForm').scrollIntoView({ behavior: 'smooth' });
            } else {
                showNotification('❌ Could not extract contract data. Please check the format and try again.', 'error');
            }
        }




        


        // Show update status message
        function showUpdateStatus(message, type) {
            const statusDiv = document.createElement('div');
            statusDiv.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 1rem 1.5rem;
                border-radius: 8px;
                color: white;
                font-weight: 600;
                z-index: 10000;
                background: ${type === 'success' ? 'linear-gradient(135deg, #22c55e, #16a34a)' : 'linear-gradient(135deg, #ef4444, #dc2626)'};
                box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            `;
            statusDiv.textContent = message;
            
            document.body.appendChild(statusDiv);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (statusDiv.parentNode) {
                    statusDiv.parentNode.removeChild(statusDiv);
                }
            }, 5000);
        }











        // ==================== PROJECT STATUS MANAGEMENT ====================
        
        // Load performance reviews from centralized users.json
        async function loadPerformanceReviews() {
            try {
                console.log('🔄 Loading performance reviews from centralized users.json...');
                console.log('🔍 Current performanceReviews object:', performanceReviews);
                
                // Check for cached data first (5-minute cache)
                const cachedData = sessionStorage.getItem('cachedPerformanceReviews');
                const cacheTimestamp = sessionStorage.getItem('cachedPerformanceReviewsTimestamp');
                const now = Date.now();
                const cacheAge = now - (parseInt(cacheTimestamp) || 0);
                const cacheValid = cacheAge < 5 * 60 * 1000; // 5 minutes
                
                if (cachedData && cacheValid) {
                    console.log('✅ Using cached performance reviews (age:', Math.round(cacheAge / 1000), 'seconds)');
                    performanceReviews = JSON.parse(cachedData);
                    return;
                }
                
                // Load from centralized users.json
                const response = await fetch('users.json');
                if (response.ok) {
                    const usersData = await response.json();
                    performanceReviews = {};
                    
                    // Extract performance reviews from users data
                    for (const [userName, userData] of Object.entries(usersData.users)) {
                        if (userData.performance && userData.profile && userData.profile.email) {
                            performanceReviews[userData.profile.email] = userData.performance;
                            console.log(`✅ Found performance review for: ${userName} (${userData.profile.email})`);
                        }
                    }
                    
                    console.log('✅ Performance reviews loaded from centralized users.json:', Object.keys(performanceReviews).length, 'reviews');
                    
                    // Cache the data
                    sessionStorage.setItem('cachedPerformanceReviews', JSON.stringify(performanceReviews));
                    sessionStorage.setItem('cachedPerformanceReviewsTimestamp', now.toString());
                } else {
                    console.warn('⚠️ Could not load users.json, using empty object');
                    performanceReviews = {};
                }
            } catch (error) {
                console.error('❌ Error loading performance reviews from centralized data:', error);
                performanceReviews = {};
            }
        }



        // Load project status from users data (no longer needed as separate file)
        async function loadProjectStatus() {
            // Project status is now part of the users data structure
            console.log('✅ Project status loaded from users data');
        }
        

        
        // Update project status for a specific job
        async function updateProjectStatus(userName, jobId, newStatus, paymentStatus = null) {
            if (!users[userName]) {
                users[userName] = {
                    profile: {},
                    contract: {},
                    jobs: {},
                    paymentMethod: null
                };
            }
            
            if (!users[userName].jobs) {
                users[userName].jobs = {};
            }
            
            if (!users[userName].jobs[jobId]) {
                // Create job entry if it doesn't exist
                const userData = users[userName];
                if (userData) {
                    // Create a job from user's primary data
                    const job = {
                        id: jobId,
                        role: userData.profile?.role || 'General',
                        location: userData.profile?.location || 'Not specified',
                        projectStart: userData.profile?.projectStart || 'Not specified',
                        rate: userData.profile?.rate || 'Not specified',
                        projectType: (userData.profile?.role || 'General') + ' Project',
                        description: `Primary assignment for ${userName}`
                    };
                    
                    users[userName].jobs[jobId] = {
                        id: job.id,
                        role: job.role,
                        location: job.location,
                        projectStart: job.projectStart,
                        rate: job.rate,
                        projectStatus: newStatus,
                        paymentStatus: paymentStatus || 'pending',
                        completionDate: newStatus === 'completed' ? new Date().toISOString().split('T')[0] : null,
                        paymentDate: paymentStatus === 'paid' ? new Date().toISOString().split('T')[0] : null,
                        projectType: job.projectType || 'General',
                        description: job.description || ''
                    };
                }
            } else {
                // Update existing job
                users[userName].jobs[jobId].projectStatus = newStatus;
                if (paymentStatus) {
                    users[userName].jobs[jobId].paymentStatus = paymentStatus;
                }
                
                if (newStatus === 'completed') {
                    users[userName].jobs[jobId].completionDate = new Date().toISOString().split('T')[0];
                }
                
                if (paymentStatus === 'paid') {
                    users[userName].jobs[jobId].paymentDate = new Date().toISOString().split('T')[0];
                }
            }
            
            // Save to localStorage
            localStorage.setItem('users', JSON.stringify(users));
            
            // Update GitHub
            await updateUsersOnGitHub();
            
            console.log(`✅ Updated project status for ${userName} - ${jobId}: ${newStatus}`);
                            console.log(`✅ Project status updated for ${userName} - ${jobId}: ${newStatus}`);
            
            // Add notification for user about status change
            await addNotification(
                'Project Status Updated',
                `Your project status has been updated to "${newStatus}" by admin`,
                'project_status_updated',
                {
                    userName: userName,
                    userEmail: users[userName]?.profile?.email,
                    jobId: jobId,
                    newStatus: newStatus,
                    actionRequired: false,
                    priority: 'normal'
                }
            );
        }

        // ==================== JOB ASSIGNMENT & PAYMENT MANAGEMENT ====================
        
        // Show performance review modal (works with both username and email)
        function showPerformanceReviewModal(userNameOrEmail) {
            // Immediately dismiss any performance review alerts/popups
            const performanceAlert = document.getElementById('performanceReviewAlert');
            if (performanceAlert) {
                performanceAlert.remove();
            }
            
            console.log('🔍 Performance review modal - Input:', userNameOrEmail);
            console.log('🔍 Performance review modal - Available users:', Object.keys(users));
            
            let userData = users[userNameOrEmail];
            let userEmail = userNameOrEmail;
            let userName = userNameOrEmail;
            
            // If not found by username, try to find by email
            if (!userData) {
                // Search for user by email
                for (const [name, data] of Object.entries(users)) {
                    // Handle both data structures: data.profile?.email and data.email
                    const email = data.profile?.email || data.email;
                    if (email === userNameOrEmail) {
                        userData = data;
                        userName = name;
                        break;
                    }
                }
            } else {
                // If found by username, get the email - handle both data structures
                userEmail = userData.profile?.email || userData.email || userNameOrEmail;
            }
            
            console.log('🔍 Performance review modal - User data:', userData);
            console.log('🔍 Performance review modal - User email:', userEmail);
            console.log('🔍 Performance review modal - User name:', userName);
            
            // If still no user data, try to get review directly by email
            const existingReview = userData ? performanceReviews[userData.profile?.email] : performanceReviews[userNameOrEmail];
            const reviewDate = new Date().toISOString().split('T')[0];
            
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.8);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 1000;
            `;
            
            modal.innerHTML = `
                <div style="background: #1a1a1a; padding: 2rem; border-radius: 16px; max-width: 700px; width: 90%; max-height: 80vh; overflow-y: auto; border: 1px solid rgba(255,178,0,0.3);">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
                        <h2 style="color: #FFB200; margin: 0;"><i class="fas fa-star"></i> Performance Review for ${userName || userEmail}</h2>
                        <button onclick="closeModal(this)" 
                                style="background: none; border: none; color: #FFB200; font-size: 1.5rem; cursor: pointer;">×</button>
                    </div>
                    
                    ${existingReview ? `
                    <div style="background: rgba(255,178,0,0.1); padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem; border: 1px solid rgba(255,178,0,0.3);">
                        <h4 style="color: #FFB200; margin-bottom: 0.5rem;">Existing Review</h4>
                        <div style="color: rgba(255,255,255,0.9);">
                            <div><strong>Date:</strong> ${existingReview.reviewDate || reviewDate}</div>
                            <div><strong>Overall Rating:</strong> ${existingReview.overallRating || 'N/A'}/5</div>
                            <div><strong>Status:</strong> ${existingReview.status || 'completed'}</div>
                            ${existingReview.comments ? `<div><strong>Comments:</strong> ${existingReview.comments}</div>` : ''}
                        </div>
                    </div>
                    ` : ''}
                    
                    <form id="performanceReviewForm">
                        <div style="margin-bottom: 1.5rem;">
                            <h3 style="color: #FFB200; margin-bottom: 1rem;">Category Ratings</h3>
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                                ${['Professionalism', 'Quality', 'Communication', 'Reliability', 'Overall Performance'].map(category => `
                                    <div>
                                        <label style="color: #FFB200; font-weight: bold; display: block; margin-bottom: 0.5rem;">${category}:</label>
                                        <select name="${category.toLowerCase().replace(' ', '_')}" style="width: 100%; padding: 0.5rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 4px;">
                                            <option value="">Select rating</option>
                                            <option value="1" ${existingReview?.categories?.[category] === 1 ? 'selected' : ''}>1 - Poor</option>
                                            <option value="2" ${existingReview?.categories?.[category] === 2 ? 'selected' : ''}>2 - Below Average</option>
                                            <option value="3" ${existingReview?.categories?.[category] === 3 ? 'selected' : ''}>3 - Average</option>
                                            <option value="4" ${existingReview?.categories?.[category] === 4 ? 'selected' : ''}>4 - Good</option>
                                            <option value="5" ${existingReview?.categories?.[category] === 5 ? 'selected' : ''}>5 - Excellent</option>
                                        </select>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                        
                        <div style="margin-bottom: 1.5rem;">
                            <h3 style="color: #FFB200; margin-bottom: 1rem;">Overall Rating</h3>
                            <select name="overall_rating" style="width: 100%; padding: 0.5rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 4px;">
                                <option value="">Select overall rating</option>
                                <option value="1" ${existingReview?.overallRating === 1 ? 'selected' : ''}>1 - Poor</option>
                                <option value="2" ${existingReview?.overallRating === 2 ? 'selected' : ''}>2 - Below Average</option>
                                <option value="3" ${existingReview?.overallRating === 3 ? 'selected' : ''}>3 - Average</option>
                                <option value="4" ${existingReview?.overallRating === 4 ? 'selected' : ''}>4 - Good</option>
                                <option value="5" ${existingReview?.overallRating === 5 ? 'selected' : ''}>5 - Excellent</option>
                            </select>
                        </div>
                        
                        <div style="margin-bottom: 1.5rem;">
                            <h3 style="color: #FFB200; margin-bottom: 1rem;">Comments</h3>
                            <textarea name="comments" rows="4" placeholder="Provide detailed feedback about the freelancer's performance..." style="width: 100%; padding: 0.5rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 4px; resize: vertical;">${existingReview?.comments || ''}</textarea>
                        </div>
                        
                        <div style="margin-bottom: 1.5rem;">
                            <h3 style="color: #FFB200; margin-bottom: 1rem;">Admin Notes (Internal)</h3>
                            <textarea name="admin_notes" rows="3" placeholder="Internal notes for admin reference (not visible to freelancer)..." style="width: 100%; padding: 0.5rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 4px; resize: vertical;">${existingReview?.adminNotes || ''}</textarea>
                        </div>
                        

                        
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" onclick="closeModal(this)" 
                                    style="background: rgba(255,255,255,0.1); color: white; border: 1px solid rgba(255,255,255,0.3); padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer;">
                                Cancel
                            </button>
                            <button type="submit" 
                                    style="background: #FFB200; color: #000; border: none; padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer; font-weight: 600;">
                                ${existingReview ? 'Update Review' : 'Save Review'}
                            </button>
                        </div>
                    </form>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // Handle form submission
            const form = modal.querySelector('#performanceReviewForm');
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                savePerformanceReview(userData.profile?.email, form);
            });
        }

        // Save performance review
        async function savePerformanceReview(userEmail, form) {
            // Validate userEmail is not undefined
            if (!userEmail || userEmail === 'undefined') {
                console.error('❌ Invalid user email for performance review:', userEmail);
                showNotification('Error: Could not determine user email for performance review', 'error');
                return;
            }
            
            console.log('💾 Saving performance review for user email:', userEmail);
            
            const formData = new FormData(form);
            const categories = {};
            
            // Collect category ratings
            ['professionalism', 'quality', 'communication', 'reliability', 'overall_performance'].forEach(category => {
                const value = formData.get(category);
                if (value) {
                    const categoryName = category.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase());
                    categories[categoryName] = parseInt(value);
                }
            });
            
            const reviewData = {
                userEmail: userEmail,
                reviewDate: new Date().toISOString().split('T')[0],
                overallRating: parseInt(formData.get('overall_rating')) || 0,
                categories: categories,
                comments: formData.get('comments') || '',
                adminNotes: formData.get('admin_notes') || '',
                reviewedBy: 'admin',
                lastUpdated: new Date().toISOString()
            };
            
            // Save to performance reviews
            performanceReviews[userEmail] = reviewData;
            
            // Find user by email and update their performance data in centralized system
            let userFound = false;
            for (const [userName, userData] of Object.entries(users)) {
                if (userData.profile && userData.profile.email === userEmail) {
                    // Update user's performance data in centralized system
                    users[userName].performance = reviewData;
                    userFound = true;
                    console.log(`✅ Updated performance data for user: ${userName} (${userEmail})`);
                    break;
                }
            }
            
            if (!userFound) {
                console.warn(`⚠️ Could not find user with email: ${userEmail}`);
            }
            
            // Update centralized users.json on GitHub
            await updateUsersOnGitHub();
            
            // Close modal
            closeModal(form);
            
            // Refresh display
            displayUsers();
            
            // Show notification
            notifyJSONUpdate('users.json', 'created', `performance review for ${userEmail}`);
            
            console.log('✅ Performance review saved for:', userEmail);
        }
        


        // Show job assignment modal
        function showJobAssignmentModal(userName) {
            const userData = users[userName];
            if (!userData) {
                showNotification('User not found', 'error');
                return;
            }

            // Get available jobs from jobs-data.json
            const availableJobs = jobs.filter(job => !userData.jobs || !Object.values(userData.jobs).some(userJob => userJob.id === job.id));
            
            let jobsHTML = '';
            if (availableJobs.length > 0) {
                jobsHTML = availableJobs.map(job => `
                    <div style="background: rgba(0,0,0,0.3); padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border: 1px solid rgba(255,178,0,0.2);">
                        <h4 style="color: #FFB200; margin-bottom: 0.5rem;">${job.title}</h4>
                        <p style="color: rgba(255,255,255,0.8); margin-bottom: 0.5rem;">${job.location}</p>
                        <p style="color: rgba(255,255,255,0.7); font-size: 0.9rem;">${job.eventDate}</p>
                        <button onclick="assignJobToUser('${userName}', '${job.id}')" 
                                style="background: #22c55e; color: white; border: none; padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer;">
                            <i class="fas fa-plus"></i> Assign Job
                        </button>
                    </div>
                `).join('');
            } else {
                jobsHTML = '<p style="color: rgba(255,255,255,0.7);">No available jobs to assign.</p>';
            }

            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.8);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 1000;
            `;
            
            modal.innerHTML = `
                <div style="background: #1a1a1a; padding: 2rem; border-radius: 16px; max-width: 600px; width: 90%; max-height: 80vh; overflow-y: auto; border: 1px solid rgba(255,178,0,0.3);">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
                        <h2 style="color: #FFB200; margin: 0;"><i class="fas fa-briefcase"></i> Assign Jobs to ${userName}</h2>
                        <button onclick="closeModal(this)" 
                                style="background: none; border: none; color: #FFB200; font-size: 1.5rem; cursor: pointer;">×</button>
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <h3 style="color: #FFB200; margin-bottom: 1rem;">Available Jobs:</h3>
                        ${jobsHTML}
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <h3 style="color: #FFB200; margin-bottom: 1rem;">Available Jobs:</h3>
                        ${jobsHTML}
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
        }

        // Assign job to user
        function assignJobToUser(userName, jobId) {
            const userData = users[userName];
            const job = jobs.find(j => j.id === jobId);
            
            if (!userData || !job) {
                showNotification('User or job not found', 'error');
                return;
            }

            // Add job to user's jobs object
            if (!userData.jobs) {
                userData.jobs = {};
            }
            
            const newJob = {
                id: jobId,
                role: job.title,
                location: job.location,
                projectStart: job.date,
                rate: job.rate || '$TBD',
                projectType: job.title,
                description: job.description || `Assigned job: ${job.title}`,
                status: 'upcoming'
            };
            
            userData.jobs[jobId] = newJob;
            
            // Update users object
            users[userName] = userData;
            
            // Update localStorage
            localStorage.setItem('users', JSON.stringify(users));
            
            // Update GitHub
            updateUsersOnGitHub();
            
            showNotification(`✅ Job "${job.title}" assigned to ${userName} successfully!`, 'success');
            
            // Close modal
            const modal = document.querySelector('div[style*="position: fixed"]');
            if (modal) {
                modal.remove();
            }
        }

        // Update payment settings
        async function updatePaymentSettings(userName) {
            console.log('🔍 Debugging updatePaymentSettings:');
            console.log('User name:', userName);
            console.log('Available users:', Object.keys(users));
            console.log('User data:', users[userName]);
            
            const userData = users[userName];
            if (!userData) {
                console.error('❌ User not found:', userName);
                showNotification('User not found', 'error');
                return;
            }
            
            const paymentStatus = document.getElementById(`paymentStatus_${userName}`).value;
            
            // Use the enhanced payment status update function
            await updatePaymentStatusWithPerformanceReview(userName, paymentStatus);
        }
        
        // Show project status manager modal
        function showProjectStatusManager(userName) {
            const userData = users[userName];
            if (!userData) {
                showNotification('User not found', 'error');
                return;
            }
            
            // Get jobs from the new users structure
            let jobs = [];
            if (userData.jobs && Object.keys(userData.jobs).length > 0) {
                jobs = Object.values(userData.jobs);
            } else {
                // If no jobs, create a default job from user data
                const defaultJobId = `job-${userName.toLowerCase().replace(/\s+/g, '-')}-default`;
                const defaultJob = {
                    id: defaultJobId,
                    role: userData.profile?.role || 'No role',
                    location: userData.profile?.location || 'No location',
                    projectStart: userData.profile?.projectStart || 'Not set',
                    rate: userData.profile?.rate || 'No rate',
                    projectStatus: 'upcoming',
                    paymentStatus: 'pending',
                    projectType: (userData.profile?.role || 'No role') + ' Project',
                    description: `Primary assignment for ${userName}`
                };
                
                // Add to user's jobs
                if (!userData.jobs) {
                    userData.jobs = {};
                }
                userData.jobs[defaultJobId] = defaultJob;
                jobs = [defaultJob];
                
                console.log(`📋 Created default job for ${userName}:`, defaultJob);
            }
            
            let jobsHTML = '';
            if (jobs.length > 0) {
                jobsHTML = jobs.map(job => `
                    <div style="background: rgba(0,0,0,0.3); padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border: 1px solid rgba(255,178,0,0.2);">
                        <h4 style="color: #FFB200; margin-bottom: 0.5rem;">${job.title || job.role || 'Untitled Project'}</h4>
                        <p style="color: rgba(255,255,255,0.8); margin-bottom: 1rem;">${job.description || 'No description'}</p>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1rem;">
                            <div>
                                <label style="color: #FFB200; font-weight: bold;">Project Status:</label>
                                <select id="projectStatus_${job.id}" style="width: 100%; padding: 0.5rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 4px;">
                                    <option value="upcoming" ${job.projectStatus === 'upcoming' ? 'selected' : ''}>Upcoming</option>
                                    <option value="in-progress" ${job.projectStatus === 'in-progress' ? 'selected' : ''}>In Progress</option>
                                    <option value="completed" ${job.projectStatus === 'completed' ? 'selected' : ''}>Completed</option>
                                    <option value="cancelled" ${job.projectStatus === 'cancelled' ? 'selected' : ''}>Cancelled</option>
                                </select>
                            </div>
                            <div>
                                <label style="color: #FFB200; font-weight: bold;">Payment Status:</label>
                                <select id="paymentStatus_${job.id}" style="width: 100%; padding: 0.5rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 4px;">
                                    <option value="pending" ${job.paymentStatus === 'pending' ? 'selected' : ''}>Pending</option>
                                    <option value="processing" ${job.paymentStatus === 'processing' ? 'selected' : ''}>Processing</option>
                                    <option value="paid" ${job.paymentStatus === 'paid' ? 'selected' : ''}>Paid</option>
                                    <option value="overdue" ${job.paymentStatus === 'overdue' ? 'selected' : ''}>Overdue</option>
                                </select>
                            </div>
                        </div>
                        <button onclick="updateJobStatus('${userName}', '${job.id}')" style="background: linear-gradient(135deg, #22c55e, #16a34a); color: white; border: none; padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer;">
                            Update Status
                        </button>
                    </div>
                `).join('');
            } else {
                jobsHTML = '<p style="color: rgba(255,255,255,0.6); font-style: italic;">No jobs found for this freelancer.</p>';
            }
            
            const modal = document.createElement('div');
            modal.id = 'projectStatusModal';
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0,0,0,0.8);
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: center;
            `;
            
            modal.innerHTML = `
                <div style="
                    background: #1a1a1a;
                    padding: 2rem;
                    border-radius: 12px;
                    max-width: 600px;
                    max-height: 80vh;
                    overflow-y: auto;
                    position: relative;
                    border: 1px solid #FFB200;
                ">
                    <button onclick="closeProjectStatusManager()" 
                            style="
                                position: absolute;
                                top: 1rem;
                                right: 1rem;
                                background: #ef4444;
                                color: white;
                                border: none;
                                padding: 0.5rem;
                                border-radius: 50%;
                                cursor: pointer;
                                width: 30px;
                                height: 30px;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                font-size: 18px;
                                font-weight: bold;
                            ">×</button>
                    <h3 style="color: #FFB200; margin-bottom: 1rem;">📊 Project Status Manager</h3>
                    <h4 style="color: white; margin-bottom: 1rem;">${userName}</h4>
                    ${jobsHTML}
                    
                    <div style="margin-top: 1.5rem; padding-top: 1.5rem; border-top: 1px solid rgba(255,178,0,0.2);">
                        <h3 style="color: #FFB200; margin-bottom: 1rem;">Payment Method Setup:</h3>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1rem;">
                            <div>
                                <label style="color: #FFB200; font-weight: bold;">Payment Method:</label>
                                <input type="text" id="paymentMethod_${userName}" value="${userData?.paymentMethod ? userData.paymentMethod.charAt(0).toUpperCase() + userData.paymentMethod.slice(1) : 'Not Set'}" readonly style="width: 100%; padding: 0.5rem; background: rgba(0,0,0,0.3); border: 1px solid #FFB200; color: white; border-radius: 4px; cursor: not-allowed;">
                            </div>
                            <div>
                                <label style="color: #FFB200; font-weight: bold;">Payment Status:</label>
                                <input type="text" id="userPaymentStatus_${userName}" value="${userData?.paymentStatus ? userData.paymentStatus.charAt(0).toUpperCase() + userData.paymentStatus.slice(1) : 'Pending'}" readonly style="width: 100%; padding: 0.5rem; background: rgba(0,0,0,0.3); border: 1px solid #FFB200; color: white; border-radius: 4px; cursor: not-allowed;">
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // Add click outside to close
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    closeProjectStatusManager();
                }
            });
            
            // Add escape key to close
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closeProjectStatusManager();
                }
            });
        }
        
        // Close project status manager modal
        function closeProjectStatusManager() {
            const modal = document.getElementById('projectStatusModal');
            if (modal) {
                modal.remove();
            }
        }
        
        // Performance Review Management System
        async function showPerformanceReviewManager() {
            // Load performance reviews first
            await loadPerformanceReviews();
            const modal = document.createElement('div');
            modal.id = 'performanceReviewModal';
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0,0,0,0.8);
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: center;
            `;
            
            // Get all performance reviews
            const reviews = performanceReviews || {};
            const reviewsList = Object.entries(reviews).map(([email, review]) => `
                <div style="background: rgba(0,0,0,0.3); padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border: 1px solid rgba(255,178,0,0.2);">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                        <h4 style="color: #FFB200; margin: 0;">${email}</h4>
                        <span style="background: ${review.status === 'completed' ? '#22c55e' : '#f59e0b'}; color: white; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.8rem;">
                            ${review.status === 'completed' ? '✅ Completed' : '⏳ Pending'}
                        </span>
                    </div>
                    <div style="font-size: 0.85rem; color: rgba(255,255,255,0.8); margin-bottom: 0.5rem;">
                        <strong>Overall Rating:</strong> ${review.overallRating}/5 | <strong>Date:</strong> ${review.reviewDate}
                    </div>
                    <div style="display: flex; gap: 0.5rem;">
                        <button onclick="editPerformanceReview('${email}')" style="background: #3b82f6; color: white; border: none; padding: 0.25rem 0.75rem; border-radius: 6px; font-size: 0.8rem; cursor: pointer;">
                            ✏️ Edit
                        </button>
                        <button onclick="deletePerformanceReview('${email}')" style="background: #ef4444; color: white; border: none; padding: 0.25rem 0.75rem; border-radius: 6px; font-size: 0.8rem; cursor: pointer;">
                            🗑️ Delete
                        </button>
                        <button onclick="viewPerformanceReview('${email}')" style="background: #22c55e; color: white; border: none; padding: 0.25rem 0.75rem; border-radius: 6px; font-size: 0.8rem; cursor: pointer;">
                            👁️ View
                        </button>
                    </div>
                </div>
            `).join('');
            
            modal.innerHTML = `
                <div style="
                    background: #1a1a1a;
                    padding: 2rem;
                    border-radius: 12px;
                    max-width: 800px;
                    max-height: 80vh;
                    overflow-y: auto;
                    position: relative;
                    border: 1px solid #FFB200;
                ">
                    <button onclick="closePerformanceReviewManager()" 
                            style="
                                position: absolute;
                                top: 1rem;
                                right: 1rem;
                                background: #ef4444;
                                color: white;
                                border: none;
                                padding: 0.5rem;
                                border-radius: 50%;
                                cursor: pointer;
                                width: 30px;
                                height: 30px;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                font-size: 18px;
                                font-weight: bold;
                            ">×</button>
                    <h3 style="color: #FFB200; margin-bottom: 1rem;">⭐ Performance Review Manager</h3>
                    <p style="color: rgba(255,255,255,0.8); margin-bottom: 1.5rem;">Manage all performance reviews in the system</p>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <button onclick="createNewPerformanceReview()" style="background: linear-gradient(135deg, #22c55e, #16a34a); color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer; font-weight: 600;">
                            ➕ Create New Review
                        </button>
                    </div>
                    
                    <div style="max-height: 400px; overflow-y: auto;">
                        ${reviewsList || '<p style="color: rgba(255,255,255,0.6); font-style: italic;">No performance reviews found.</p>'}
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // Add click outside to close
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    closePerformanceReviewManager();
                }
            });
            
            // Add escape key to close
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closePerformanceReviewManager();
                }
            });
        }
        
        function closePerformanceReviewManager() {
            const modal = document.getElementById('performanceReviewModal');
            if (modal) {
                modal.remove();
            }
        }
        

        

        
        // Create new performance review
        function createNewPerformanceReview() {
            const modal = document.createElement('div');
            modal.id = 'createReviewModal';
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0,0,0,0.8);
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: center;
            `;
            
            modal.innerHTML = `
                <div style="
                    background: #1a1a1a;
                    padding: 2rem;
                    border-radius: 12px;
                    max-width: 600px;
                    max-height: 80vh;
                    overflow-y: auto;
                    position: relative;
                    border: 1px solid #FFB200;
                ">
                    <button onclick="closeCreateReviewModal()" 
                            style="
                                position: absolute;
                                top: 1rem;
                                right: 1rem;
                                background: #ef4444;
                                color: white;
                                border: none;
                                padding: 0.5rem;
                                border-radius: 50%;
                                cursor: pointer;
                                width: 30px;
                                height: 30px;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                font-size: 18px;
                                font-weight: bold;
                            ">×</button>
                    <h3 style="color: #FFB200; margin-bottom: 1rem;">➕ Create New Performance Review</h3>
                    
                    <form id="createReviewForm">
                        <div style="margin-bottom: 1rem;">
                            <label style="color: #FFB200; font-weight: bold; display: block; margin-bottom: 0.5rem;">User Email:</label>
                            <input type="email" id="reviewUserEmail" required style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px;">
                        </div>
                        
                        <div style="margin-bottom: 1rem;">
                            <label style="color: #FFB200; font-weight: bold; display: block; margin-bottom: 0.5rem;">Overall Rating:</label>
                            <select id="reviewOverallRating" required style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px;">
                                <option value="">Select Rating</option>
                                <option value="1">1 - Poor</option>
                                <option value="2">2 - Below Average</option>
                                <option value="3">3 - Average</option>
                                <option value="4">4 - Good</option>
                                <option value="5">5 - Excellent</option>
                                </select>
                            </div>
                        
                        <div style="margin-bottom: 1rem;">
                            <label style="color: #FFB200; font-weight: bold; display: block; margin-bottom: 0.5rem;">Category Ratings:</label>
                            <div id="categoryRatings">
                                <div style="margin-bottom: 0.5rem;">
                                    <label style="color: white; font-size: 0.9rem;">Professionalism:</label>
                                    <select class="category-rating" data-category="Professionalism" style="width: 100%; padding: 0.5rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 4px; margin-top: 0.25rem;">
                                        <option value="1">1</option>
                                        <option value="2">2</option>
                                        <option value="3">3</option>
                                        <option value="4">4</option>
                                        <option value="5">5</option>
                                    </select>
                        </div>
                                <div style="margin-bottom: 0.5rem;">
                                    <label style="color: white; font-size: 0.9rem;">Quality:</label>
                                    <select class="category-rating" data-category="Quality" style="width: 100%; padding: 0.5rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 4px; margin-top: 0.25rem;">
                                        <option value="1">1</option>
                                        <option value="2">2</option>
                                        <option value="3">3</option>
                                        <option value="4">4</option>
                                        <option value="5">5</option>
                                    </select>
                                </div>
                                <div style="margin-bottom: 0.5rem;">
                                    <label style="color: white; font-size: 0.9rem;">Communication:</label>
                                    <select class="category-rating" data-category="Communication" style="width: 100%; padding: 0.5rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 4px; margin-top: 0.25rem;">
                                        <option value="1">1</option>
                                        <option value="2">2</option>
                                        <option value="3">3</option>
                                        <option value="4">4</option>
                                        <option value="5">5</option>
                                    </select>
                                </div>
                                <div style="margin-bottom: 0.5rem;">
                                    <label style="color: white; font-size: 0.9rem;">Reliability:</label>
                                    <select class="category-rating" data-category="Reliability" style="width: 100%; padding: 0.5rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 4px; margin-top: 0.25rem;">
                                        <option value="1">1</option>
                                        <option value="2">2</option>
                                        <option value="3">3</option>
                                        <option value="4">4</option>
                                        <option value="5">5</option>
                                    </select>
                                </div>
                                <div style="margin-bottom: 0.5rem;">
                                    <label style="color: white; font-size: 0.9rem;">Overall Performance:</label>
                                    <select class="category-rating" data-category="Overall Performance" style="width: 100%; padding: 0.5rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 4px; margin-top: 0.25rem;">
                                        <option value="1">1</option>
                                        <option value="2">2</option>
                                        <option value="3">3</option>
                                        <option value="4">4</option>
                                        <option value="5">5</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <div style="margin-bottom: 1rem;">
                            <label style="color: #FFB200; font-weight: bold; display: block; margin-bottom: 0.5rem;">Comments:</label>
                            <textarea id="reviewComments" rows="3" style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px; resize: vertical;"></textarea>
                        </div>
                        
                        <div style="margin-bottom: 1rem;">
                            <label style="color: #FFB200; font-weight: bold; display: block; margin-bottom: 0.5rem;">Admin Notes:</label>
                            <textarea id="reviewAdminNotes" rows="3" style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px; resize: vertical;"></textarea>
                        </div>
                        
                        <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                            <button type="submit" style="background: linear-gradient(135deg, #22c55e, #16a34a); color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer; font-weight: 600;">
                                ✅ Create Review
                            </button>
                            <button type="button" onclick="closeCreateReviewModal()" style="background: rgba(255,255,255,0.1); color: white; border: 1px solid rgba(255,255,255,0.3); padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer;">
                                Cancel
                        </button>
                    </div>
                    </form>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // Handle form submission
            document.getElementById('createReviewForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const userEmail = document.getElementById('reviewUserEmail').value;
                const overallRating = document.getElementById('reviewOverallRating').value;
                const comments = document.getElementById('reviewComments').value;
                const adminNotes = document.getElementById('reviewAdminNotes').value;
                
                // Get category ratings
                const categories = {};
                document.querySelectorAll('.category-rating').forEach(select => {
                    const category = select.dataset.category;
                    const rating = parseInt(select.value);
                    categories[category] = rating;
                });
                
                try {
                    const response = await fetch('/api/performance', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${API_TOKEN}`
                        },
                        body: JSON.stringify({
                            userEmail,
                            overallRating,
                            categories,
                            comments,
                            adminNotes
                        })
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        showNotification('Performance review created successfully!', 'success');
                        closeCreateReviewModal();
                        // Refresh the performance reviews
                        await loadPerformanceReviews();
                        showPerformanceReviewManager();
                    } else if (response.status === 404) {
                        console.error('❌ Performance API endpoint not found (404)');
                        showNotification('Performance API endpoint not available. Please check server configuration.', 'error');
                    } else {
                        const error = await response.json().catch(() => ({ error: 'Unknown error' }));
                        showNotification(`Error: ${error.error}`, 'error');
                    }
                } catch (error) {
                    console.error('Error creating performance review:', error);
                    showNotification('Failed to create performance review. Please check server connection.', 'error');
                }
            });
        }
        
        function closeCreateReviewModal() {
            const modal = document.getElementById('createReviewModal');
            if (modal) {
                modal.remove();
            }
        }
        
        // Edit performance review
        function editPerformanceReview(email) {
            const review = performanceReviews[email];
            if (!review) {
                showNotification('Performance review not found', 'error');
                return;
            }
            
            const modal = document.createElement('div');
            modal.id = 'editReviewModal';
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0,0,0,0.8);
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: center;
            `;
            
            modal.innerHTML = `
                <div style="
                    background: #1a1a1a;
                    padding: 2rem;
                    border-radius: 12px;
                    max-width: 600px;
                    max-height: 80vh;
                    overflow-y: auto;
                    position: relative;
                    border: 1px solid #FFB200;
                ">
                    <button onclick="closeEditReviewModal()" 
                            style="
                                position: absolute;
                                top: 1rem;
                                right: 1rem;
                                background: #ef4444;
                                color: white;
                                border: none;
                                padding: 0.5rem;
                                border-radius: 50%;
                                cursor: pointer;
                                width: 30px;
                                height: 30px;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                font-size: 18px;
                                font-weight: bold;
                            ">×</button>
                    <h3 style="color: #FFB200; margin-bottom: 1rem;">✏️ Edit Performance Review</h3>
                    <p style="color: rgba(255,255,255,0.8); margin-bottom: 1rem;">Editing review for: ${email}</p>
                    
                    <form id="editReviewForm">
                        <div style="margin-bottom: 1rem;">
                            <label style="color: #FFB200; font-weight: bold; display: block; margin-bottom: 0.5rem;">Overall Rating:</label>
                            <select id="editOverallRating" required style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px;">
                                <option value="1" ${review.overallRating === 1 ? 'selected' : ''}>1 - Poor</option>
                                <option value="2" ${review.overallRating === 2 ? 'selected' : ''}>2 - Below Average</option>
                                <option value="3" ${review.overallRating === 3 ? 'selected' : ''}>3 - Average</option>
                                <option value="4" ${review.overallRating === 4 ? 'selected' : ''}>4 - Good</option>
                                <option value="5" ${review.overallRating === 5 ? 'selected' : ''}>5 - Excellent</option>
                            </select>
                        </div>
                        
                        <div style="margin-bottom: 1rem;">
                            <label style="color: #FFB200; font-weight: bold; display: block; margin-bottom: 0.5rem;">Category Ratings:</label>
                            <div id="editCategoryRatings">
                                ${Object.entries(review.categories || {}).map(([category, rating]) => `
                                    <div style="margin-bottom: 0.5rem;">
                                        <label style="color: white; font-size: 0.9rem;">${category}:</label>
                                        <select class="edit-category-rating" data-category="${category}" style="width: 100%; padding: 0.5rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 4px; margin-top: 0.25rem;">
                                            <option value="1" ${rating === 1 ? 'selected' : ''}>1</option>
                                            <option value="2" ${rating === 2 ? 'selected' : ''}>2</option>
                                            <option value="3" ${rating === 3 ? 'selected' : ''}>3</option>
                                            <option value="4" ${rating === 4 ? 'selected' : ''}>4</option>
                                            <option value="5" ${rating === 5 ? 'selected' : ''}>5</option>
                                        </select>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                        
                        <div style="margin-bottom: 1rem;">
                            <label style="color: #FFB200; font-weight: bold; display: block; margin-bottom: 0.5rem;">Comments:</label>
                            <textarea id="editComments" rows="3" style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px; resize: vertical;">${review.comments || ''}</textarea>
                        </div>
                        
                        <div style="margin-bottom: 1rem;">
                            <label style="color: #FFB200; font-weight: bold; display: block; margin-bottom: 0.5rem;">Admin Notes:</label>
                            <textarea id="editAdminNotes" rows="3" style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px; resize: vertical;">${review.adminNotes || ''}</textarea>
                        </div>
                        
                        <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                            <button type="submit" style="background: linear-gradient(135deg, #3b82f6, #2563eb); color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer; font-weight: 600;">
                                💾 Update Review
                            </button>
                            <button type="button" onclick="closeEditReviewModal()" style="background: rgba(255,255,255,0.1); color: white; border: 1px solid rgba(255,255,255,0.3); padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer;">
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // Handle form submission
            document.getElementById('editReviewForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const overallRating = document.getElementById('editOverallRating').value;
                const comments = document.getElementById('editComments').value;
                const adminNotes = document.getElementById('editAdminNotes').value;
                
                // Get category ratings
                const categories = {};
                document.querySelectorAll('.edit-category-rating').forEach(select => {
                    const category = select.dataset.category;
                    const rating = parseInt(select.value);
                    categories[category] = rating;
                });
                
                try {
                    const response = await fetch(`/api/performance/${email}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${API_TOKEN}`
                        },
                        body: JSON.stringify({
                            overallRating,
                            categories,
                            comments,
                            adminNotes
                        })
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        showNotification('Performance review updated successfully!', 'success');
                        closeEditReviewModal();
                        // Refresh the performance reviews
                        await loadPerformanceReviews();
                        showPerformanceReviewManager();
                    } else {
                        const error = await response.json();
                        showNotification(`Error: ${error.error}`, 'error');
                    }
                } catch (error) {
                    console.error('Error updating performance review:', error);
                    showNotification('Failed to update performance review', 'error');
                }
            });
        }
        
        function closeEditReviewModal() {
            const modal = document.getElementById('editReviewModal');
            if (modal) {
                modal.remove();
            }
        }
        
        // Delete performance review (works with orphaned reviews)
        async function deletePerformanceReview(email) {
            if (confirm(`Are you sure you want to delete the performance review for ${email}?`)) {
                try {
                    // Remove from local performanceReviews object
                    if (performanceReviews[email]) {
                        delete performanceReviews[email];
                        console.log(`✅ Performance review for ${email} deleted from local data`);
                        
                        // Try API first, but don't fail if it doesn't work
                        try {
                            const response = await fetch(`/api/performance/${email}`, {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });
                            
                            if (response.ok) {
                                console.log(`✅ Performance review for ${email} deleted via API`);
                            } else {
                                console.warn(`⚠️ API deletion failed for ${email}, but local deletion succeeded`);
                            }
                        } catch (apiError) {
                            console.warn(`⚠️ API deletion failed for ${email}, but local deletion succeeded:`, apiError);
                        }
                        
                        // Update GitHub with the modified data
                        await updatePerformanceReviewsFile();
                        
                        showNotification(`Performance review for ${email} deleted successfully!`, 'success');
                        
                        // Refresh the performance reviews display
                        showPerformanceReviewManager();
                    } else {
                        showNotification(`Performance review for ${email} not found`, 'error');
                    }
                } catch (error) {
                    console.error('Error deleting performance review:', error);
                    showNotification(`Failed to delete performance review: ${error.message}`, 'error');
                }
            }
        }
        
        // View performance review details
        function viewPerformanceReview(email) {
            const review = performanceReviews[email];
            if (!review) {
                showNotification('Performance review not found', 'error');
                return;
            }
            
            const modal = document.createElement('div');
            modal.id = 'viewReviewModal';
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0,0,0,0.8);
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: center;
            `;
            
            const reviewDate = review.reviewDate ? new Date(review.reviewDate).toLocaleDateString() : 'N/A';
            const lastUpdated = review.lastUpdated ? new Date(review.lastUpdated).toLocaleString() : 'N/A';
            
            modal.innerHTML = `
                <div style="
                    background: #1a1a1a;
                    padding: 2rem;
                    border-radius: 12px;
                    max-width: 600px;
                    max-height: 80vh;
                    overflow-y: auto;
                    position: relative;
                    border: 1px solid #FFB200;
                ">
                    <button onclick="closeViewReviewModal()" 
                            style="
                                position: absolute;
                                top: 1rem;
                                right: 1rem;
                                background: #ef4444;
                                color: white;
                                border: none;
                                padding: 0.5rem;
                                border-radius: 50%;
                                cursor: pointer;
                                width: 30px;
                                height: 30px;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                font-size: 18px;
                                font-weight: bold;
                            ">×</button>
                    <h3 style="color: #FFB200; margin-bottom: 1rem;">👁️ Performance Review Details</h3>
                    <p style="color: rgba(255,255,255,0.8); margin-bottom: 1rem;">Review for: ${email}</p>
                    
                    <div style="background: rgba(0,0,0,0.3); padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">
                        <h4 style="color: #FFB200; margin-bottom: 0.5rem;">Overall Rating</h4>
                        <div style="font-size: 2rem; color: #FFB200; margin-bottom: 0.5rem;">${review.overallRating}/5</div>
                        <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">
                            Review Date: ${reviewDate} | Last Updated: ${lastUpdated}
                        </div>
                    </div>
                    
                    <div style="background: rgba(0,0,0,0.3); padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">
                        <h4 style="color: #FFB200; margin-bottom: 0.5rem;">Category Ratings</h4>
                        ${Object.entries(review.categories || {}).map(([category, rating]) => `
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                                <span style="color: white;">${category}:</span>
                                <span style="color: #FFB200; font-weight: bold;">${rating}/5</span>
                            </div>
                        `).join('')}
                    </div>
                    
                    ${review.comments ? `
                        <div style="background: rgba(0,0,0,0.3); padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">
                            <h4 style="color: #FFB200; margin-bottom: 0.5rem;">Comments</h4>
                            <p style="color: white; line-height: 1.5;">${review.comments}</p>
                        </div>
                    ` : ''}
                    
                    ${review.adminNotes ? `
                        <div style="background: rgba(0,0,0,0.3); padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">
                            <h4 style="color: #FFB200; margin-bottom: 0.5rem;">Admin Notes</h4>
                            <p style="color: white; line-height: 1.5;">${review.adminNotes}</p>
                        </div>
                    ` : ''}
                    
                    <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                        <button onclick="editPerformanceReview('${email}')" style="background: linear-gradient(135deg, #3b82f6, #2563eb); color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer; font-weight: 600;">
                            ✏️ Edit Review
                        </button>
                        <button onclick="closeViewReviewModal()" style="background: rgba(255,255,255,0.1); color: white; border: 1px solid rgba(255,255,255,0.3); padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer;">
                            Close
                        </button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
        }
        
        function closeViewReviewModal() {
            const modal = document.getElementById('viewReviewModal');
            if (modal) {
                modal.remove();
            }
        }
        
        // Update job status from modal
        async function updateJobStatus(freelancerName, jobId) {
            console.log('🔍 Updating job status for:', freelancerName, jobId);
            
            const projectStatusSelect = document.getElementById(`projectStatus_${jobId}`);
            const paymentStatusSelect = document.getElementById(`paymentStatus_${jobId}`);
            
            if (!projectStatusSelect) {
                showNotification('Project status element not found', 'error');
                return;
            }
            
            const newProjectStatus = projectStatusSelect.value;
            const newPaymentStatus = paymentStatusSelect ? paymentStatusSelect.value : null;
            
            console.log('📊 New status values:', {
                projectStatus: newProjectStatus,
                paymentStatus: newPaymentStatus,
                freelancerName: freelancerName,
                jobId: jobId
            });
            
            // Update the job in the user's jobs
            if (users[freelancerName] && users[freelancerName].jobs && users[freelancerName].jobs[jobId]) {
                users[freelancerName].jobs[jobId].projectStatus = newProjectStatus;
                
                // Update payment status if available
                if (newPaymentStatus) {
                    users[freelancerName].jobs[jobId].paymentStatus = newPaymentStatus;
                }
                
                // Save to localStorage
                localStorage.setItem('users', JSON.stringify(users));
                
                // Update GitHub
                console.log('🔄 Saving to GitHub...');
                await updateUsersOnGitHub();
                console.log('✅ GitHub update completed');
                
                // Immediately update UI without waiting for next refresh cycle
                displayUsers();
                
                // Close modal
                document.querySelector('div[style*="position: fixed"]').remove();
                
                console.log(`✅ Updated project status for ${freelancerName} - ${jobId}\nProject: ${newProjectStatus}`);
                
                // Check for performance review if payment status is "paid"
                if (newPaymentStatus === 'paid') {
                    console.log(`⭐ Payment completed for ${freelancerName}, triggering performance review workflow...`);
                    
                    // Add immediate notification
                    addNotification(
                        'Performance Review Needed',
                        `${freelancerName} has completed a paid project and needs a performance review.`,
                        'performance'
                    );
                    
                    // Performance review alerts are now handled by the notification system
                    
                    // Trigger immediate performance review check
                    setTimeout(async () => {
                        await checkForNewPerformanceReviews();
                    }, 1000);
                    
                    showNotification(`⭐ Performance review workflow triggered for ${freelancerName}`, 'info');
                }
                
                // Refresh the display
                displayUsers();
            } else {
                showNotification('Job not found in user data', 'error');
            }
        }
        
        // ==================== AUTOMATIC JSON GENERATION ====================
        
        // Initialize dashboard on page load
        document.addEventListener('DOMContentLoaded', async function() {
            // Check authentication status
            const session = sessionStorage.getItem('adminDashboardAuthenticated');
            if (session === 'true') {
                isAuthenticated = true;
                showAdminInterface();
                
                // Initialize sophisticated notification system
                await initializeNotificationSystem();
                
                // Initialize bank viewer
                try {
                    window.adminBankViewer = new AdminBankViewer();
                    console.log('✅ AdminBankViewer initialized successfully');
                } catch (error) {
                    console.error('❌ Error initializing AdminBankViewer:', error);
                    window.adminBankViewer = null;
                }
                
                // Close notification dropdown when clicking outside
                document.addEventListener('click', function(event) {
                    const container = document.querySelector('.notification-container');
                    const dropdown = document.getElementById('notificationDropdown');
                    if (container && dropdown && !container.contains(event.target)) {
                        dropdown.style.display = 'none';
                    }
                });
            }
        });

        // Show user bank details
        async function showUserBankDetails(userName) {
            try {
                console.log('🔍 showUserBankDetails called for:', userName);
                
                const userData = users[userName];
                if (!userData) {
                    console.error('❌ User not found:', userName);
                    showNotification('User not found', 'error');
                    return;
                }
                
                console.log('✅ User data found:', userData);
                
                if (window.adminBankViewer) {
                    console.log('✅ AdminBankViewer is available');
                    await window.adminBankViewer.showUserBankDetails(userName, userData);
                } else {
                    console.error('❌ Bank viewer not initialized');
                    showNotification('Bank viewer not initialized', 'error');
                }
            } catch (error) {
                console.error('❌ Error showing bank details:', error);
                showNotification('Error loading bank details: ' + error.message, 'error');
            }
        }

        // ==================== PROFESSIONAL NOTIFICATION SYSTEM ====================
        
        // Enhanced notification system to replace all alert() calls
        function showNotification(message, type = 'info', duration = 5000) {
            const notification = document.createElement('div');
            const icon = getNotificationIcon(type);
            const colors = getNotificationColors(type);
            
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 1rem 1.5rem;
                border-radius: 12px;
                color: white;
                font-weight: 600;
                z-index: 10000;
                background: ${colors.background};
                box-shadow: 0 8px 32px rgba(0,0,0,0.3);
                border: 1px solid ${colors.border};
                max-width: 400px;
                min-width: 300px;
                backdrop-filter: blur(10px);
                transform: translateX(100%);
                transition: transform 0.3s ease-out;
                font-family: 'Poppins', sans-serif;
            `;
            
            notification.innerHTML = `
                <div style="display: flex; align-items: flex-start; gap: 12px;">
                    <div style="font-size: 1.2rem; margin-top: 2px;">${icon}</div>
                    <div style="flex: 1;">
                        <div style="font-size: 0.9rem; opacity: 0.9; margin-bottom: 4px; text-transform: uppercase; letter-spacing: 0.5px;">
                            ${type.toUpperCase()}
                        </div>
                        <div style="font-size: 0.95rem; line-height: 1.4;">
                            ${message}
                        </div>
                    </div>
                    <button onclick="this.parentElement.parentElement.remove()" 
                            style="
                                background: rgba(255,255,255,0.2);
                                color: white;
                                border: none;
                                padding: 4px;
                                border-radius: 50%;
                                cursor: pointer;
                                width: 24px;
                                height: 24px;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                font-size: 14px;
                                margin-left: 8px;
                                transition: background 0.2s;
                            "
                            onmouseover="this.style.background='rgba(255,255,255,0.3)'"
                            onmouseout="this.style.background='rgba(255,255,255,0.2)'">
                        ×
                    </button>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            // Animate in
            setTimeout(() => {
                notification.style.transform = 'translateX(0)';
            }, 100);
            
            // Auto-remove after duration
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.style.transform = 'translateX(100%)';
                    setTimeout(() => {
                        if (notification.parentNode) {
                            notification.parentNode.removeChild(notification);
                        }
                    }, 300);
                }
            }, duration);
        }
        
        function getNotificationIcon(type) {
            const icons = {
                success: '✅',
                error: '❌',
                warning: '⚠️',
                info: 'ℹ️',
                loading: '🔄',
                contract: '📄',
                payment: '💰',
                performance: '⭐',
                github: '🐙',
                email: '📧',
                job: '🎯',
                freelancer: '👤'
            };
            return icons[type] || icons.info;
        }
        
        function getNotificationColors(type) {
            const colors = {
                success: {
                    background: 'linear-gradient(135deg, #22c55e, #16a34a)',
                    border: 'rgba(34, 197, 94, 0.3)'
                },
                error: {
                    background: 'linear-gradient(135deg, #ef4444, #dc2626)',
                    border: 'rgba(239, 68, 68, 0.3)'
                },
                warning: {
                    background: 'linear-gradient(135deg, #f59e0b, #d97706)',
                    border: 'rgba(245, 158, 11, 0.3)'
                },
                info: {
                    background: 'linear-gradient(135deg, #3b82f6, #2563eb)',
                    border: 'rgba(59, 130, 246, 0.3)'
                },
                loading: {
                    background: 'linear-gradient(135deg, #8b5cf6, #7c3aed)',
                    border: 'rgba(139, 92, 246, 0.3)'
                },
                contract: {
                    background: 'linear-gradient(135deg, #06b6d4, #0891b2)',
                    border: 'rgba(6, 182, 212, 0.3)'
                },
                payment: {
                    background: 'linear-gradient(135deg, #10b981, #059669)',
                    border: 'rgba(16, 185, 129, 0.3)'
                },
                performance: {
                    background: 'linear-gradient(135deg, #f59e0b, #d97706)',
                    border: 'rgba(245, 158, 11, 0.3)'
                },
                github: {
                    background: 'linear-gradient(135deg, #333, #24292e)',
                    border: 'rgba(51, 51, 51, 0.3)'
                },
                email: {
                    background: 'linear-gradient(135deg, #ec4899, #db2777)',
                    border: 'rgba(236, 72, 153, 0.3)'
                },
                job: {
                    background: 'linear-gradient(135deg, #8b5cf6, #7c3aed)',
                    border: 'rgba(139, 92, 246, 0.3)'
                },
                freelancer: {
                    background: 'linear-gradient(135deg, #06b6d4, #0891b2)',
                    border: 'rgba(6, 182, 212, 0.3)'
                }
            };
            return colors[type] || colors.info;
        }
        
        // Enhanced showUpdateStatus function (backward compatibility)
        function showUpdateStatus(message, type) {
            showNotification(message, type);
        }
        
        // Replace all alert() calls with professional notifications
        function showAlert(message, type = 'info') {
            showNotification(message, type);
        }

        // ==================== SOPHISTICATED NOTIFICATION SYSTEM ====================
        
        // Centralized notification system with real-time updates
        let notifications = [];
        let notificationUpdateInterval;
        
        // Initialize notification system
        async function initializeNotificationSystem() {
            console.log('🔔 Initializing sophisticated notification system...');
            await loadNotifications();
            startNotificationPolling();
            updateNotificationBadge();
            updateNotificationList();
        }
        
        // Load notifications from centralized storage
        async function loadNotifications() {
            try {
                const response = await fetch('/api/notifications');
                if (response.ok) {
                    const data = await response.json();
                    notifications = data.notifications || [];
                    console.log('✅ Loaded notifications from API:', notifications.length);
                } else {
                    // Try to get fallback data from error response
                    try {
                        const errorData = await response.json();
                        if (errorData.fallback) {
                            notifications = errorData.fallback.notifications || [];
                            console.log('⚠️ Using fallback notifications from API error response');
                        } else {
                            // Fallback to localStorage
                            notifications = JSON.parse(localStorage.getItem('adminNotifications') || '[]');
                            console.log('⚠️ Using localStorage fallback for notifications');
                        }
                    } catch (parseError) {
                        // Fallback to localStorage
                        notifications = JSON.parse(localStorage.getItem('adminNotifications') || '[]');
                        console.log('⚠️ Using localStorage fallback for notifications');
                    }
                }
            } catch (error) {
                console.error('❌ Error loading notifications:', error);
                notifications = JSON.parse(localStorage.getItem('adminNotifications') || '[]');
            }
        }
        
        // Save notifications to centralized storage
        async function saveNotifications() {
            try {
                const response = await fetch('/api/notifications', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        notifications: notifications,
                        lastUpdated: new Date().toISOString()
                    })
                });
                
                if (response.ok) {
                    console.log('✅ Notifications saved to centralized storage');
                } else {
                    // Fallback to localStorage
                    localStorage.setItem('adminNotifications', JSON.stringify(notifications));
                    console.log('⚠️ Using localStorage fallback for notifications');
                }
            } catch (error) {
                console.error('❌ Error saving notifications:', error);
                localStorage.setItem('adminNotifications', JSON.stringify(notifications));
            }
        }
        
        // Add notification with rich data
        async function addNotification(title, message, type = 'info', data = {}) {
            const notification = {
                id: Math.floor(Date.now() + Math.random() * 1000),
                title: title,
                message: message,
                type: type,
                data: data,
                timestamp: new Date().toISOString(),
                read: false,
                actionRequired: data.actionRequired || false,
                priority: data.priority || 'normal'
            };
            
            notifications.unshift(notification);
            await saveNotifications();
            updateNotificationBadge();
            updateNotificationList();
            
            console.log('🔔 Added notification:', notification);
            return notification.id;
        }
        
        // Smart notification triggers
        async function triggerSmartNotifications() {
            console.log('🔍 Checking for smart notification triggers...');
            
            // Check for completed performance reviews
            await checkPerformanceReviewNotifications();
            
            // Check for payment method updates
            await checkPaymentMethodNotifications();
            
            // Check for contract status changes
            await checkContractStatusNotifications();
            
            // Check for job assignment updates
            await checkJobAssignmentNotifications();
        }
        
        // Check for performance review notifications
        async function checkPerformanceReviewNotifications() {
            try {
                const response = await fetch('/api/users');
                if (response.ok) {
                    const usersData = await response.json();
                    const users = usersData.users || {};
                    
                    for (const [userName, user] of Object.entries(users)) {
                        if (user.performance && user.performance.overallRating && user.performance.reviewDate) {
                            // Check if we already have a notification for this review
                            const existingNotification = notifications.find(n => 
                                n.type === 'performance_review_completed' && 
                                n.data.userEmail === user.profile?.email &&
                                n.data.reviewDate === user.performance.reviewDate
                            );
                            
                            // Only create notification if it doesn't exist and review is completed
                            if (!existingNotification) {
                                await addNotification(
                                    'Performance Review Completed',
                                    `${user.profile?.name || userName} has completed a performance review with rating ${user.performance.overallRating}/5`,
                                    'performance_review_completed',
                                    {
                                        userEmail: user.profile?.email,
                                        userName: user.profile?.name || userName,
                                        rating: user.performance.overallRating,
                                        reviewDate: user.performance.reviewDate,
                                        actionRequired: true,
                                        priority: 'high'
                                    }
                                );
                            }
                        }
                    }
                }
            } catch (error) {
                console.error('❌ Error checking performance review notifications:', error);
            }
        }
        
        // Check for payment method notifications
        async function checkPaymentMethodNotifications() {
            try {
                const response = await fetch('/api/users');
                if (response.ok) {
                    const usersData = await response.json();
                    const users = usersData.users || {};
                    
                    for (const [name, user] of Object.entries(users)) {
                        if (user.paymentMethod && user.paymentStatus === 'configured') {
                            const existingNotification = notifications.find(n => 
                                n.type === 'payment_method_updated' && 
                                n.data.userEmail === user.profile?.email
                            );
                            
                            if (!existingNotification) {
                                await addNotification(
                                    'Payment Method Updated',
                                    `${user.profile?.name || user.profile?.email} has updated their payment method to ${user.paymentMethod}`,
                                    'payment_method_updated',
                                    {
                                        userEmail: user.profile?.email,
                                        userName: user.profile?.name || 'Unknown User',
                                        paymentMethod: user.paymentMethod,
                                        actionRequired: false,
                                        priority: 'normal'
                                    }
                                );
                            }
                        }
                    }
                }
            } catch (error) {
                console.error('❌ Error checking payment method notifications:', error);
            }
        }
        
        // Check for contract status notifications
        async function checkContractStatusNotifications() {
            try {
                const response = await fetch('/api/users');
                if (response.ok) {
                    const usersData = await response.json();
                    const users = usersData.users || {};
                    
                    for (const [userName, user] of Object.entries(users)) {
                        if (user.contract && user.contract.contractStatus === 'signed') {
                            const existingNotification = notifications.find(n => 
                                n.type === 'contract_signed' && 
                                n.data.userEmail === user.profile?.email
                            );
                            
                            if (!existingNotification) {
                                await addNotification(
                                    'Contract Signed',
                                    `${user.profile?.name || userName} has signed their contract (${user.contract.contractId})`,
                                    'contract_signed',
                                    {
                                        contractId: user.contract.contractId,
                                        freelancerName: user.profile?.name || userName,
                                        userEmail: user.profile?.email,
                                        actionRequired: true,
                                        priority: 'high'
                                    }
                                );
                            }
                        }
                    }
                }
            } catch (error) {
                console.error('❌ Error checking contract status notifications:', error);
            }
        }
        
        // Check for job assignment notifications
        async function checkJobAssignmentNotifications() {
            try {
                const response = await fetch('/api/users');
                if (response.ok) {
                    const usersData = await response.json();
                    const users = usersData.users || {};
                    
                    for (const [name, user] of Object.entries(users)) {
                        if (user.jobs) {
                            for (const [jobId, job] of Object.entries(user.jobs)) {
                                if (job.projectStatus === 'completed' && job.paymentStatus === 'paid') {
                                    const existingNotification = notifications.find(n => 
                                        n.type === 'job_completed' && 
                                        n.data.userEmail === user.profile?.email &&
                                        n.data.jobId === jobId
                                    );
                                    
                                    if (!existingNotification) {
                                        await addNotification(
                                            'Job Completed',
                                            `${user.profile?.name || user.profile?.email} has completed job "${job.title}" and payment has been processed`,
                                            'job_completed',
                                            {
                                                userEmail: user.profile?.email,
                                                userName: user.profile?.name || 'Unknown User',
                                                jobId: jobId,
                                                jobTitle: job.title,
                                                actionRequired: false,
                                                priority: 'normal'
                                            }
                                        );
                                    }
                                }
                            }
                        }
                    }
                }
            } catch (error) {
                console.error('❌ Error checking job assignment notifications:', error);
            }
        }
        
        // Start notification polling
        function startNotificationPolling() {
            // DISABLED: Notification polling to prevent flickering
            // Notifications will be checked manually or on page load
            console.log('🔄 Notification polling disabled to prevent flickering');
            
            // Only check once on page load
            triggerSmartNotifications();
        }
        
        // Stop notification polling
        function stopNotificationPolling() {
            if (notificationUpdateInterval) {
                clearInterval(notificationUpdateInterval);
                console.log('⏹️ Stopped notification polling');
            }
        }
        
        // Update notification badge
        function updateNotificationBadge() {
            const badge = document.getElementById('notificationBadge');
            if (badge) {
                const unreadCount = notifications.filter(n => !n.read).length;
                const highPriorityCount = notifications.filter(n => !n.read && n.priority === 'high').length;
                
                badge.textContent = unreadCount;
                badge.style.display = unreadCount > 0 ? 'block' : 'none';
                
                // Add visual indicator for high priority notifications
                if (highPriorityCount > 0) {
                    badge.style.background = '#ff4444';
                    badge.style.animation = 'pulse 2s infinite';
                } else {
                    badge.style.background = '#FFB200';
                    badge.style.animation = 'none';
                }
            }
        }
        
        // Update notification list with rich display
        function updateNotificationList() {
            const list = document.getElementById('notificationList');
            if (!list) return;
            
            if (notifications.length === 0) {
                list.innerHTML = `
                    <div class="no-notifications">
                        <i class="fas fa-bell-slash"></i>
                        <p>No notifications</p>
                        <small>Notifications will appear here for important updates</small>
                    </div>
                `;
                return;
            }
            
            list.innerHTML = notifications.map(notification => `
                <div class="notification-item ${notification.read ? 'read' : 'unread'} ${notification.priority}" 
                     onclick="handleNotificationClick(${notification.id})">
                    <div class="notification-header">
                    <div class="notification-title">
                        <i class="fas fa-${getNotificationIcon(notification.type)}"></i>
                        ${notification.title}
                            ${notification.actionRequired ? '<span class="action-required">Action Required</span>' : ''}
                    </div>
                    <div class="notification-time">${formatNotificationTime(notification.timestamp)}</div>
                    </div>
                    <div class="notification-message">${notification.message}</div>
                    ${notification.data.actionRequired ? `
                        <div class="notification-actions">
                            <button onclick="handleNotificationAction(${notification.id}, 'view')" class="action-btn">
                                <i class="fas fa-eye"></i> View Details
                            </button>
                            <button onclick="handleNotificationAction(${notification.id}, 'dismiss')" class="action-btn secondary">
                                <i class="fas fa-times"></i> Dismiss
                            </button>
                        </div>
                    ` : ''}
                </div>
            `).join('');
        }
        
        // Handle notification clicks with smart navigation
        async function handleNotificationClick(notificationId) {
            const notification = notifications.find(n => n.id === notificationId);
            if (!notification) {
                console.error('❌ Notification not found:', notificationId);
                return;
            }
            
            console.log('🔍 Handling notification click:', notification);
            
            // Mark as read
            await markAsRead(notificationId);
            
            // Navigate based on notification type
            switch (notification.type) {
                case 'performance_review_completed':
                    if (notification.data.userEmail) {
                        console.log('✅ Opening performance review modal for:', notification.data.userEmail);
                        showPerformanceReviewModal(notification.data.userEmail);
                    }
                    break;
                    
                case 'contract_signed':
                console.log('✅ Switching to contracts tab for contract management');
                switchTab('contracts', null);
                    break;
                    
                case 'payment_method_updated':
                    console.log('✅ Switching to contracts tab for payment management');
                switchTab('contracts', null);
                    break;
                    
                case 'job_completed':
                    console.log('✅ Switching to jobs tab for job management');
                switchTab('jobs', null);
                    break;
                    
                default:
                    console.log('ℹ️ No specific action for notification type:', notification.type);
            }
        }
        
        // Handle notification actions
        async function handleNotificationAction(notificationId, action) {
            const notification = notifications.find(n => n.id === notificationId);
            if (!notification) return;
            
            switch (action) {
                case 'view':
                    await handleNotificationClick(notificationId);
                    break;
                    
                case 'dismiss':
                    await removeNotification(notificationId);
                    break;
                    
                case 'approve':
                    // Handle approval action
                    console.log('✅ Approving notification:', notificationId);
                    await removeNotification(notificationId);
                    break;
                    
                case 'reject':
                    // Handle rejection action
                    console.log('❌ Rejecting notification:', notificationId);
                    await removeNotification(notificationId);
                    break;
            }
        }
        
        // Remove notification
        async function removeNotification(notificationId) {
            notifications = notifications.filter(n => n.id !== notificationId);
            await saveNotifications();
            updateNotificationBadge();
            updateNotificationList();
        }
        
        // Mark notification as read
        async function markAsRead(notificationId) {
            const notification = notifications.find(n => n.id === notificationId);
            if (notification) {
                notification.read = true;
                await saveNotifications();
                updateNotificationBadge();
                updateNotificationList();
            }
        }
        
        // Clear all notifications
        async function clearAllNotifications() {
            notifications = [];
            await saveNotifications();
            updateNotificationBadge();
            updateNotificationList();
        }
        
        // Toggle notification dropdown
        function toggleNotifications() {
            const dropdown = document.getElementById('notificationDropdown');
            const bell = document.getElementById('notificationBell');
            
            if (dropdown && bell) {
                const isVisible = dropdown.style.display === 'block';
                dropdown.style.display = isVisible ? 'none' : 'block';
                
                if (!isVisible) {
                    // Position the dropdown relative to the bell button
                    const bellRect = bell.getBoundingClientRect();
                    dropdown.style.top = (bellRect.bottom + 10) + 'px';
                    dropdown.style.right = (window.innerWidth - bellRect.right) + 'px';
                    
                    updateNotificationList();
                    // Mark all as read when opened
                    notifications.forEach(n => n.read = true);
                    updateNotificationBadge();
                }
            }
        }
        
        // Get notification icon based on type
        function getNotificationIcon(type) {
            const icons = {
                'performance_review_completed': 'star',
                'contract_signed': 'file-contract',
                'payment_method_updated': 'credit-card',
                'job_completed': 'check-circle',
                'user_created': 'user-plus',
                'user_deleted': 'user-minus',
                'job_assigned': 'briefcase',
                'payment_processed': 'money-bill-wave',
                'system_update': 'cog',
                'warning': 'exclamation-triangle',
                'error': '❌',
                'success': 'check-circle',
                'info': 'info-circle'
            };
            return icons[type] || 'bell';
        }
        
        // Format notification time
        function formatNotificationTime(timestamp) {
            const now = new Date();
            const notificationTime = new Date(timestamp);
            const diffMs = now - notificationTime;
            const diffMins = Math.floor(diffMs / 60000);
            const diffHours = Math.floor(diffMs / 3600000);
            const diffDays = Math.floor(diffMs / 86400000);
            
            if (diffMins < 1) return 'Just now';
            if (diffMins < 60) return `${diffMins}m ago`;
            if (diffHours < 24) return `${diffHours}h ago`;
            if (diffDays < 7) return `${diffDays}d ago`;
            return notificationTime.toLocaleDateString();
        }

        // ==================== MODAL MANAGEMENT ====================
        
        // Universal modal close function
        function closeModal(button) {
            const modal = button.closest('div[style*="position: fixed"]');
            if (modal) {
                modal.remove();
            }
        }
        
        // Enhanced notification for JSON updates
        function notifyJSONUpdate(fileName, action, details = '') {
            const messages = {
                'freelancers.json': {
                    'updated': `✅ Freelancer data updated successfully!`,
                    'payment': `💰 Payment status updated for freelancer`,
                    'performance': `⭐ Performance review saved successfully!`
                },
                'jobs-data.json': {
                    'updated': `🎯 Job data updated successfully!`,
                    'assigned': `✅ Job assigned to freelancer successfully!`
                },
                'project-status.json': {
                    'updated': `📊 Project status updated successfully!`,
                    'payment': `💰 Payment status updated for project`
                },
                'performance.json': {
                    'updated': `⭐ Performance review data updated successfully!`,
                    'created': `⭐ New performance review created!`
                },
                'uploaded-contracts.json': {
                    'updated': `📄 Contract data updated successfully!`,
                    'uploaded': `📄 New contract uploaded successfully!`
                }
            };
            
            const fileMessages = messages[fileName] || {};
            const message = fileMessages[action] || `✅ ${fileName} updated successfully!`;
            
            showNotification(`${message} ${details}`, 'success');
        }

        // Real-time Performance Review System
        let performanceReviewPollingInterval = null;
        let lastPerformanceCheck = 0;
        
        // Real-time monitoring removed - not needed for admin purposes
        
        // Check for new performance reviews that need attention
        async function checkForNewPerformanceReviews() {
            try {
                console.log('🔍 Checking for new performance reviews...');
                
                // Reload users and performance reviews to get latest data
                await loadUsers();
                await loadPerformanceReviews();
                
                // Find users who need performance reviews
                const pendingReviews = Object.values(users).filter(userData => {
                    return shouldShowPerformanceReview(userData);
                });
                
                console.log(`📊 Found ${pendingReviews.length} pending performance reviews`);
                
                // Update performance review alerts
                updatePerformanceReviewAlerts(pendingReviews);
                
                // Check for new notifications that need to be added
                await checkForNewPerformanceNotifications(pendingReviews);
                
                lastPerformanceCheck = Date.now();
                
            } catch (error) {
                console.error('❌ Error checking performance reviews:', error);
            }
        }
        
        // Update performance review alerts in real-time
        function updatePerformanceReviewAlerts(pendingReviews) {
            const existingAlert = document.getElementById('performanceReviewAlert');
            
            if (pendingReviews.length > 0) {
                if (!existingAlert) {
                    // Create new alert
                    const alertContainer = document.createElement('div');
                    alertContainer.id = 'performanceReviewAlert';
                    alertContainer.style.cssText = `
                        position: fixed;
                        top: 20px;
                        right: 20px;
                        background: linear-gradient(135deg, #f59e0b, #d97706);
                        color: white;
                        padding: 1rem;
                        border-radius: 8px;
                        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                        z-index: 10000;
                        max-width: 350px;
                        animation: slideInRight 0.3s ease-out;
                    `;
                    
                    alertContainer.innerHTML = `
                        <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 0.5rem;">
                            <h4 style="margin: 0; color: white;"><i class="fas fa-star"></i> Performance Reviews Due</h4>
                            <button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; color: white; cursor: pointer; font-size: 1.2rem;">×</button>
                        </div>
                        <p style="margin: 0 0 0.5rem 0; font-size: 0.9rem;">
                            ${pendingReviews.length} freelancer${pendingReviews.length > 1 ? 's' : ''} need${pendingReviews.length > 1 ? '' : 's'} performance review.
                        </p>
                        <button onclick="showPerformanceReviewList()" 
                                style="background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); padding: 0.5rem 1rem; border-radius: 4px; cursor: pointer; font-size: 0.8rem;">
                            View All Reviews
                        </button>
                    `;
                    
                    document.body.appendChild(alertContainer);
                    
                    // Auto-hide after 10 seconds
                    setTimeout(() => {
                        if (alertContainer.parentNode) {
                            alertContainer.remove();
                        }
                    }, 10000);
                } else {
                    // Update existing alert
                    const countElement = existingAlert.querySelector('p');
                    if (countElement) {
                        countElement.innerHTML = `${pendingReviews.length} freelancer${pendingReviews.length > 1 ? 's' : ''} need${pendingReviews.length > 1 ? '' : 's'} performance review.`;
                    }
                }
            } else {
                // Remove alert if no pending reviews
                if (existingAlert) {
                    existingAlert.remove();
                }
            }
        }
        
        // Check for new performance notifications that need to be added
        async function checkForNewPerformanceNotifications(pendingReviews) {
            try {
                // Get existing notifications
                const existingNotifications = JSON.parse(localStorage.getItem('adminNotifications') || '[]');
                
                // Check each pending review
                for (const userData of pendingReviews) {
                    const userEmail = userData.profile?.email;
                    if (!userEmail) continue;
                    
                    // Check if notification already exists for this user
                    const existingNotification = existingNotifications.find(n => 
                        n.type === 'performance' && 
                        n.message.includes(userData.name || userEmail)
                    );
                    
                    // If no notification exists, add one
                    if (!existingNotification) {
                        addNotification(
                            'Performance Review Needed',
                            `${userData.name || userEmail} has completed a paid project and needs a performance review.`,
                            'performance'
                        );
                        
                        console.log(`📢 Added performance review notification for ${userData.name || userEmail}`);
                    }
                }
                
            } catch (error) {
                console.error('❌ Error checking performance notifications:', error);
            }
        }
        
        // Enhanced payment status update with immediate performance review trigger
        async function updatePaymentStatusWithPerformanceReview(userName, paymentStatus) {
            console.log(`🔄 Updating payment status for ${userName} to ${paymentStatus}...`);
            
            const userData = users[userName];
            if (!userData) {
                showNotification('User not found', 'error');
                return;
            }
            
            // Update user's payment status
            userData.paymentStatus = paymentStatus;
            
            // Update all jobs for this user
            if (userData.jobs) {
                Object.values(userData.jobs).forEach(job => {
                    job.paymentStatus = paymentStatus;
                });
            }
            
            // Save to localStorage
            localStorage.setItem('users', JSON.stringify(users));
            
            // Update GitHub
            try {
                await updateUsersOnGitHub();
                showNotification(`✅ Payment status updated for ${userName}!\nStatus: ${paymentStatus}`, 'success');
                
                // Add notification for user about payment status change
                await addNotification(
                    'Payment Status Updated',
                    `Your payment status has been updated to "${paymentStatus}" by admin`,
                    'payment_status_updated',
                    {
                        userName: userName,
                        userEmail: userData.profile?.email,
                        paymentStatus: paymentStatus,
                        actionRequired: false,
                        priority: 'normal'
                    }
                );
                
                // Immediate performance review trigger for paid status
                if (paymentStatus === 'paid') {
                    console.log(`⭐ Payment completed for ${userName}, triggering performance review workflow...`);
                    
                    // Add immediate notification
                    addNotification(
                        'Performance Review Needed',
                        `${userName} has completed a paid project and needs a performance review.`,
                        'performance'
                    );
                    
                    // Performance review alerts are now handled by the notification system
                    
                    // Trigger immediate performance review check
                    setTimeout(async () => {
                        await checkForNewPerformanceReviews();
                    }, 1000);
                    
                    showNotification(`⭐ Performance review workflow triggered for ${userName}`, 'info');
                }
                
            } catch (error) {
                console.error('❌ Error updating GitHub:', error);
                showNotification(`⚠️ Payment status saved locally but GitHub update failed: ${error.message}`, 'warning');
            }
            
            // Refresh the display
            displayUsers();
        }
        
        // Performance review alerts are now handled by the notification system
        
        // Real-time monitoring functions removed - not needed for admin purposes
        
        // Manual performance review check
        async function manualPerformanceReviewCheck() {
            console.log('🔄 Manual performance review check triggered...');
            
            try {
                // Show loading notification
                showNotification('Checking for performance reviews...', 'info');
                
                // Perform the check
                await checkForNewPerformanceReviews();
                
                // Show completion notification
                const pendingReviews = Object.values(users).filter(userData => {
                    return shouldShowPerformanceReview(userData);
                });
                
                if (pendingReviews.length > 0) {
                    showNotification(`Found ${pendingReviews.length} pending performance review${pendingReviews.length > 1 ? 's' : ''}`, 'success');
                } else {
                    showNotification('No pending performance reviews found', 'info');
                }
                
            } catch (error) {
                console.error('❌ Error during manual performance review check:', error);
                showNotification('Error checking performance reviews', 'error');
            }
        }
        
        // Add CSS for animations
        const performanceReviewStyles = document.createElement('style');
        performanceReviewStyles.textContent = `
            @keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            
            @keyframes pulse {
                0% { transform: translate(-50%, -50%) scale(1); }
                50% { transform: translate(-50%, -50%) scale(1.05); }
                100% { transform: translate(-50%, -50%) scale(1); }
            }
        `;
        document.head.appendChild(performanceReviewStyles);
    </script>
    
    <style>
        :root {
            --primary: #FFB200;
            --primary-dark: #FF9000;
            --gold: #FFD700;
            --black: #000000;
            --white: #ffffff;
            --gray-light: #f8f9fa;
            --gray-medium: #6c757d;
            --gray-dark: #343a40;
            --border-radius: 12px;
            --shadow: 0 4px 20px rgba(0,0,0,0.1);
            --shadow-hover: 0 8px 30px rgba(0,0,0,0.15);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 12px;
        }

        ::-webkit-scrollbar-track {
            background: #0a0a0a;
        }

        ::-webkit-scrollbar-thumb {
            background: linear-gradient(135deg, #FFB200, #22c55e);
            border-radius: 6px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(135deg, #FF8C00, #16a34a);
        }

        /* Fix browser autofill styling */
        input:-webkit-autofill,
        input:-webkit-autofill:hover,
        input:-webkit-autofill:focus,
        input:-webkit-autofill:active {
            -webkit-box-shadow: 0 0 0 30px #0a0a0a inset !important;
            -webkit-text-fill-color: #ffffff !important;
            transition: background-color 5000s ease-in-out 0s;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: url('https://static.wixstatic.com/media/aeef42_a910287f24764299afec1bfd88559221~mv2.gif') center center fixed;
            background-size: cover;
            color: #ffffff;
            line-height: 1.6;
            overflow-x: hidden;
            -webkit-text-size-adjust: 100%;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            position: relative;
        }
        
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.85);
            z-index: -1;
        }
        
        /* Login Screen Styles */
        .login-screen {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: linear-gradient(135deg, #000 0%, #1a1a1a 100%);
            position: relative;
            overflow: hidden;
        }
        
        .login-screen::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at 30% 50%, rgba(255,178,0,0.1) 0%, transparent 70%);
            pointer-events: none;
        }
        
        .login-container {
            background: rgba(0, 0, 0, 0.8);
            padding: 3rem;
            border-radius: 16px;
            box-shadow: 
                0 8px 32px rgba(0,0,0,0.5),
                0 0 0 1px rgba(255,178,0,0.2);
            text-align: center;
            max-width: 450px;
            width: 100%;
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255,178,0,0.3);
            position: relative;
            z-index: 2;
        }
        
        .login-logo {
            width: 140px;
            height: auto;
            margin-bottom: 2rem;
            filter: 
                drop-shadow(0 0 3px #FFB200)
                drop-shadow(0 0 6px #FFB200)
                drop-shadow(2px 2px 0px #000000);
            animation: logoGlow 3s ease-in-out infinite alternate;
        }
        
        @keyframes logoGlow {
            0% {
                filter: 
                    drop-shadow(0 0 3px #FFB200)
                    drop-shadow(0 0 6px #FFB200)
                    drop-shadow(2px 2px 0px #000000);
            }
            100% {
                filter: 
                    drop-shadow(0 0 5px #FFB200)
                    drop-shadow(0 0 8px #FFB200)
                    drop-shadow(2px 2px 0px #000000);
            }
        }
        
        .login-title {
            font-family: 'Cinzel', serif;
            font-size: 2.2rem;
            font-weight: 700;
            color: #FFB200;
            margin-bottom: 1rem;
            text-shadow: 0 2px 10px rgba(255,178,0,0.3);
        }
        
        .login-subtitle {
            color: rgba(255,255,255,0.8);
            margin-bottom: 2rem;
            font-size: 1.1rem;
        }
        
        .login-form {
            text-align: left;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #FFB200;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .form-group input {
            width: 100%;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.4);
            border: 1px solid rgba(255, 178, 0, 0.3);
            border-radius: 8px;
            font-size: 1rem;
            color: #fff;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(15px);
        }
        
        .form-group input::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }
        
        .form-group input:focus {
            outline: none;
            background: rgba(0, 0, 0, 0.6);
            border-color: #FFB200;
            box-shadow: 0 0 0 2px rgba(255, 178, 0, 0.2);
        }
        
        .login-btn {
            width: 100%;
            background: linear-gradient(135deg, #FFB200, #FFD700);
            color: #000;
            border: none;
            padding: 1rem;
            border-radius: 8px;
            font-weight: 700;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            overflow: hidden;
        }
        
        .login-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: #FFB200;
            z-index: -1;
            transform: scaleX(0);
            transform-origin: left;
            transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .login-btn:hover::before {
            transform: scaleX(1);
        }
        
        .login-btn:hover {
            color: #000;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255,178,0,0.4);
        }
        
        .error-message {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.3);
            color: #ef4444;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            display: none;
            backdrop-filter: blur(10px);
        }
        
        /* Main Admin Interface Styles */
        .admin-interface {
            display: none;
            min-height: 100vh;
            position: relative;
            z-index: 1;
            position: relative;
        }
        
        .admin-interface::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at 30% 50%, rgba(255,178,0,0.05) 0%, transparent 70%);
            pointer-events: none;
        }
        
        .header {
            background: rgba(0,0,0,0.4);
            color: white;
            padding: 2rem;
            border-radius: 15px;
            margin: 2rem;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,178,0,0.2);
            position: relative;
            z-index: 2;
        }
        
        .header-top {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 2rem;
        }
        
        .header-left {
            flex: 1;
        }
        
        .header-left h1 {
            font-family: 'Cinzel', serif;
            font-size: 2.5rem;
            font-weight: 700;
            color: #FFB200;
            margin-bottom: 0.5rem;
            text-shadow: 0 2px 10px rgba(255,178,0,0.3);
        }
        
        .header-left p {
            color: rgba(255,255,255,0.8);
            font-size: 1.1rem;
            margin: 0;
        }
        
        .header-right {
            display: flex;
            align-items: center;
        }
        
        .header-actions {
            display: flex;
            gap: 1rem;
            align-items: center;
        }
        
        .quick-links {
            display: flex;
            gap: 0.5rem;
        }
        
        .action-btn {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            background: rgba(255,255,255,0.1);
            color: white;
            border: 1px solid rgba(255,255,255,0.2);
            padding: 0.75rem 1rem;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            text-decoration: none;
        }
        
        .action-btn:hover {
            background: rgba(255,255,255,0.2);
            border-color: #FFB200;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(255,178,0,0.2);
        }
        
        .link-btn {
            background: rgba(0, 0, 0, 0.6);
            border-color: rgba(255, 178, 0, 0.5);
            color: #FFB200;
        }
        
        .link-btn:hover {
            background: rgba(255, 178, 0, 0.1);
            border-color: #FFB200;
        }
        
        .notification-bell {
            position: relative;
            background: rgba(0, 0, 0, 0.6);
            border-color: rgba(255, 178, 0, 0.5);
            color: #FFB200;
        }
        
        .notification-bell:hover {
            background: rgba(255, 178, 0, 0.1);
            border-color: #FFB200;
        }
        
        /* Notification System Styles */
        .notification-container {
            position: relative;
            display: inline-block;
        }

        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #ff4444;
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            font-size: 0.7rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .notification-dropdown {
            position: fixed;
            top: 120px;
            right: 2rem;
            width: 350px;
            max-height: 400px;
            background: #1a1a1a;
            border: 1px solid rgba(255, 178, 0, 0.3);
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
            z-index: 9999999;
            pointer-events: auto;
        }

        .notification-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid rgba(255, 178, 0, 0.2);
        }

        .notification-header h3 {
            color: #FFB200;
            margin: 0;
            font-size: 1rem;
        }

        .clear-all-btn {
            background: none;
            border: none;
            color: #FFB200;
            cursor: pointer;
            font-size: 0.8rem;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            transition: background 0.3s ease;
        }

        .clear-all-btn:hover {
            background: rgba(255, 178, 0, 0.1);
        }

        .notification-list {
            max-height: 300px;
            overflow-y: auto;
            padding: 0.5rem;
        }

        .notification-item {
            padding: 1rem;
            border-bottom: 1px solid rgba(255, 178, 0, 0.1);
            transition: background 0.3s ease;
            cursor: pointer;
        }

        .notification-item:hover {
            background: rgba(255, 178, 0, 0.05);
        }
        
        .notification-item.unread {
            background: rgba(255, 178, 0, 0.05);
            border-left: 3px solid #FFB200;
        }
        
        .notification-item.read {
            opacity: 0.7;
        }
        
        .notification-item.high {
            border-left: 3px solid #ff4444;
        }
        
        .notification-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 0.5rem;
        }
        
        .notification-title {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: #FFB200;
            font-weight: 600;
            font-size: 0.9rem;
        }
        
        .action-required {
            background: #ff4444;
            color: white;
            padding: 0.2rem 0.5rem;
            border-radius: 4px;
            font-size: 0.7rem;
            font-weight: bold;
            margin-left: 0.5rem;
        }
        
        .notification-message {
            color: rgba(255, 255, 255, 0.9);
            font-size: 0.85rem;
            line-height: 1.4;
            margin-bottom: 0.5rem;
        }
        
        .notification-time {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.75rem;
        }
        
        .notification-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }
        
        .notification-actions .action-btn {
            background: rgba(255, 178, 0, 0.2);
            color: #FFB200;
            border: 1px solid rgba(255, 178, 0, 0.3);
            padding: 0.3rem 0.6rem;
            border-radius: 4px;
            font-size: 0.75rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .notification-actions .action-btn:hover {
            background: rgba(255, 178, 0, 0.3);
            border-color: #FFB200;
        }
        
        .notification-actions .action-btn.secondary {
            background: rgba(255, 255, 255, 0.1);
            color: rgba(255, 255, 255, 0.8);
            border-color: rgba(255, 255, 255, 0.2);
        }
        
        .notification-actions .action-btn.secondary:hover {
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }
        
        .no-notifications {
            text-align: center;
            padding: 2rem;
            color: rgba(255, 255, 255, 0.6);
        }
        
        .no-notifications i {
            font-size: 2rem;
            margin-bottom: 1rem;
            color: #FFB200;
        }
        
        .no-notifications small {
            display: block;
            margin-top: 0.5rem;
            font-size: 0.8rem;
            opacity: 0.7;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .notification-item:last-child {
            border-bottom: none;
        }

        .no-notifications {
            text-align: center;
            padding: 2rem;
            color: rgba(255,255,255,0.6);
        }

        .no-notifications i {
            font-size: 2rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }
        
        .logout-btn {
            background: rgba(0, 0, 0, 0.6);
            border-color: rgba(239, 68, 68, 0.5);
            color: #ef4444;
        }
        
        .logout-btn:hover {
            background: rgba(239, 68, 68, 0.1);
            border-color: #ef4444;
        }
        
        /* Responsive Design */
        @media (max-width: 1024px) {
            .header-top {
                flex-direction: column;
                gap: 1.5rem;
                text-align: center;
            }
            
            .header-left h1 {
                font-size: 2rem;
            }
            
            .header-actions {
                justify-content: center;
                flex-wrap: wrap;
            }
            
            .quick-links {
                flex-wrap: wrap;
                justify-content: center;
            }
        }
        
        @media (max-width: 768px) {
            .header-left h1 {
                font-size: 1.8rem;
            }
            
            .action-btn {
                padding: 0.6rem 0.8rem;
                font-size: 0.8rem;
            }
            
            .action-btn span {
                display: none;
            }
            
            .quick-links {
                gap: 0.25rem;
            }
        }
        
        /* Tab Navigation */
        .tab-navigation {
            background: rgba(0,0,0,0.4);
            padding: 1rem 2rem;
            margin: 0 4rem 2rem 4rem;
            border-radius: 15px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,178,0,0.2);
            position: relative;
            z-index: 2;
        }
        
        .tab-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }
        
        .tab-btn {
            background: rgba(255, 178, 0, 0.1);
            border: 1px solid rgba(255, 178, 0, 0.3);
            color: #FFB200;
            padding: 1rem 2rem;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .tab-btn:hover {
            background: rgba(255, 178, 0, 0.2);
            border-color: rgba(255, 178, 0, 0.5);
            transform: translateY(-2px);
        }
        
        .tab-btn.active {
            background: rgba(255, 178, 0, 0.3);
            border-color: #FFB200;
            color: white;
        }
        
        /* Firebase Management Styles */
        .firebase-management {
            display: grid;
            gap: 2rem;
            margin-top: 1rem;
        }
        
        .info-card, .action-card {
            background: rgba(0,0,0,0.4);
            padding: 2rem;
            border-radius: 15px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,178,0,0.2);
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
        }
        
        .info-card h3, .action-card h3 {
            color: #FFB200;
            font-family: 'Cinzel', serif;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .info-card p, .action-card p {
            color: rgba(255,255,255,0.9);
            margin-bottom: 0.5rem;
            line-height: 1.6;
        }
        
        .info-card ul {
            color: rgba(255,255,255,0.8);
            padding-left: 1.5rem;
        }
        
        .info-card li {
            margin-bottom: 0.5rem;
        }
        
        .action-card button {
            background: linear-gradient(135deg, #FFB200, #FF8C00);
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-top: 1rem;
        }
        
        .action-card button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255,178,0,0.3);
        }
        
        /* Tab Content */
        .tab-content {
            display: none;
            margin: 2rem 4rem;
        }
        
        .tab-content.active {
            display: block;
        }
        
        /* Common Form Styles */
        .form-section {
            background: rgba(0,0,0,0.4);
            padding: 2rem;
            border-radius: 15px;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,178,0,0.2);
            position: relative;
            z-index: 2;
        }
        
        .form-section h2 {
            font-family: 'Cinzel', serif;
            font-size: 1.8rem;
            color: #FFB200;
            margin-bottom: 1rem;
            text-shadow: 0 2px 10px rgba(255,178,0,0.3);
        }
        
        .workflow-info {
            background: rgba(255,178,0,0.1);
            padding: 1.5rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            border: 1px solid rgba(255,178,0,0.3);
            backdrop-filter: blur(10px);
        }
        
        .workflow-info p {
            color: rgba(255,255,255,0.9);
            margin-bottom: 1rem;
        }
        
        .workflow-info ol {
            color: rgba(255,255,255,0.8);
            padding-left: 1.5rem;
        }
        
        .workflow-info li {
            margin-bottom: 0.5rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #FFB200;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        input, textarea, select {
            width: 100%;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.4);
            border: 1px solid rgba(255, 178, 0, 0.3);
            border-radius: 8px;
            color: #fff;
            font-size: 1rem;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(15px);
        }
        
        input::placeholder, textarea::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }
        
        input:focus, textarea:focus, select:focus {
            outline: none;
            background: rgba(0, 0, 0, 0.6);
            border-color: #FFB200;
            box-shadow: 0 0 0 2px rgba(255, 178, 0, 0.2);
        }
        
        textarea {
            height: 100px;
            resize: vertical;
            min-height: 80px;
        }
        
        .btn {
            background: linear-gradient(135deg, #FFB200, #FFD700);
            color: #000;
            border: none;
            padding: 1rem 2rem;
            border-radius: 8px;
            font-weight: 700;
            cursor: pointer;
            margin-right: 1rem;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            overflow: hidden;
        }
        
        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: #FFB200;
            z-index: -1;
            transform: scaleX(0);
            transform-origin: left;
            transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .btn:hover::before {
            transform: scaleX(1);
        }
        
        .btn:hover {
            color: #000;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255,178,0,0.4);
        }
        
        /* List Styles */
        .list-section {
            background: rgba(0,0,0,0.4);
            padding: 2rem;
            border-radius: 15px;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,178,0,0.2);
            position: relative;
            z-index: 2;
        }
        
        .list-section h2 {
            font-family: 'Cinzel', serif;
            font-size: 1.8rem;
            color: #FFB200;
            margin-bottom: 1.5rem;
            text-shadow: 0 2px 10px rgba(255,178,0,0.3);
        }
        
        .item-card {
            border: 1px solid rgba(255,178,0,0.3);
            padding: 1.5rem;
            margin-bottom: 1rem;
            border-radius: 12px;
            background: rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }
        
        .item-card:hover {
            border-color: #FFB200;
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(255,178,0,0.2);
        }
        
        .item-card h3 {
            margin: 0 0 0.5rem 0;
            color: #FFB200;
            font-family: 'Cinzel', serif;
            font-size: 1.3rem;
        }
        
        .item-meta {
            display: flex;
            gap: 1rem;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
            color: rgba(255,255,255,0.7);
            flex-wrap: wrap;
        }
        
        .item-description {
            margin: 1rem 0;
            line-height: 1.6;
            color: rgba(255,255,255,0.9);
        }
        
        .actions {
            margin-top: 1rem;
        }
        
        .btn-small {
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
        }
        
        /* Upload section styles removed - manual upload functionality no longer needed */
        
        /* Mobile Responsive */
        @media (max-width: 768px) {
            .login-container {
                margin: 1rem;
                padding: 2rem;
            }
            
            .header, .tab-navigation, .tab-content {
                margin: 1rem;
            }
            
            .tab-buttons {
                flex-direction: column;
            }
            
            .tab-btn {
                justify-content: center;
            }
            
            .item-meta {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .btn {
                margin-bottom: 0.5rem;
                width: 100%;
            }
        }

        /* Export Section Styles */
        .export-section {
            background: rgba(0, 0, 0, 0.8);
            padding: 2rem;
            border-radius: 16px;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255,178,0,0.2);
            position: relative;
            z-index: 2;
        }

        .export-section h2 {
            font-family: 'Cinzel', serif;
            font-size: 1.8rem;
            color: #FFB200;
            margin-bottom: 1.5rem;
            text-shadow: 0 2px 10px rgba(255,178,0,0.3);
        }

        .export-section pre {
            background: rgba(0, 0, 0, 0.6);
            border: 1px solid rgba(255, 178, 0, 0.3);
            border-radius: 8px;
            padding: 1rem;
            color: #fff;
            font-size: 0.9rem;
            max-height: 300px;
            overflow-y: auto;
            margin-top: 1rem;
            white-space: pre-wrap;
        }
        
        /* Notification System Styles */
        .notification-item {
            padding: 1rem;
            border-bottom: 1px solid rgba(255,178,0,0.1);
            cursor: pointer;
            transition: background 0.2s;
        }
        
        .notification-item:hover {
            background: rgba(255,178,0,0.05);
        }
        
        .notification-item.unread {
            background: rgba(255,178,0,0.1);
        }
        
        .notification-item.read {
            opacity: 0.7;
        }
        
        .notification-title {
            font-weight: bold;
            color: #FFB200;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .notification-message {
            color: rgba(255,255,255,0.8);
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
        }
        
        .notification-time {
            color: rgba(255,255,255,0.5);
            font-size: 0.8rem;
        }
        
        .no-notifications {
            text-align: center;
            padding: 2rem;
            color: rgba(255,255,255,0.5);
        }
        
        .no-notifications i {
            font-size: 2rem;
            margin-bottom: 1rem;
            display: block;
        }
    </style>
</head>
<body>
    <!-- Login Screen -->
    <div id="loginScreen" class="login-screen">
        <div class="login-container">
            <img src="https://static.wixstatic.com/media/aeef42_d31420a75a164d2cb4508bdd7d99ca88~mv2.png" alt="Cochran Films" class="login-logo">
            <h1 class="login-title">⚙️ Admin Dashboard</h1>
            <p class="login-subtitle">Manage jobs and contracts from one central location</p>
            
            <div id="errorMessage" class="error-message">
                Incorrect password. Please try again.
            </div>
            
            <form class="login-form" id="loginForm">
                <div class="form-group">
                    <label for="username">Email</label>
                    <input type="email" id="username" name="username" placeholder="Enter your email address" required>
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <input type="password" id="password" name="password" required>
                </div>
                <button type="submit" class="login-btn">🔐 Login</button>
            </form>
        </div>
    </div>

    <!-- Main Admin Interface -->
    <div id="adminInterface" class="admin-interface">
        <div class="header">
            <!-- Modern Header Layout -->
            <div class="header-top">
                <div class="header-left">
                    <h1><i class="fas fa-cogs"></i> Admin Dashboard</h1>
                    <p>Cochran Films - Central Management System</p>
                </div>
                <div class="header-right">
                    <div class="header-actions">
                        <div class="quick-links">
                            <a href="https://collaborate.cochranfilms.com" class="action-btn link-btn">
                                <i class="fas fa-list"></i>
                                <span>Job Listings</span>
                            </a>
                            <a href="contract.html" class="action-btn link-btn">
                                <i class="fas fa-file-contract"></i>
                                <span>Contracts</span>
                            </a>
                            <a href="user-portal.html" class="action-btn link-btn">
                                <i class="fas fa-users"></i>
                                <span>User Portal</span>
                            </a>
                            <a href="backend.html" class="action-btn link-btn">
                                <i class="fas fa-cogs"></i>
                                <span>Backend Docs</span>
                            </a>
                            <a href="read-me.html" class="action-btn link-btn">
                                <i class="fas fa-film"></i>
                                <span>Platform Showcase</span>
                            </a>
                            <button class="action-btn link-btn" onclick="showPerformanceReviewManager()">
                                <i class="fas fa-star"></i>
                                <span>Performance Reviews</span>
                            </button>
                            <button class="action-btn link-btn" onclick="manualPerformanceReviewCheck()">
                                <i class="fas fa-sync-alt"></i>
                                <span>Check Reviews</span>
                            </button>

                        </div>
                        
                        <div class="notification-container">
                            <button class="action-btn notification-bell" onclick="toggleNotifications()" id="notificationBell">
                                <i class="fas fa-bell"></i>
                                <span class="notification-badge" id="notificationBadge" style="display: none;">0</span>
                                    </button>
                        </div>
                        
                        <button class="action-btn logout-btn" onclick="logout()">
                            <i class="fas fa-sign-out-alt"></i>
                            <span>Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tab Navigation -->
        <div class="tab-navigation">
            <div class="tab-buttons">
                <button class="tab-btn active" onclick="switchTab('jobs', event)">
                    <span>📋</span> Job Listings
                </button>
                <button class="tab-btn" onclick="switchTab('contracts', event)">
                    <span>👥</span> Creator Management
                </button>
                <button class="tab-btn" onclick="switchTab('firebase', event)">
                    <span>🔥</span> Firebase Management
                </button>
            </div>
        </div>

        <!-- Firebase Management Tab -->
        <div id="firebase-tab" class="tab-content">
            <!-- Content will be dynamically loaded by showFirebaseManagement() -->
        </div>

        <!-- Jobs Tab -->
        <div id="jobs-tab" class="tab-content active">

            <div class="form-section">
                <h2>Add/Edit Job</h2>
                <form id="jobForm">
                    <div class="form-group">
                        <label for="jobTitle">Job Title *</label>
                        <input type="text" id="jobTitle" name="title" placeholder="Enter job title" required>
                    </div>
                    <div class="form-group">
                        <label for="jobDate">Event Date</label>
                        <input type="datetime-local" id="jobDate" name="date">
                    </div>
                    <div class="form-group">
                        <label for="jobLocation">Location</label>
                        <select id="jobLocation" name="location" style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px;">
                            <option value="">Select a location...</option>
                        </select>
                    </div>
                    <!-- jobPay field removed - using only rate field from freelancer form -->
                    <div class="form-group">
                        <label for="jobDescription">Description</label>
                        <textarea id="jobDescription" name="description" placeholder="Describe the role, requirements, and responsibilities..."></textarea>
                    </div>
                    <div class="form-group">
                        <label for="jobStatus">Status</label>
                        <select id="jobStatus" name="status">
                            <option value="Active">Active</option>
                            <option value="Inactive">Inactive</option>
                        </select>
                    </div>
                    <button type="submit" class="btn">Save Job</button>
                    <button type="button" class="btn" onclick="clearJobForm()">Clear Form</button>
                </form>
            </div>

            <div class="list-section">
                <h2>Current Jobs</h2>
                <div id="jobsList"></div>
            </div>


        </div>

        <!-- Contracts Tab -->
        <div id="contracts-tab" class="tab-content">

            <div class="form-section">
                <h2>Add/Edit Creator</h2>
                <form id="contractForm">
                    <div class="form-group">
                        <label for="freelancerName">Full Name *</label>
                        <input type="text" id="freelancerName" name="name" placeholder="Enter creator's full name" required>
                    </div>
                    <div class="form-group">
                        <label for="freelancerEmail">Email Address *</label>
                        <input type="email" id="freelancerEmail" name="email" placeholder="Enter creator's email address" required>
                    </div>
                    <div class="form-group">
                        <label for="freelancerPassword" style="color: rgba(255,255,255,0.6);">Portal Password</label>
                        <input type="text" id="freelancerPassword" name="password" placeholder="Password will be set by creator during contract signing" readonly style="background: rgba(255,255,255,0.1); color: rgba(255,255,255,0.6);">
                        <small style="color: rgba(255,255,255,0.7); font-size: 0.85rem; display: block; margin-top: 0.25rem;">
                            🔄 Password will be set automatically when creator signs their contract
                        </small>
                    </div>
                    <div class="form-group">
                        <label for="contractUrl">Contract URL *</label>
                        <input type="text" id="contractUrl" name="contractUrl" placeholder="contract.html" value="contract.html" readonly style="background: rgba(255,255,255,0.1);">
                        <small style="color: rgba(255,255,255,0.7); font-size: 0.85rem; display: block; margin-top: 0.25rem;">
                            📝 All creators use the same contract.html portal. No individual files needed!
                        </small>
                    </div>
                    <div class="form-group">
                        <label for="freelancerRole">Role *</label>
                        <select id="freelancerRole" name="role" required style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px;">
                            <option value="">Select a role...</option>
                            <option value="Backdrop Photographer">Backdrop Photographer</option>
                            <option value="Editor">Editor</option>
                            <option value="Videographer">Videographer</option>
                            <option value="Photographer">Photographer</option>
                            <option value="Full Stack Designer">Full Stack Designer</option>
                            <option value="Video Editor">Video Editor</option>
                            <option value="Corporate Videographer">Corporate Videographer</option>
                        </select>
                        <small style="color: rgba(255,255,255,0.7); font-size: 0.85rem; display: block; margin-top: 0.25rem;">
                            💡 Based on existing roles in your system
                        </small>
                    </div>
                    <div class="form-group">
                        <label for="freelancerLocation">Project Location</label>
                        <select id="freelancerLocation" name="location" style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px;">
                            <option value="">Select a location...</option>
                            <option value="6695 Church Street, Douglasville, GA 30134">6695 Church Street, Douglasville, GA 30134</option>
                            <option value="Sandy Springs, GA">Sandy Springs, GA</option>
                            <option value="Douglasville, GA">Douglasville, GA</option>
                            <option value="Atlanta, GA">Atlanta, GA</option>
                            <option value="Atlanta Area">Atlanta Area</option>
                        </select>
                        <small style="color: rgba(255,255,255,0.7); font-size: 0.85rem; display: block; margin-top: 0.25rem;">
                            📍 Based on existing locations in your system
                        </small>
                    </div>
                    <div class="form-group">
                        <label for="projectStart">Project Start Date & Time</label>
                        <input type="datetime-local" id="projectStart" name="projectStart" style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px;">
                        <small style="color: rgba(255,255,255,0.7); font-size: 0.85rem; display: block; margin-top: 0.25rem;">
                            📅 Select date and time for project start
                        </small>
                    </div>
                    <div class="form-group">
                        <label for="freelancerRate">Rate *</label>
                        <select id="freelancerRate" name="rate" required style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px;">
                            <option value="">Select a rate...</option>
                            <option value="$400.00 USD (Flat)">$400.00 USD (Flat)</option>
                            <option value="$900.00 USD (Flat)">$900.00 USD (Flat)</option>
                            <option value="$300 + Tip">$300 + Tip</option>
                            <option value="$450.00 USD (Flat)">$450.00 USD (Flat)</option>
                            <option value="$750.00 USD (Flat)">$750.00 USD (Flat)</option>
                            <option value="$500.00 USD (Flat)">$500.00 USD (Flat)</option>
                        </select>
                        <small style="color: rgba(255,255,255,0.7); font-size: 0.85rem; display: block; margin-top: 0.25rem;">
                            💰 Based on existing rates in your system
                        </small>
                    </div>
                    <div class="form-group">
                        <label for="approvedDate">Approved Date</label>
                        <input type="date" id="approvedDate" name="approvedDate" style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px;">
                    </div>
                    <button type="submit" class="btn">Save Freelancer</button>
                    <button type="button" class="btn" onclick="clearContractForm()">Clear Form</button>
                </form>
            </div>

            <div class="list-section">
                <h2>Current Creators</h2>
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                    <div>
                        <p style="color: rgba(255,255,255,0.7); margin: 0;">Manage your creator contracts and assignments</p>
                        <p id="freelancerStatus" style="color: #22c55e; margin: 0.25rem 0 0 0; font-size: 0.9rem;">Loading creators...</p>
                    </div>
                    <button class="btn" onclick="refreshFreelancers()" style="background: linear-gradient(135deg, #22c55e, #16a34a); color: white;">
                        <i class="fas fa-sync-alt"></i> Refresh Data
                    </button>
                </div>
                <div id="contractsList"></div>
                
                <!-- Uploaded Contracts Section -->
                <div style="margin-top: 2rem;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                        <h3 style="color: #FFB200; margin: 0;">📋 Uploaded Contracts</h3>
                        <div style="display: flex; gap: 0.5rem;">
                            <button class="btn" onclick="rebuildUploadedContracts()" style="background: linear-gradient(135deg, #3b82f6, #2563eb);">
                                <i class="fas fa-sync-alt"></i> Rebuild from Files
                            </button>
                            <button class="btn btn-danger" onclick="bulkDeleteContracts()" style="background: linear-gradient(135deg, #ef4444, #dc2626);">
                                <i class="fas fa-trash"></i> Bulk Delete Selected
                            </button>
                        </div>
                    </div>
                    <div id="contractAnalytics" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-bottom: 1rem;"></div>
                    <div id="uploadedContractsList"></div>
                </div>
            </div>

            <!-- Job Assignment Section -->
            <div class="form-section">
                <h2>🎯 Assign Additional Jobs to Creators</h2>
                <div class="workflow-info">
                    <p><strong>Additional Job Assignment:</strong> Assign extra jobs to creators using managed dropdown options. The primary job is automatically created from the creator details when you save them.</p>
                </div>
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem;">
                    <div>
                        <h3 style="color: #FFB200; margin-bottom: 1rem;">Select Creator</h3>
                        <select id="jobAssignmentFreelancer" style="margin-bottom: 1rem;">
                            <option value="">Choose a creator...</option>
                        </select>
                        
                        <div id="freelancerJobInfo" style="display: none; background: rgba(255,178,0,0.1); padding: 1rem; border-radius: 8px; border: 1px solid rgba(255,178,0,0.3); margin-bottom: 1rem;">
                            <h4 style="color: #FFB200; margin-bottom: 0.5rem;">Current Jobs:</h4>
                            <div id="currentJobsList"></div>
                        </div>
                    </div>
                    
                    <div>
                        <h3 style="color: #22c55e; margin-bottom: 1rem;">Add New Job</h3>
                        <form id="jobAssignmentForm">
                            <div class="form-group">
                                <label for="jobId">Job ID *</label>
                                <input type="text" id="jobId" placeholder="e.g., job-001" required>
                            </div>
                            <div class="form-group">
                                <label for="jobRole">Role</label>
                                <select id="jobRole" style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px;">
                                    <option value="">Select a role...</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="assignmentJobLocation">Location</label>
                                <select id="assignmentJobLocation" style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px;">
                                    <option value="">Select a location...</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="assignmentJobProjectStart">Project Start</label>
                                <input type="datetime-local" id="assignmentJobProjectStart" placeholder="Select date and time">
                            </div>
                            <div class="form-group">
                                <label for="assignmentJobRate">Rate</label>
                                <select id="assignmentJobRate" style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px;">
                                    <option value="">Select a rate...</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="assignmentJobStatus">Status</label>
                                <select id="assignmentJobStatus">
                                    <option value="upcoming">Upcoming</option>
                                    <option value="active">Active</option>
                                    <option value="completed">Completed</option>
                                    <option value="cancelled">Cancelled</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="assignmentJobProjectType">Project Type</label>
                                <select id="assignmentJobProjectType" style="width: 100%; padding: 0.75rem; background: rgba(0,0,0,0.5); border: 1px solid #FFB200; color: white; border-radius: 6px;">
                                    <option value="">Select a project type...</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="assignmentJobDescription">Description</label>
                                <textarea id="assignmentJobDescription" placeholder="Describe the job requirements..."></textarea>
                            </div>
                            <div class="form-group">
                                <label for="primaryJobCheckbox">
                                    <input type="checkbox" id="primaryJobCheckbox" style="width: auto; margin-right: 0.5rem;">
                                    Set as Primary Job
                                </label>
                            </div>
                            <button type="submit" class="btn">Add Job</button>
                        </form>
                    </div>
                </div>
            </div>



            <!-- Dropdown Options Management Section -->
            <div class="form-section">
                <h2>⚙️ Manage Dropdown Options</h2>
                <div class="workflow-info">
                    <p><strong>Dropdown Management:</strong> Add and manage options for dropdown selectors throughout the admin dashboard. These options are automatically loaded from dropdown-options.json and saved to GitHub for persistence across sessions.</p>
                </div>
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem;">
                    <!-- Roles Management -->
                    <div style="background: rgba(0,0,0,0.3); padding: 1.5rem; border-radius: 12px; border: 1px solid rgba(255,178,0,0.2);">
                        <h3 style="color: #FFB200; margin-bottom: 1rem;">🎯 Roles</h3>
                        <div class="form-group">
                            <input type="text" id="newRole" placeholder="Add new role (e.g., Videographer)" style="margin-bottom: 0.5rem;">
                            <button class="btn btn-small" onclick="addDropdownOption('roles', 'newRole')" style="background: #22c55e;">
                                <i class="fas fa-plus"></i> Add Role
                            </button>
                        </div>
                        <div id="rolesList" style="margin-top: 1rem;">
                            <!-- Roles will be populated here -->
                        </div>
                    </div>
                    
                    <!-- Locations Management -->
                    <div style="background: rgba(0,0,0,0.3); padding: 1.5rem; border-radius: 12px; border: 1px solid rgba(255,178,0,0.2);">
                        <h3 style="color: #FFB200; margin-bottom: 1rem;">📍 Locations</h3>
                        <div class="form-group">
                            <input type="text" id="newLocation" placeholder="Add new location (e.g., Atlanta, GA)" style="margin-bottom: 0.5rem;">
                            <button class="btn btn-small" onclick="addDropdownOption('locations', 'newLocation')" style="background: #22c55e;">
                                <i class="fas fa-plus"></i> Add Location
                            </button>
                        </div>
                        <div id="locationsList" style="margin-top: 1rem;">
                            <!-- Locations will be populated here -->
                        </div>
                    </div>
                    
                    <!-- Rates Management -->
                    <div style="background: rgba(0,0,0,0.3); padding: 1.5rem; border-radius: 12px; border: 1px solid rgba(255,178,0,0.2);">
                        <h3 style="color: #FFB200; margin-bottom: 1rem;">💰 Rates</h3>
                        <div class="form-group">
                            <input type="text" id="newRate" placeholder="Add new rate (e.g., $500.00 USD (Flat))" style="margin-bottom: 0.5rem;">
                            <button class="btn btn-small" onclick="addDropdownOption('rates', 'newRate')" style="background: #22c55e;">
                                <i class="fas fa-plus"></i> Add Rate
                            </button>
                        </div>
                        <div id="ratesList" style="margin-top: 1rem;">
                            <!-- Rates will be populated here -->
                        </div>
                    </div>
                    
                    <!-- Project Types Management -->
                    <div style="background: rgba(0,0,0,0.3); padding: 1.5rem; border-radius: 12px; border: 1px solid rgba(255,178,0,0.2);">
                        <h3 style="color: #FFB200; margin-bottom: 1rem;">🎬 Project Types</h3>
                        <div class="form-group">
                            <input type="text" id="newProjectType" placeholder="Add new project type (e.g., Corporate Video)" style="margin-bottom: 0.5rem;">
                            <button class="btn btn-small" onclick="addDropdownOption('projectTypes', 'newProjectType')" style="background: #22c55e;">
                                <i class="fas fa-plus"></i> Add Project Type
                            </button>
                        </div>
                        <div id="projectTypesList" style="margin-top: 1rem;">
                            <!-- Project types will be populated here -->
                        </div>
                    </div>
                </div>
                
                <div style="margin-top: 2rem; text-align: center;">
                    <button class="btn" onclick="saveDropdownOptions()" style="background: linear-gradient(135deg, #22c55e, #16a34a); color: white;">
                        <i class="fas fa-save"></i> Save All Dropdown Options
                    </button>
                    <button class="btn" onclick="loadDropdownOptions()" style="background: linear-gradient(135deg, #3B82F6, #2563EB); color: white; margin-left: 1rem;">
                        <i class="fas fa-sync"></i> Refresh Options
                    </button>
                </div>
            </div>


        </div>

        <!-- Auto-refresh functionality -->
        <script>
        // DISABLED: Auto-refresh to prevent flickering
        // Users can manually refresh when needed
        console.log('🔄 Auto-refresh disabled to prevent flickering');
        
        // Background notification polling (every 30 seconds)
        setInterval(async () => {
            // Check for new notifications in background
            await triggerSmartNotifications();
            await checkForNewPerformanceReviews();
        }, 30000); // 30 seconds for background checks
        
        // Function to update user status indicators without full reload
        function updateUserStatusIndicators() {
            // Update payment status indicators
            const paymentElements = document.querySelectorAll('[data-payment-status]');
            paymentElements.forEach(element => {
                const status = element.getAttribute('data-payment-status');
                if (status) {
                    element.textContent = status.charAt(0).toUpperCase() + status.slice(1);
                }
            });
            
            // Update project status indicators
            const projectElements = document.querySelectorAll('[data-project-status]');
            projectElements.forEach(element => {
                const status = element.getAttribute('data-project-status');
                if (status) {
                    element.textContent = status.charAt(0).toUpperCase() + status.slice(1);
                }
            });
        }
        </script>

        <!-- Notification Dropdown (Moved outside containers to avoid stacking context issues) -->
        <div class="notification-dropdown" id="notificationDropdown" style="display: none;">
            <div class="notification-header">
                <h3><i class="fas fa-bell"></i> Notifications</h3>
                <button onclick="clearAllNotifications()" class="clear-all-btn">
                    <i class="fas fa-trash"></i> Clear All
                </button>
            </div>
            <div class="notification-list" id="notificationList"></div>
        </div>

</body>
</html>

